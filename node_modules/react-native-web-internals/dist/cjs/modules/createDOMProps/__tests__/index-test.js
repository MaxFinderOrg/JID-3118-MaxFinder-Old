"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var import__ = __toESM(require(".."));
const createProps = (props) => (0, import__.default)(null, props);
describe("modules/createDOMProps", () => {
  describe("focus-related accessibility attributes", () => {
    test("with no accessibility props", () => {
      expect(createProps({})).toEqual({});
    });
    describe('"accessibilityRole" of "link"', () => {
      const accessibilityRole = "link";
      test("default case", () => {
        expect(createProps({ accessibilityRole })).toEqual(
          expect.not.objectContaining({ tabIndex: "-1" })
        );
      });
      test('when "focusable" is true', () => {
        expect(createProps({ accessibilityRole, focusable: true })).toEqual(
          expect.not.objectContaining({ tabIndex: "-1" })
        );
      });
      test('when "focusable" is false', () => {
        expect(createProps({ accessibilityRole, focusable: false })).toEqual(
          expect.objectContaining({ tabIndex: "-1" })
        );
      });
      test('when "accessibilityDisabled" is true', () => {
        expect(createProps({ accessibilityRole, accessibilityDisabled: true })).toEqual(
          expect.objectContaining({ "aria-disabled": true })
        );
      });
      test('when "disabled" is false', () => {
        expect(createProps({ accessibilityRole, accessibilityDisabled: false })).toEqual(
          expect.not.objectContaining({ tabIndex: "-1" })
        );
      });
    });
    const testFocusableRole = (accessibilityRole) => {
      test("default case", () => {
        expect(createProps({ accessibilityRole })).toEqual(
          expect.objectContaining({ tabIndex: "0" })
        );
      });
      test('when "focusable" is true', () => {
        expect(createProps({ accessibilityRole, focusable: true })).toEqual(
          expect.objectContaining({ tabIndex: "0" })
        );
      });
      test('when "focusable" is false', () => {
        expect(createProps({ accessibilityRole, focusable: false })).toEqual(
          expect.objectContaining({ tabIndex: "-1" })
        );
      });
      test('when "accessibilityDisabled" is true', () => {
        expect(createProps({ accessibilityRole, accessibilityDisabled: true })).toEqual(
          expect.objectContaining({ "aria-disabled": true })
        );
      });
      test('when "accessibilityDisabled" is false', () => {
        expect(createProps({ accessibilityRole, accessibilityDisabled: false })).toEqual(
          expect.objectContaining({ tabIndex: "0" })
        );
      });
    };
    describe('"accessibilityRole" of "button"', () => {
      testFocusableRole("button");
    });
    describe("with unfocusable accessibilityRole", () => {
      test('when "focusable" is true', () => {
        expect(createProps({ focusable: true })).toEqual(
          expect.objectContaining({ tabIndex: "0" })
        );
      });
      test('when "focusable" is false', () => {
        expect(createProps({ focusable: false })).toEqual(
          expect.objectContaining({ tabIndex: "-1" })
        );
      });
    });
  });
  test('prop "accessibilityLabel" becomes "aria-label"', () => {
    const accessibilityLabel = "accessibilityLabel";
    const props = createProps({ accessibilityLabel });
    expect(props["aria-label"]).toEqual(accessibilityLabel);
  });
  test('prop "accessibilityLiveRegion" becomes "aria-live"', () => {
    const accessibilityLiveRegion = "none";
    const props = createProps({ accessibilityLiveRegion });
    expect(props["aria-live"]).toEqual("off");
  });
  test('prop "accessibilityRole" becomes "role"', () => {
    const accessibilityRole = "button";
    const props = createProps({ accessibilityRole });
    expect(props.role).toEqual("button");
  });
  test('prop "className" is preserved', () => {
    const className = "external-class-name";
    const props = createProps({ className });
    expect(props.className).toEqual(className);
  });
  test('prop "nativeID" becomes "id"', () => {
    const nativeID = "Example.nativeID";
    const props = createProps({ nativeID });
    expect(props.id).toEqual(nativeID);
  });
  test('prop "testID" becomes "data-testid"', () => {
    const testID = "Example.testID";
    const props = createProps({ testID });
    expect(props["data-testid"]).toEqual(testID);
  });
});
//# sourceMappingURL=index-test.js.map
