"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var preprocess_exports = {};
__export(preprocess_exports, {
  createBoxShadowValue: () => createBoxShadowValue,
  createTextShadowValue: () => createTextShadowValue,
  preprocess: () => preprocess,
  processStyle: () => processStyle
});
module.exports = __toCommonJS(preprocess_exports);
var import_normalizeColor = __toESM(require("./compiler/normalizeColor"));
var import_normalizeValueWithProperty = __toESM(require("./compiler/normalizeValueWithProperty"));
const emptyObject = {};
const defaultOffset = { height: 0, width: 0 };
const createBoxShadowValue = (style) => {
  const { shadowColor, shadowOffset, shadowOpacity, shadowRadius } = style;
  const { height, width } = shadowOffset || defaultOffset;
  const offsetX = (0, import_normalizeValueWithProperty.default)(width);
  const offsetY = (0, import_normalizeValueWithProperty.default)(height);
  const blurRadius = (0, import_normalizeValueWithProperty.default)(shadowRadius || 0);
  const color = (0, import_normalizeColor.default)(shadowColor || "black", shadowOpacity);
  if (color != null && offsetX != null && offsetY != null && blurRadius != null) {
    return `${offsetX} ${offsetY} ${blurRadius} ${color}`;
  }
};
const createTextShadowValue = (style) => {
  const { textShadowColor, textShadowOffset, textShadowRadius } = style;
  const { height, width } = textShadowOffset || defaultOffset;
  const radius = textShadowRadius || 0;
  const offsetX = (0, import_normalizeValueWithProperty.default)(width);
  const offsetY = (0, import_normalizeValueWithProperty.default)(height);
  const blurRadius = (0, import_normalizeValueWithProperty.default)(radius);
  const color = (0, import_normalizeValueWithProperty.default)(textShadowColor, "textShadowColor");
  if (color && (height !== 0 || width !== 0 || radius !== 0) && offsetX != null && offsetY != null && blurRadius != null) {
    return `${offsetX} ${offsetY} ${blurRadius} ${color}`;
  }
};
const preprocess = (originalStyle) => {
  const style = originalStyle || emptyObject;
  const nextStyle = {};
  for (const originalProp in style) {
    const originalValue = style[originalProp];
    let prop = originalProp;
    let value = originalValue;
    if (!Object.prototype.hasOwnProperty.call(style, originalProp) || originalValue == null) {
      continue;
    }
    if (prop === "shadowColor" || prop === "shadowOffset" || prop === "shadowOpacity" || prop === "shadowRadius") {
      const boxShadowValue = createBoxShadowValue(style);
      if (boxShadowValue != null && nextStyle.boxShadow == null) {
        const { boxShadow } = style;
        prop = "boxShadow";
        value = boxShadow ? `${boxShadow}, ${boxShadowValue}` : boxShadowValue;
      } else {
        continue;
      }
    }
    if (prop === "textShadowColor" || prop === "textShadowOffset" || prop === "textShadowRadius") {
      const textShadowValue = createTextShadowValue(style);
      if (textShadowValue != null && nextStyle.textShadow == null) {
        const { textShadow } = style;
        prop = "textShadow";
        value = textShadow ? `${textShadow}, ${textShadowValue}` : textShadowValue;
      } else {
        continue;
      }
    }
    nextStyle[prop] = value;
  }
  return nextStyle;
};
const processStyle = preprocess;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  createBoxShadowValue,
  createTextShadowValue,
  preprocess,
  processStyle
});
//# sourceMappingURL=preprocess.js.map
