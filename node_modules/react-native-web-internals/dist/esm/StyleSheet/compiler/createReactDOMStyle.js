import canUseDOM from "../../modules/canUseDOM";
import normalizeValueWithProperty from "./normalizeValueWithProperty";
const emptyObject = {};
const supportsCSS3TextDecoration = !canUseDOM || window.CSS != null && window.CSS.supports != null && (window.CSS.supports("text-decoration-line", "none") || window.CSS.supports("-webkit-text-decoration-line", "none"));
const ignoredProps = {
  elevation: true,
  overlayColor: true,
  resizeMode: true,
  tintColor: true
};
const MONOSPACE_FONT_STACK = "monospace,monospace";
const SYSTEM_FONT_STACK = '-apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Helvetica,Arial,sans-serif';
const STYLE_SHORT_FORM_EXPANSIONS = {
  borderColor: [
    "borderTopColor",
    "borderRightColor",
    "borderBottomColor",
    "borderLeftColor"
  ],
  borderRadius: [
    "borderTopLeftRadius",
    "borderTopRightRadius",
    "borderBottomRightRadius",
    "borderBottomLeftRadius"
  ],
  borderStyle: [
    "borderTopStyle",
    "borderRightStyle",
    "borderBottomStyle",
    "borderLeftStyle"
  ],
  borderWidth: [
    "borderTopWidth",
    "borderRightWidth",
    "borderBottomWidth",
    "borderLeftWidth"
  ],
  marginHorizontal: ["marginRight", "marginLeft"],
  marginVertical: ["marginTop", "marginBottom"],
  overflow: ["overflowX", "overflowY"],
  overscrollBehavior: ["overscrollBehaviorX", "overscrollBehaviorY"],
  paddingHorizontal: ["paddingRight", "paddingLeft"],
  paddingVertical: ["paddingTop", "paddingBottom"]
};
const mapTransform = (transform) => {
  const type = Object.keys(transform)[0];
  const value = transform[type];
  if (type === "matrix" || type === "matrix3d") {
    return `${type}(${value.join(",")})`;
  } else {
    const normalizedValue = normalizeValueWithProperty(value, type);
    return `${type}(${normalizedValue})`;
  }
};
const createTransformValue = (style) => {
  let transform = style.transform;
  if (Array.isArray(style.transform)) {
    transform = style.transform.map(mapTransform).join(" ");
  }
  return transform;
};
const createReactDOMStyle = (style, isInline) => {
  if (!style) {
    return emptyObject;
  }
  const resolvedStyle = {};
  for (const prop in style) {
    const value = style[prop];
    if (
      // Ignore everything with a null value
      value == null || // Ignore some React Native styles
      ignoredProps[prop]
    ) {
      continue;
    }
    if (prop === "aspectRatio") {
      resolvedStyle[prop] = value.toString();
    } else if (prop === "backgroundClip") {
      if (value === "text") {
        resolvedStyle.backgroundClip = value;
        resolvedStyle.WebkitBackgroundClip = value;
      }
    } else if (prop === "flex") {
      if (value === -1) {
        resolvedStyle.flexGrow = 0;
        resolvedStyle.flexShrink = 1;
        resolvedStyle.flexBasis = "auto";
      } else {
        resolvedStyle.flex = value;
      }
    } else if (prop === "font") {
      resolvedStyle[prop] = value.replace("System", SYSTEM_FONT_STACK);
    } else if (prop === "fontFamily") {
      if (value.indexOf("System") > -1) {
        const stack = value.split(/,\s*/);
        stack[stack.indexOf("System")] = SYSTEM_FONT_STACK;
        resolvedStyle[prop] = stack.join(",");
      } else if (value === "monospace") {
        resolvedStyle[prop] = MONOSPACE_FONT_STACK;
      } else {
        resolvedStyle[prop] = value;
      }
    } else if (prop === "fontVariant") {
      if (Array.isArray(value) && value.length > 0) {
        resolvedStyle.fontVariant = value.join(" ");
      }
    } else if (prop === "textAlignVertical") {
      resolvedStyle.verticalAlign = value === "center" ? "middle" : value;
    } else if (prop === "textDecorationLine") {
      if (!supportsCSS3TextDecoration) {
        resolvedStyle.textDecoration = value;
      } else {
        resolvedStyle.textDecorationLine = value;
      }
    } else if (prop === "transform" || prop === "transformMatrix") {
      resolvedStyle.transform = createTransformValue(style);
    } else if (prop === "writingDirection") {
      resolvedStyle.direction = value;
    } else {
      const value2 = normalizeValueWithProperty(style[prop], prop);
      const longFormProperties = STYLE_SHORT_FORM_EXPANSIONS[prop];
      if (isInline && prop === "margin") {
        if (style.marginHorizontal == null) {
          resolvedStyle.marginLeft = value2;
          resolvedStyle.marginRight = value2;
        }
        if (style.marginVertical == null) {
          resolvedStyle.marginTop = value2;
          resolvedStyle.marginBottom = value2;
        }
      } else if (isInline && prop === "padding") {
        if (style.paddingHorizontal == null) {
          resolvedStyle.paddingLeft = value2;
          resolvedStyle.paddingRight = value2;
        }
        if (style.paddingVertical == null) {
          resolvedStyle.paddingTop = value2;
          resolvedStyle.paddingBottom = value2;
        }
      } else if (longFormProperties) {
        longFormProperties.forEach((longForm, i) => {
          if (style[longForm] == null) {
            resolvedStyle[longForm] = value2;
          }
        });
      } else {
        resolvedStyle[prop] = Array.isArray(value2) ? value2.join(",") : value2;
      }
    }
  }
  return resolvedStyle;
};
var createReactDOMStyle_default = createReactDOMStyle;
export {
  createTransformValue,
  createReactDOMStyle_default as default
};
//# sourceMappingURL=createReactDOMStyle.js.map
