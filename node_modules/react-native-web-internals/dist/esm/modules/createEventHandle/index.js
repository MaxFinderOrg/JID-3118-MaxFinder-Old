import canUseDOM from "../canUseDOM";
const emptyFunction = () => {
};
function supportsPassiveEvents() {
  let supported = false;
  if (canUseDOM) {
    try {
      const options = {};
      Object.defineProperty(options, "passive", {
        get() {
          supported = true;
          return false;
        }
      });
      window.addEventListener("test", null, options);
      window.removeEventListener("test", null, options);
    } catch (e) {
    }
  }
  return supported;
}
const canUsePassiveEvents = supportsPassiveEvents();
function getOptions(options) {
  if (options == null) {
    return false;
  }
  return canUsePassiveEvents ? options : Boolean(options.capture);
}
function isPropagationStopped() {
  return this.cancelBubble;
}
function isDefaultPrevented() {
  return this.defaultPrevented;
}
function normalizeEvent(event) {
  event.nativeEvent = event;
  event.persist = emptyFunction;
  event.isDefaultPrevented = isDefaultPrevented;
  event.isPropagationStopped = isPropagationStopped;
  return event;
}
function createEventHandle(type, options) {
  const opts = getOptions(options);
  return function(target, listener) {
    if (target == null || typeof target.addEventListener !== "function") {
      throw new Error("createEventHandle: called on an invalid target.");
    }
    const element = target;
    if (listener != null) {
      const compatListener = (e) => listener(normalizeEvent(e));
      element.addEventListener(type, compatListener, opts);
      return function removeListener() {
        if (element != null) {
          element.removeEventListener(type, compatListener, opts);
        }
      };
    } else {
      return emptyFunction;
    }
  };
}
export {
  createEventHandle as default
};
//# sourceMappingURL=index.js.map
