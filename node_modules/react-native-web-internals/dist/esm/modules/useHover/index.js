import { getModality } from "../modality/index";
import useEvent from "../useEvent/index";
import useLayoutEffect from "../useLayoutEffect/index";
const emptyObject = {};
const opts = { passive: true };
const lockEventType = "react-gui:hover:lock";
const unlockEventType = "react-gui:hover:unlock";
const supportsPointerEvent = () => !!(typeof window !== "undefined" && window.PointerEvent != null);
function dispatchCustomEvent(target, type, payload) {
  const event = document.createEvent("CustomEvent");
  const { bubbles = true, cancelable = true, detail } = payload || emptyObject;
  event.initCustomEvent(type, bubbles, cancelable, detail);
  target.dispatchEvent(event);
}
function getPointerType(event) {
  const { pointerType } = event;
  return pointerType != null ? pointerType : getModality();
}
function useHover(targetRef, config) {
  const { contain, disabled, onHoverStart, onHoverChange, onHoverUpdate, onHoverEnd } = config;
  const canUsePE = supportsPointerEvent();
  const addMoveListener = useEvent(canUsePE ? "pointermove" : "mousemove", opts);
  const addEnterListener = useEvent(canUsePE ? "pointerenter" : "mouseenter", opts);
  const addLeaveListener = useEvent(canUsePE ? "pointerleave" : "mouseleave", opts);
  const addLockListener = useEvent(lockEventType, opts);
  const addUnlockListener = useEvent(unlockEventType, opts);
  useLayoutEffect(() => {
    const target = targetRef.current;
    if (target !== null) {
      const hoverEnd = function(e) {
        if (onHoverEnd != null) {
          onHoverEnd(e);
        }
        if (onHoverChange != null) {
          onHoverChange(false);
        }
        addMoveListener(target, null);
        addLeaveListener(target, null);
      };
      const leaveListener = function(e) {
        const target2 = targetRef.current;
        if (target2 != null && getPointerType(e) !== "touch") {
          if (contain) {
            dispatchCustomEvent(target2, unlockEventType);
          }
          hoverEnd(e);
        }
      };
      const moveListener = function(e) {
        if (getPointerType(e) !== "touch") {
          if (onHoverUpdate != null) {
            if (e.x == null) {
              e.x = e.clientX;
            }
            if (e.y == null) {
              e.y = e.clientY;
            }
            onHoverUpdate(e);
          }
        }
      };
      const hoverStart = function(e) {
        if (onHoverStart != null) {
          onHoverStart(e);
        }
        if (onHoverChange != null) {
          onHoverChange(true);
        }
        if (onHoverUpdate != null) {
          addMoveListener(target, !disabled ? moveListener : null);
        }
        addLeaveListener(target, !disabled ? leaveListener : null);
      };
      const enterListener = function(e) {
        const target2 = targetRef.current;
        if (target2 != null && getPointerType(e) !== "touch") {
          if (contain) {
            dispatchCustomEvent(target2, lockEventType);
          }
          hoverStart(e);
          const lockListener = function(lockEvent) {
            if (lockEvent.target !== target2) {
              hoverEnd(e);
            }
          };
          const unlockListener = function(lockEvent) {
            if (lockEvent.target !== target2) {
              hoverStart(e);
            }
          };
          addLockListener(target2, !disabled ? lockListener : null);
          addUnlockListener(target2, !disabled ? unlockListener : null);
        }
      };
      addEnterListener(target, !disabled ? enterListener : null);
    }
  }, [
    addEnterListener,
    addMoveListener,
    addLeaveListener,
    addLockListener,
    addUnlockListener,
    contain,
    disabled,
    onHoverStart,
    onHoverChange,
    onHoverUpdate,
    onHoverEnd,
    targetRef
  ]);
}
export {
  useHover as default
};
//# sourceMappingURL=index.js.map
