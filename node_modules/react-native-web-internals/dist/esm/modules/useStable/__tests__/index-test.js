import { jsx } from "react/jsx-runtime";
import * as ReactDOM from "react-dom";
import { act } from "react-dom/test-utils";
import useStable from "..";
function createRoot(rootNode) {
  return {
    render(element) {
      ReactDOM.render(element, rootNode);
    }
  };
}
describe("useStable", () => {
  let root;
  let rootNode;
  let spy = {};
  const TestComponent = ({ initialValueCallback }) => {
    const value = useStable(initialValueCallback);
    spy.value = value;
    return null;
  };
  beforeEach(() => {
    spy = {};
    rootNode = document.createElement("div");
    document.body.appendChild(rootNode);
    root = createRoot(rootNode);
  });
  afterEach(() => {
    root.render(null);
    document.body.removeChild(rootNode);
    rootNode = null;
    root = null;
  });
  test("correctly sets the initial value", () => {
    const initialValueCallback = () => 5;
    act(() => {
      root.render(/* @__PURE__ */ jsx(TestComponent, { initialValueCallback }));
    });
    expect(spy.value).toBe(5);
  });
  test("does not change the value", () => {
    let counter = 0;
    const initialValueCallback = () => counter++;
    act(() => {
      root.render(/* @__PURE__ */ jsx(TestComponent, { initialValueCallback }));
    });
    expect(spy.value).toBe(0);
    act(() => {
      root.render(/* @__PURE__ */ jsx(TestComponent, { initialValueCallback }));
    });
    expect(spy.value).toBe(0);
  });
  test("only calls the callback once", () => {
    let counter = 0;
    const initialValueCallback = () => counter++;
    act(() => {
      root.render(/* @__PURE__ */ jsx(TestComponent, { initialValueCallback }));
    });
    expect(counter).toBe(1);
    act(() => {
      root.render(/* @__PURE__ */ jsx(TestComponent, { initialValueCallback }));
    });
    expect(counter).toBe(1);
  });
  test("does not change the value if the callback initially returns null", () => {
    let counter = 0;
    const initialValueCallback = () => {
      if (counter === 0) {
        counter++;
        return null;
      }
      return counter++;
    };
    act(() => {
      root.render(/* @__PURE__ */ jsx(TestComponent, { initialValueCallback }));
    });
    expect(spy.value).toBe(null);
    act(() => {
      root.render(/* @__PURE__ */ jsx(TestComponent, { initialValueCallback }));
    });
    expect(spy.value).toBe(null);
  });
});
//# sourceMappingURL=index-test.js.map
