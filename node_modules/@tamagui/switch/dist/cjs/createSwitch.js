"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var createSwitch_exports = {};
__export(createSwitch_exports, {
  SwitchContext: () => SwitchContext,
  createSwitch: () => createSwitch
});
module.exports = __toCommonJS(createSwitch_exports);
var import_jsx_runtime = (
  // @ts-ignore
  require("react/jsx-runtime")
);
var import_compose_refs = require("@tamagui/compose-refs");
var import_core = require("@tamagui/core");
var import_focusable = require("@tamagui/focusable");
var import_get_token = require("@tamagui/get-token");
var import_label = require("@tamagui/label");
var import_use_controllable_state = require("@tamagui/use-controllable-state");
var import_use_previous = require("@tamagui/use-previous");
var React = __toESM(require("react"));
var import_react_native = require("react-native");
const SwitchContext = (0, import_core.createStyledContext)({
  checked: false,
  disabled: false,
  size: void 0,
  frameWidth: 60,
  unstyled: false
});
function createSwitch({ Frame, Thumb, acceptsUnstyled }) {
  const SwitchThumb = Thumb.styleable(function SwitchThumb2(props, forwardedRef) {
    const { size: sizeProp, ...thumbProps } = props;
    const { disabled, checked, unstyled, frameWidth } = React.useContext(SwitchContext);
    const [thumbWidth, setThumbWidth] = React.useState(0);
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      Thumb,
      {
        theme: unstyled === false && checked ? "active" : null,
        "data-state": getState(checked),
        "data-disabled": disabled ? "" : void 0,
        x: checked ? frameWidth - thumbWidth : 0,
        ...thumbProps,
        onLayout: (0, import_core.composeEventHandlers)(
          props.onLayout,
          (e) => (
            // @ts-ignore
            setThumbWidth(e.nativeEvent.layout.width)
          )
        ),
        ref: forwardedRef
      }
    );
  });
  const SwitchComponent = Frame.extractable(
    React.forwardRef(function SwitchFrame(propsIn, forwardedRef) {
      const styledContext = React.useContext(SwitchContext);
      const props = (0, import_core.useProps)(propsIn);
      const {
        labeledBy: ariaLabelledby,
        name,
        checked: checkedProp,
        defaultChecked,
        required,
        disabled,
        value = "on",
        onCheckedChange,
        size = styledContext.size ?? "$true",
        unstyled = styledContext.unstyled ?? false,
        native: nativeProp,
        nativeProps,
        ...switchProps
      } = props;
      const leftBorderWidth = (() => {
        let _ = void 0;
        for (const key in switchProps) {
          if (key === "borderWidth" || key === "borderLeftWidth") {
            _ = switchProps[key];
          }
        }
        if (acceptsUnstyled && _ === void 0 && unstyled === false) {
          _ = 2;
        }
        if (typeof _ === "string") {
          _ = (0, import_core.getVariableValue)((0, import_get_token.getSize)(_));
        }
        return +_;
      })();
      const native = Array.isArray(nativeProp) ? nativeProp : [nativeProp];
      const shouldRenderMobileNative = !import_core.isWeb && nativeProp === true || !import_core.isWeb && native.includes("mobile") || native.includes("android") && import_react_native.Platform.OS === "android" || native.includes("ios") && import_react_native.Platform.OS === "ios";
      const [button, setButton] = React.useState(null);
      const composedRefs = (0, import_compose_refs.useComposedRefs)(forwardedRef, (node) => setButton(node));
      const labelId = (0, import_label.useLabelContext)(button);
      const labelledBy = ariaLabelledby || labelId;
      const hasConsumerStoppedPropagationRef = React.useRef(false);
      const isFormControl = import_core.isWeb ? button ? Boolean(button.closest("form")) : true : false;
      const [frameWidth, setFrameWidth] = React.useState(60);
      const [checked = false, setChecked] = (0, import_use_controllable_state.useControllableState)({
        prop: checkedProp,
        defaultProp: defaultChecked || false,
        onChange: onCheckedChange,
        transition: true
      });
      if (shouldRenderMobileNative) {
        return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          import_react_native.Switch,
          {
            value: checkedProp,
            onValueChange: onCheckedChange,
            ...nativeProps
          }
        );
      }
      if (!import_core.isWeb) {
        React.useEffect(() => {
          if (!props.id)
            return;
          return (0, import_focusable.registerFocusable)(props.id, {
            focus: () => {
              setChecked((x) => !x);
            }
          });
        }, [props.id, setChecked]);
      }
      return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          Frame,
          {
            unstyled,
            size,
            checked,
            disabled,
            frameWidth: frameWidth - leftBorderWidth * 2,
            theme: checked ? "active" : null,
            themeShallow: true,
            role: "switch",
            "aria-checked": checked,
            "aria-labelledby": labelledBy,
            "aria-required": required,
            "data-state": getState(checked),
            "data-disabled": disabled ? "" : void 0,
            tabIndex: disabled ? void 0 : 0,
            value,
            ...switchProps,
            ref: composedRefs,
            onPress: (0, import_core.composeEventHandlers)(props.onPress, (event) => {
              setChecked((prevChecked) => !prevChecked);
              if (import_core.isWeb && isFormControl) {
                hasConsumerStoppedPropagationRef.current = event.isPropagationStopped();
                if (!hasConsumerStoppedPropagationRef.current)
                  event.stopPropagation();
              }
            }),
            onLayout: (0, import_core.composeEventHandlers)(
              props.onLayout,
              (e) => (
                // @ts-ignore
                setFrameWidth(e.nativeEvent.layout.width)
              )
            )
          }
        ),
        import_core.isWeb && isFormControl && /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          BubbleInput,
          {
            control: button,
            bubbles: !hasConsumerStoppedPropagationRef.current,
            name,
            value,
            checked,
            required,
            disabled,
            style: { transform: "translateX(-100%)" }
          }
        )
      ] });
    })
  );
  const BubbleInput = (props) => {
    const { control, checked, bubbles = true, ...inputProps } = props;
    const ref = React.useRef(null);
    const prevChecked = (0, import_use_previous.usePrevious)(checked);
    React.useEffect(() => {
      const input = ref.current;
      const inputProto = window.HTMLInputElement.prototype;
      const descriptor = Object.getOwnPropertyDescriptor(
        inputProto,
        "checked"
      );
      const setChecked = descriptor.set;
      if (prevChecked !== checked && setChecked) {
        const event = new Event("click", { bubbles });
        setChecked.call(input, checked);
        input.dispatchEvent(event);
      }
    }, [prevChecked, checked, bubbles]);
    return (
      // @ts-ignore
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
        "input",
        {
          type: "checkbox",
          "aria-hidden": true,
          defaultChecked: checked,
          ...inputProps,
          tabIndex: -1,
          ref,
          style: {
            ...props.style,
            // ...controlSize,
            position: "absolute",
            pointerEvents: "none",
            opacity: 0,
            margin: 0
          }
        }
      )
    );
  };
  function getState(checked) {
    return checked ? "checked" : "unchecked";
  }
  const Switch = (0, import_core.withStaticProperties)(SwitchComponent, {
    Thumb: SwitchThumb
  });
  return Switch;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  SwitchContext,
  createSwitch
});
//# sourceMappingURL=createSwitch.js.map
