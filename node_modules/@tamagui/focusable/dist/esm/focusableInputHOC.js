import { jsx } from "react/jsx-runtime";
import { composeRefs } from "@tamagui/compose-refs";
import { useEvent } from "@tamagui/web";
import { useCallback, useEffect, useRef } from "react";
import { registerFocusable } from "./registerFocusable";
function useFocusable({
  isInput,
  props,
  ref
}) {
  const { id, onChangeText, value, defaultValue } = props;
  const inputValue = useRef(value || defaultValue || "");
  const unregisterFocusable = useRef();
  const inputRef = useCallback(
    (input) => {
      var _a;
      if (!id)
        return;
      if (!input)
        return;
      (_a = unregisterFocusable.current) == null ? void 0 : _a.call(unregisterFocusable);
      unregisterFocusable.current = registerFocusable(id, {
        focus: input.focus,
        ...isInput && {
          // react-native doesn't support programmatic .select()
          focusAndSelect() {
            input.focus();
            if (input.setSelection && typeof inputValue.current === "string") {
              input.setSelection(0, inputValue.current.length);
            }
          }
        }
      });
    },
    [isInput, id]
  );
  const combinedRefs = composeRefs(ref, inputRef);
  useEffect(() => {
    return () => {
      var _a;
      (_a = unregisterFocusable.current) == null ? void 0 : _a.call(unregisterFocusable);
    };
  }, []);
  return {
    ref: combinedRefs,
    onChangeText: useEvent((value2) => {
      inputValue.current = value2;
      onChangeText == null ? void 0 : onChangeText(value2);
    })
  };
}
function focusableInputHOC(Component) {
  return Component.styleable((props, ref) => {
    var _a;
    const isInput = (_a = Component.staticConfig) == null ? void 0 : _a.isInput;
    const { ref: combinedRef, onChangeText } = useFocusable({
      ref,
      props,
      isInput
    });
    const finalProps = isInput ? {
      ...props,
      onChangeText
    } : props;
    return /* @__PURE__ */ jsx(Component, { ref: combinedRef, ...finalProps });
  });
}
export {
  focusableInputHOC,
  useFocusable
};
//# sourceMappingURL=focusableInputHOC.js.map
