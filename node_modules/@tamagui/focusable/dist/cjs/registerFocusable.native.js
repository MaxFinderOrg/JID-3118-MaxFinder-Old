"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var registerFocusable_native_exports = {};
__export(registerFocusable_native_exports, {
  focusFocusable: () => focusFocusable,
  registerFocusable: () => registerFocusable,
  unregisterFocusable: () => unregisterFocusable
});
module.exports = __toCommonJS(registerFocusable_native_exports);
const InputsMap = /* @__PURE__ */ new Map();
const registerFocusable = (id, input) => {
  if (process.env.NODE_ENV === "development") {
    if (InputsMap.has(id)) {
      console.warn(`Warning, duplicate ID for input: ${id}`);
    }
  }
  InputsMap.set(id, input);
  return () => {
    InputsMap.delete(id);
  };
};
const unregisterFocusable = (id) => {
  InputsMap.delete(id);
};
const focusFocusable = (id, select = false) => {
  const input = InputsMap.get(id);
  if (!input) {
    if (process.env.NODE_ENV === "development") {
      console.warn("No input found for id", id);
    }
    return;
  }
  if (select || !input.focusAndSelect) {
    input.focus();
  } else {
    input.focusAndSelect();
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  focusFocusable,
  registerFocusable,
  unregisterFocusable
});
//# sourceMappingURL=registerFocusable.native.js.map
