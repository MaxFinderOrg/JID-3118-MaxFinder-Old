import { Collapsible, createCollapsibleScope } from "@tamagui/collapsible";
import { createCollection } from "@tamagui/collection";
import { createContextScope } from "@tamagui/create-context";
import { YStack } from "@tamagui/stacks";
import { H1 } from "@tamagui/text";
import { useControllableState } from "@tamagui/use-controllable-state";
import { useDirection } from "@tamagui/use-direction";
import {
  composeEventHandlers,
  isWeb,
  styled,
  useComposedRefs,
  withStaticProperties
} from "@tamagui/web";
import * as React from "react";
const ACCORDION_NAME = "Accordion";
const ACCORDION_KEYS = ["Home", "End", "ArrowDown", "ArrowUp", "ArrowLeft", "ArrowRight"];
const [Collection, useCollection, createCollectionScope] = createCollection(ACCORDION_NAME);
const [createAccordionContext, createAccordionScope] = createContextScope(
  ACCORDION_NAME,
  [createCollectionScope, createCollapsibleScope]
);
const useCollapsibleScope = createCollapsibleScope();
const AccordionComponent = React.forwardRef((props, forwardedRef) => {
  const { type, ...accordionProps } = props;
  const singleProps = accordionProps;
  const multipleProps = accordionProps;
  return <Collection.Provider scope={props.__scopeAccordion}>{type === "multiple" ? <AccordionImplMultiple {...multipleProps} ref={forwardedRef} /> : <AccordionImplSingle {...singleProps} ref={forwardedRef} />}</Collection.Provider>;
});
AccordionComponent.displayName = ACCORDION_NAME;
AccordionComponent.propTypes = {
  type(props) {
    const value = props.value || props.defaultValue;
    if (props.type && !["single", "multiple"].includes(props.type)) {
      return new Error(
        "Invalid prop `type` supplied to `Accordion`. Expected one of `single | multiple`."
      );
    }
    if (props.type === "multiple" && typeof value === "string") {
      return new Error(
        "Invalid prop `type` supplied to `Accordion`. Expected `single` when `defaultValue` or `value` is type `string`."
      );
    }
    if (props.type === "single" && Array.isArray(value)) {
      return new Error(
        "Invalid prop `type` supplied to `Accordion`. Expected `multiple` when `defaultValue` or `value` is type `string[]`."
      );
    }
    return null;
  }
};
const [AccordionValueProvider, useAccordionValueContext] = createAccordionContext(ACCORDION_NAME);
const [AccordionCollapsibleProvider, useAccordionCollapsibleContext] = createAccordionContext(ACCORDION_NAME, { collapsible: false });
const AccordionImplSingle = React.forwardRef((props, forwardedRef) => {
  const {
    value: valueProp,
    defaultValue,
    control,
    onValueChange = () => {
    },
    collapsible = false,
    ...accordionSingleProps
  } = props;
  const [value, setValue] = useControllableState({
    prop: valueProp,
    defaultProp: defaultValue || "",
    onChange: onValueChange
  });
  return <AccordionValueProvider
    scope={props.__scopeAccordion}
    value={value ? [value] : []}
    onItemOpen={setValue}
    onItemClose={React.useCallback(
      () => collapsible && setValue(""),
      [setValue, collapsible]
    )}
  ><AccordionCollapsibleProvider
    scope={props.__scopeAccordion}
    collapsible={collapsible}
  ><AccordionImpl {...accordionSingleProps} ref={forwardedRef} /></AccordionCollapsibleProvider></AccordionValueProvider>;
});
const AccordionImplMultiple = React.forwardRef((props, forwardedRef) => {
  const {
    value: valueProp,
    defaultValue,
    onValueChange = () => {
    },
    ...accordionMultipleProps
  } = props;
  const [value, setValue] = useControllableState({
    prop: valueProp,
    defaultProp: defaultValue || [],
    onChange: onValueChange
  });
  const handleItemOpen = React.useCallback(
    (itemValue) => setValue((prevValue = []) => [...prevValue, itemValue]),
    [setValue]
  );
  const handleItemClose = React.useCallback(
    (itemValue) => setValue((prevValue = []) => prevValue.filter((value2) => value2 !== itemValue)),
    [setValue]
  );
  return <AccordionValueProvider
    scope={props.__scopeAccordion}
    value={value || []}
    onItemOpen={handleItemOpen}
    onItemClose={handleItemClose}
  ><AccordionCollapsibleProvider scope={props.__scopeAccordion} collapsible={true}><AccordionImpl {...accordionMultipleProps} ref={forwardedRef} /></AccordionCollapsibleProvider></AccordionValueProvider>;
});
const [AccordionImplProvider, useAccordionContext] = createAccordionContext(ACCORDION_NAME);
const AccordionImpl = React.forwardRef(
  (props, forwardedRef) => {
    const {
      __scopeAccordion,
      disabled,
      dir,
      orientation = "vertical",
      ...accordionProps
    } = props;
    const accordionRef = React.useRef(null);
    const composedRef = useComposedRefs(accordionRef, forwardedRef);
    const getItems = useCollection(__scopeAccordion);
    const direction = useDirection(dir);
    const isDirectionLTR = direction === "ltr";
    const handleKeyDown = composeEventHandlers(
      props.onKeyDown,
      (event) => {
        if (!ACCORDION_KEYS.includes(event.key))
          return;
        const target = event.target;
        const triggerCollection = getItems().filter((item) => {
          const el = item.ref.current;
          return !el?.disabled;
        });
        const triggerIndex = triggerCollection.findIndex(
          (item) => item.ref.current === target
        );
        const triggerCount = triggerCollection.length;
        if (triggerIndex === -1)
          return;
        event.preventDefault();
        let nextIndex = triggerIndex;
        const homeIndex = 0;
        const endIndex = triggerCount - 1;
        const moveNext = () => {
          nextIndex = triggerIndex + 1;
          if (nextIndex > endIndex) {
            nextIndex = homeIndex;
          }
        };
        const movePrev = () => {
          nextIndex = triggerIndex - 1;
          if (nextIndex < homeIndex) {
            nextIndex = endIndex;
          }
        };
        switch (event.key) {
          case "Home":
            nextIndex = homeIndex;
            break;
          case "End":
            nextIndex = endIndex;
            break;
          case "ArrowRight":
            if (orientation === "horizontal") {
              if (isDirectionLTR) {
                moveNext();
              } else {
                movePrev();
              }
            }
            break;
          case "ArrowDown":
            if (orientation === "vertical") {
              moveNext();
            }
            break;
          case "ArrowLeft":
            if (orientation === "horizontal") {
              if (isDirectionLTR) {
                movePrev();
              } else {
                moveNext();
              }
            }
            break;
          case "ArrowUp":
            if (orientation === "vertical") {
              movePrev();
            }
            break;
        }
        const clampedIndex = nextIndex % triggerCount;
        triggerCollection[clampedIndex].ref.current?.focus();
      }
    );
    return <AccordionImplProvider
      scope={__scopeAccordion}
      disabled={disabled}
      direction={dir}
      orientation={orientation}
    ><Collection.Slot scope={__scopeAccordion}><YStack
      data-orientation={orientation}
      ref={composedRef}
      {...accordionProps}
      {...isWeb && {
        onKeyDown: handleKeyDown
      }}
    /></Collection.Slot></AccordionImplProvider>;
  }
);
const ITEM_NAME = "AccordionItem";
const [AccordionItemProvider, useAccordionItemContext] = createAccordionContext(ITEM_NAME);
const AccordionItem = React.forwardRef(
  (props, forwardedRef) => {
    const { __scopeAccordion, value, ...accordionItemProps } = props;
    const accordionContext = useAccordionContext(ITEM_NAME, __scopeAccordion);
    const valueContext = useAccordionValueContext(ITEM_NAME, __scopeAccordion);
    const collapsibleScope = useCollapsibleScope(__scopeAccordion);
    const triggerId = React.useId();
    const open = value && valueContext.value.includes(value) || false;
    const disabled = accordionContext.disabled || props.disabled;
    return <AccordionItemProvider
      scope={__scopeAccordion}
      open={open}
      disabled={disabled}
      triggerId={triggerId}
    ><Collapsible
      data-orientation={accordionContext.orientation}
      data-state={open ? "open" : "closed"}
      {...collapsibleScope}
      {...accordionItemProps}
      ref={forwardedRef}
      disabled={disabled}
      open={open}
      onOpenChange={(open2) => {
        if (open2) {
          valueContext.onItemOpen(value);
        } else {
          valueContext.onItemClose(value);
        }
      }}
    /></AccordionItemProvider>;
  }
);
AccordionItem.displayName = ITEM_NAME;
const HEADER_NAME = "AccordionHeader";
const AccordionHeader = React.forwardRef(
  (props, forwardedRef) => {
    const { __scopeAccordion, ...headerProps } = props;
    const accordionContext = useAccordionContext(ACCORDION_NAME, __scopeAccordion);
    const itemContext = useAccordionItemContext(HEADER_NAME, __scopeAccordion);
    return <H1
      data-orientation={accordionContext.orientation}
      data-state={getState(itemContext.open)}
      data-disabled={itemContext.disabled ? "" : void 0}
      {...headerProps}
      ref={forwardedRef}
    />;
  }
);
AccordionHeader.displayName = HEADER_NAME;
const AccordionTriggerFrame = styled(Collapsible.Trigger, {
  variants: {
    unstyled: {
      false: {
        cursor: "pointer",
        backgroundColor: "$background",
        borderColor: "$borderColor",
        borderWidth: 1,
        padding: "$true",
        hoverStyle: {
          backgroundColor: "$backgroundHover"
        },
        focusStyle: {
          backgroundColor: "$backgroundFocus"
        },
        pressStyle: {
          backgroundColor: "$backgroundPress"
        }
      }
    }
  },
  defaultVariants: {
    unstyled: false
  }
});
const TRIGGER_NAME = "AccordionTrigger";
const AccordionTrigger = AccordionTriggerFrame.styleable(function AccordionTrigger2(props, forwardedRef) {
  const { __scopeAccordion, ...triggerProps } = props;
  const accordionContext = useAccordionContext(ACCORDION_NAME, __scopeAccordion);
  const itemContext = useAccordionItemContext(TRIGGER_NAME, __scopeAccordion);
  const collapsibleContext = useAccordionCollapsibleContext(
    TRIGGER_NAME,
    __scopeAccordion
  );
  const collapsibleScope = useCollapsibleScope(__scopeAccordion);
  return <Collection.ItemSlot scope={__scopeAccordion}><AccordionTriggerFrame
    aria-disabled={itemContext.open && !collapsibleContext.collapsible || void 0}
    data-orientation={accordionContext.orientation}
    id={itemContext.triggerId}
    {...collapsibleScope}
    {...triggerProps}
    ref={forwardedRef}
  /></Collection.ItemSlot>;
});
const AccordionContentFrame = styled(Collapsible.Content, {
  variants: {
    unstyled: {
      false: {
        padding: "$true",
        backgroundColor: "$background"
      }
    }
  },
  defaultVariants: {
    unstyled: false
  }
});
const AccordionContent = AccordionContentFrame.styleable(function AccordionContent2(props, forwardedRef) {
  const { __scopeAccordion, ...contentProps } = props;
  const accordionContext = useAccordionContext(ACCORDION_NAME, __scopeAccordion);
  const itemContext = useAccordionItemContext("AccordionContent", __scopeAccordion);
  const collapsibleScope = useCollapsibleScope(__scopeAccordion);
  return <AccordionContentFrame
    role="region"
    aria-labelledby={itemContext.triggerId}
    data-orientation={accordionContext.orientation}
    {...collapsibleScope}
    {...contentProps}
    ref={forwardedRef}
  />;
});
function getState(open) {
  return open ? "open" : "closed";
}
const Accordion = withStaticProperties(AccordionComponent, {
  Trigger: AccordionTrigger,
  Header: AccordionHeader,
  Content: AccordionContent,
  Item: AccordionItem
});
export {
  Accordion,
  createAccordionScope
};
//# sourceMappingURL=Accordion.js.map
