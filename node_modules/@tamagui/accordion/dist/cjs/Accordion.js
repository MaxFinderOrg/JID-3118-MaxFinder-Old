"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var Accordion_exports = {};
__export(Accordion_exports, {
  Accordion: () => Accordion,
  createAccordionScope: () => createAccordionScope
});
module.exports = __toCommonJS(Accordion_exports);
var import_jsx_runtime = require("react/jsx-runtime");
var import_collapsible = require("@tamagui/collapsible");
var import_collection = require("@tamagui/collection");
var import_create_context = require("@tamagui/create-context");
var import_stacks = require("@tamagui/stacks");
var import_text = require("@tamagui/text");
var import_use_controllable_state = require("@tamagui/use-controllable-state");
var import_use_direction = require("@tamagui/use-direction");
var import_web = require("@tamagui/web");
var React = __toESM(require("react"));
const ACCORDION_NAME = "Accordion";
const ACCORDION_KEYS = ["Home", "End", "ArrowDown", "ArrowUp", "ArrowLeft", "ArrowRight"];
const [Collection, useCollection, createCollectionScope] = (0, import_collection.createCollection)(ACCORDION_NAME);
const [createAccordionContext, createAccordionScope] = (0, import_create_context.createContextScope)(
  ACCORDION_NAME,
  [createCollectionScope, import_collapsible.createCollapsibleScope]
);
const useCollapsibleScope = (0, import_collapsible.createCollapsibleScope)();
const AccordionComponent = React.forwardRef((props, forwardedRef) => {
  const { type, ...accordionProps } = props;
  const singleProps = accordionProps;
  const multipleProps = accordionProps;
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Collection.Provider, { scope: props.__scopeAccordion, children: type === "multiple" ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)(AccordionImplMultiple, { ...multipleProps, ref: forwardedRef }) : /* @__PURE__ */ (0, import_jsx_runtime.jsx)(AccordionImplSingle, { ...singleProps, ref: forwardedRef }) });
});
AccordionComponent.displayName = ACCORDION_NAME;
AccordionComponent.propTypes = {
  type(props) {
    const value = props.value || props.defaultValue;
    if (props.type && !["single", "multiple"].includes(props.type)) {
      return new Error(
        "Invalid prop `type` supplied to `Accordion`. Expected one of `single | multiple`."
      );
    }
    if (props.type === "multiple" && typeof value === "string") {
      return new Error(
        "Invalid prop `type` supplied to `Accordion`. Expected `single` when `defaultValue` or `value` is type `string`."
      );
    }
    if (props.type === "single" && Array.isArray(value)) {
      return new Error(
        "Invalid prop `type` supplied to `Accordion`. Expected `multiple` when `defaultValue` or `value` is type `string[]`."
      );
    }
    return null;
  }
};
const [AccordionValueProvider, useAccordionValueContext] = createAccordionContext(ACCORDION_NAME);
const [AccordionCollapsibleProvider, useAccordionCollapsibleContext] = createAccordionContext(ACCORDION_NAME, { collapsible: false });
const AccordionImplSingle = React.forwardRef((props, forwardedRef) => {
  const {
    value: valueProp,
    defaultValue,
    control,
    onValueChange = () => {
    },
    collapsible = false,
    ...accordionSingleProps
  } = props;
  const [value, setValue] = (0, import_use_controllable_state.useControllableState)({
    prop: valueProp,
    defaultProp: defaultValue || "",
    onChange: onValueChange
  });
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
    AccordionValueProvider,
    {
      scope: props.__scopeAccordion,
      value: value ? [value] : [],
      onItemOpen: setValue,
      onItemClose: React.useCallback(
        () => collapsible && setValue(""),
        [setValue, collapsible]
      ),
      children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
        AccordionCollapsibleProvider,
        {
          scope: props.__scopeAccordion,
          collapsible,
          children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(AccordionImpl, { ...accordionSingleProps, ref: forwardedRef })
        }
      )
    }
  );
});
const AccordionImplMultiple = React.forwardRef((props, forwardedRef) => {
  const {
    value: valueProp,
    defaultValue,
    onValueChange = () => {
    },
    ...accordionMultipleProps
  } = props;
  const [value, setValue] = (0, import_use_controllable_state.useControllableState)({
    prop: valueProp,
    defaultProp: defaultValue || [],
    onChange: onValueChange
  });
  const handleItemOpen = React.useCallback(
    (itemValue) => setValue((prevValue = []) => [...prevValue, itemValue]),
    [setValue]
  );
  const handleItemClose = React.useCallback(
    (itemValue) => setValue((prevValue = []) => prevValue.filter((value2) => value2 !== itemValue)),
    [setValue]
  );
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
    AccordionValueProvider,
    {
      scope: props.__scopeAccordion,
      value: value || [],
      onItemOpen: handleItemOpen,
      onItemClose: handleItemClose,
      children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(AccordionCollapsibleProvider, { scope: props.__scopeAccordion, collapsible: true, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(AccordionImpl, { ...accordionMultipleProps, ref: forwardedRef }) })
    }
  );
});
const [AccordionImplProvider, useAccordionContext] = createAccordionContext(ACCORDION_NAME);
const AccordionImpl = React.forwardRef(
  (props, forwardedRef) => {
    const {
      __scopeAccordion,
      disabled,
      dir,
      orientation = "vertical",
      ...accordionProps
    } = props;
    const accordionRef = React.useRef(null);
    const composedRef = (0, import_web.useComposedRefs)(accordionRef, forwardedRef);
    const getItems = useCollection(__scopeAccordion);
    const direction = (0, import_use_direction.useDirection)(dir);
    const isDirectionLTR = direction === "ltr";
    const handleKeyDown = (0, import_web.composeEventHandlers)(
      props.onKeyDown,
      (event) => {
        var _a;
        if (!ACCORDION_KEYS.includes(event.key))
          return;
        const target = event.target;
        const triggerCollection = getItems().filter((item) => {
          const el = item.ref.current;
          return !(el == null ? void 0 : el.disabled);
        });
        const triggerIndex = triggerCollection.findIndex(
          (item) => item.ref.current === target
        );
        const triggerCount = triggerCollection.length;
        if (triggerIndex === -1)
          return;
        event.preventDefault();
        let nextIndex = triggerIndex;
        const homeIndex = 0;
        const endIndex = triggerCount - 1;
        const moveNext = () => {
          nextIndex = triggerIndex + 1;
          if (nextIndex > endIndex) {
            nextIndex = homeIndex;
          }
        };
        const movePrev = () => {
          nextIndex = triggerIndex - 1;
          if (nextIndex < homeIndex) {
            nextIndex = endIndex;
          }
        };
        switch (event.key) {
          case "Home":
            nextIndex = homeIndex;
            break;
          case "End":
            nextIndex = endIndex;
            break;
          case "ArrowRight":
            if (orientation === "horizontal") {
              if (isDirectionLTR) {
                moveNext();
              } else {
                movePrev();
              }
            }
            break;
          case "ArrowDown":
            if (orientation === "vertical") {
              moveNext();
            }
            break;
          case "ArrowLeft":
            if (orientation === "horizontal") {
              if (isDirectionLTR) {
                movePrev();
              } else {
                moveNext();
              }
            }
            break;
          case "ArrowUp":
            if (orientation === "vertical") {
              movePrev();
            }
            break;
        }
        const clampedIndex = nextIndex % triggerCount;
        (_a = triggerCollection[clampedIndex].ref.current) == null ? void 0 : _a.focus();
      }
    );
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      AccordionImplProvider,
      {
        scope: __scopeAccordion,
        disabled,
        direction: dir,
        orientation,
        children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Collection.Slot, { scope: __scopeAccordion, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          import_stacks.YStack,
          {
            "data-orientation": orientation,
            ref: composedRef,
            ...accordionProps,
            ...import_web.isWeb && {
              onKeyDown: handleKeyDown
            }
          }
        ) })
      }
    );
  }
);
const ITEM_NAME = "AccordionItem";
const [AccordionItemProvider, useAccordionItemContext] = createAccordionContext(ITEM_NAME);
const AccordionItem = React.forwardRef(
  (props, forwardedRef) => {
    const { __scopeAccordion, value, ...accordionItemProps } = props;
    const accordionContext = useAccordionContext(ITEM_NAME, __scopeAccordion);
    const valueContext = useAccordionValueContext(ITEM_NAME, __scopeAccordion);
    const collapsibleScope = useCollapsibleScope(__scopeAccordion);
    const triggerId = React.useId();
    const open = value && valueContext.value.includes(value) || false;
    const disabled = accordionContext.disabled || props.disabled;
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      AccordionItemProvider,
      {
        scope: __scopeAccordion,
        open,
        disabled,
        triggerId,
        children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          import_collapsible.Collapsible,
          {
            "data-orientation": accordionContext.orientation,
            "data-state": open ? "open" : "closed",
            ...collapsibleScope,
            ...accordionItemProps,
            ref: forwardedRef,
            disabled,
            open,
            onOpenChange: (open2) => {
              if (open2) {
                valueContext.onItemOpen(value);
              } else {
                valueContext.onItemClose(value);
              }
            }
          }
        )
      }
    );
  }
);
AccordionItem.displayName = ITEM_NAME;
const HEADER_NAME = "AccordionHeader";
const AccordionHeader = React.forwardRef(
  (props, forwardedRef) => {
    const { __scopeAccordion, ...headerProps } = props;
    const accordionContext = useAccordionContext(ACCORDION_NAME, __scopeAccordion);
    const itemContext = useAccordionItemContext(HEADER_NAME, __scopeAccordion);
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      import_text.H1,
      {
        "data-orientation": accordionContext.orientation,
        "data-state": getState(itemContext.open),
        "data-disabled": itemContext.disabled ? "" : void 0,
        ...headerProps,
        ref: forwardedRef
      }
    );
  }
);
AccordionHeader.displayName = HEADER_NAME;
const AccordionTriggerFrame = (0, import_web.styled)(import_collapsible.Collapsible.Trigger, {
  variants: {
    unstyled: {
      false: {
        cursor: "pointer",
        backgroundColor: "$background",
        borderColor: "$borderColor",
        borderWidth: 1,
        padding: "$true",
        hoverStyle: {
          backgroundColor: "$backgroundHover"
        },
        focusStyle: {
          backgroundColor: "$backgroundFocus"
        },
        pressStyle: {
          backgroundColor: "$backgroundPress"
        }
      }
    }
  },
  defaultVariants: {
    unstyled: false
  }
});
const TRIGGER_NAME = "AccordionTrigger";
const AccordionTrigger = AccordionTriggerFrame.styleable(function AccordionTrigger2(props, forwardedRef) {
  const { __scopeAccordion, ...triggerProps } = props;
  const accordionContext = useAccordionContext(ACCORDION_NAME, __scopeAccordion);
  const itemContext = useAccordionItemContext(TRIGGER_NAME, __scopeAccordion);
  const collapsibleContext = useAccordionCollapsibleContext(
    TRIGGER_NAME,
    __scopeAccordion
  );
  const collapsibleScope = useCollapsibleScope(__scopeAccordion);
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Collection.ItemSlot, { scope: __scopeAccordion, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
    AccordionTriggerFrame,
    {
      "aria-disabled": itemContext.open && !collapsibleContext.collapsible || void 0,
      "data-orientation": accordionContext.orientation,
      id: itemContext.triggerId,
      ...collapsibleScope,
      ...triggerProps,
      ref: forwardedRef
    }
  ) });
});
const AccordionContentFrame = (0, import_web.styled)(import_collapsible.Collapsible.Content, {
  variants: {
    unstyled: {
      false: {
        padding: "$true",
        backgroundColor: "$background"
      }
    }
  },
  defaultVariants: {
    unstyled: false
  }
});
const AccordionContent = AccordionContentFrame.styleable(function AccordionContent2(props, forwardedRef) {
  const { __scopeAccordion, ...contentProps } = props;
  const accordionContext = useAccordionContext(ACCORDION_NAME, __scopeAccordion);
  const itemContext = useAccordionItemContext("AccordionContent", __scopeAccordion);
  const collapsibleScope = useCollapsibleScope(__scopeAccordion);
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
    AccordionContentFrame,
    {
      role: "region",
      "aria-labelledby": itemContext.triggerId,
      "data-orientation": accordionContext.orientation,
      ...collapsibleScope,
      ...contentProps,
      ref: forwardedRef
    }
  );
});
function getState(open) {
  return open ? "open" : "closed";
}
const Accordion = (0, import_web.withStaticProperties)(AccordionComponent, {
  Trigger: AccordionTrigger,
  Header: AccordionHeader,
  Content: AccordionContent,
  Item: AccordionItem
});
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Accordion,
  createAccordionScope
});
//# sourceMappingURL=Accordion.js.map
