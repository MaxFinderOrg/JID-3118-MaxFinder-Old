"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var concatClassName_exports = {};
__export(concatClassName_exports, {
  concatClassName: () => concatClassName
});
module.exports = __toCommonJS(concatClassName_exports);
function concatClassName(_cn) {
  const args = arguments;
  const usedPrefixes = [];
  let final = "";
  const len = args.length;
  let propObjects = null;
  for (let x = len; x >= 0; x--) {
    const cns = args[x];
    if (!cns)
      continue;
    if (!Array.isArray(cns) && typeof cns !== "string") {
      propObjects = propObjects || [];
      propObjects.push(cns);
      continue;
    }
    const names = Array.isArray(cns) ? cns : cns.split(" ");
    const numNames = names.length;
    for (let i = numNames - 1; i >= 0; i--) {
      const name = names[i];
      if (!name || name === " ")
        continue;
      if (name[0] !== "_") {
        final = name + " " + final;
        continue;
      }
      const splitIndex = name.indexOf("-");
      if (splitIndex < 1) {
        final = name + " " + final;
        continue;
      }
      const nextChar = name[splitIndex + 1];
      const isMediaQuery = nextChar === "_";
      const styleKey = name.slice(1, name.lastIndexOf("-"));
      const mediaKey = isMediaQuery ? name.slice(splitIndex + 2, splitIndex + 7) : null;
      const uid = mediaKey ? styleKey + mediaKey : styleKey;
      if (usedPrefixes.indexOf(uid) > -1) {
        continue;
      }
      usedPrefixes.push(uid);
      const propName = styleKey;
      if (propName && propObjects) {
        if (propObjects.some((po) => {
          if (mediaKey) {
            const propKey = pseudoInvert[mediaKey];
            return po && po[propKey] && propName in po[propKey] && po[propKey] !== null;
          }
          const res = po && propName in po && po[propName] !== null;
          return res;
        })) {
          continue;
        }
      }
      final = name + " " + final;
    }
  }
  return final;
}
const pseudoInvert = {
  hover: "hoverStyle",
  focus: "focusStyle",
  press: "pressStyle"
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  concatClassName
});
//# sourceMappingURL=concatClassName.js.map
