import { getVariableValue, styled, withStaticProperties } from "@tamagui/core";
import { createContextScope } from "@tamagui/create-context";
import { getSize } from "@tamagui/get-token";
import { ThemeableStack } from "@tamagui/stacks";
import * as React from "react";
const PROGRESS_NAME = "Progress";
const [createProgressContext, createProgressScope] = createContextScope(PROGRESS_NAME);
const [ProgressProvider, useProgressContext] = createProgressContext(PROGRESS_NAME);
const INDICATOR_NAME = "ProgressIndicator";
const ProgressIndicatorFrame = styled(ThemeableStack, {
  name: INDICATOR_NAME,
  variants: {
    unstyled: {
      false: {
        height: "100%",
        width: "100%",
        backgrounded: true
      }
    }
  },
  defaultVariants: {
    unstyled: false
  }
});
const ProgressIndicator = ProgressIndicatorFrame.styleable(function ProgressIndicator2(props, forwardedRef) {
  const { __scopeProgress, ...indicatorProps } = props;
  const context = useProgressContext(INDICATOR_NAME, __scopeProgress);
  const pct = context.max - (context.value ?? 0);
  const x = -(context.width === 0 ? 300 : context.width) * (pct / 100);
  return <ProgressIndicatorFrame
    data-state={getProgressState(context.value, context.max)}
    data-value={context.value ?? void 0}
    data-max={context.max}
    x={x}
    width={context.width}
    {...!props.unstyled && {
      animateOnly: ["transform"],
      opacity: context.width === 0 ? 0 : 1
    }}
    {...indicatorProps}
    ref={forwardedRef}
  />;
});
function defaultGetValueLabel(value, max) {
  return `${Math.round(value / max * 100)}%`;
}
function getProgressState(value, maxValue) {
  return value == null ? "indeterminate" : value === maxValue ? "complete" : "loading";
}
function isNumber(value) {
  return typeof value === "number";
}
function isValidMaxNumber(max) {
  return isNumber(max) && !isNaN(max) && max > 0;
}
function isValidValueNumber(value, max) {
  return isNumber(value) && !isNaN(value) && value <= max && value >= 0;
}
function getInvalidMaxError(propValue, componentName) {
  return `Invalid prop \`max\` of value \`${propValue}\` supplied to \`${componentName}\`. Only numbers greater than 0 are valid max values. Defaulting to \`${DEFAULT_MAX}\`.`;
}
function getInvalidValueError(propValue, componentName) {
  return `Invalid prop \`value\` of value \`${propValue}\` supplied to \`${componentName}\`. The \`value\` prop must be:
  - a positive number
  - less than the value passed to \`max\` (or ${DEFAULT_MAX} if no \`max\` prop is set)
  - \`null\` if the progress is indeterminate.

Defaulting to \`null\`.`;
}
const DEFAULT_MAX = 100;
const ProgressFrame = styled(ThemeableStack, {
  name: "Progress",
  variants: {
    unstyled: {
      false: {
        borderRadius: 1e5,
        overflow: "hidden",
        backgrounded: true
      }
    },
    size: {
      "...size": (val) => {
        const size = Math.round(getVariableValue(getSize(val)) * 0.25);
        return {
          height: size,
          minWidth: getVariableValue(size) * 20,
          width: "100%"
        };
      }
    }
  },
  defaultVariants: {
    unstyled: false
  }
});
const Progress = withStaticProperties(
  ProgressFrame.styleable(function Progress2(props, forwardedRef) {
    const {
      __scopeProgress,
      value: valueProp,
      max: maxProp,
      getValueLabel = defaultGetValueLabel,
      size = "$true",
      ...progressProps
    } = props;
    const max = isValidMaxNumber(maxProp) ? maxProp : DEFAULT_MAX;
    const value = isValidValueNumber(valueProp, max) ? valueProp : null;
    const valueLabel = isNumber(value) ? getValueLabel(value, max) : void 0;
    const [width, setWidth] = React.useState(0);
    return <ProgressProvider scope={__scopeProgress} value={value} max={max} width={width}><ProgressFrame
      aria-valuemax={max}
      aria-valuemin={0}
      aria-valuenow={isNumber(value) ? value : void 0}
      aria-valuetext={valueLabel}
      role="progressbar"
      data-state={getProgressState(value, max)}
      data-value={value ?? void 0}
      data-max={max}
      {...progressProps.unstyled !== true && {
        size
      }}
      {...progressProps}
      onLayout={(e) => {
        setWidth(e.nativeEvent.layout.width);
        progressProps.onLayout?.(e);
      }}
      ref={forwardedRef}
    /></ProgressProvider>;
  }),
  {
    Indicator: ProgressIndicator
  }
);
export {
  Progress,
  ProgressFrame,
  ProgressIndicator,
  ProgressIndicatorFrame,
  createProgressScope
};
//# sourceMappingURL=Progress.js.map
