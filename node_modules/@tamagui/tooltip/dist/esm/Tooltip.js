import { jsx } from "react/jsx-runtime";
import "@tamagui/polyfill-dev";
import {
  FloatingDelayGroup,
  useDelayGroup,
  useDelayGroupContext,
  useDismiss,
  useFloating,
  useFocus,
  useHover,
  useInteractions,
  useRole
} from "@floating-ui/react";
import { useEvent, withStaticProperties } from "@tamagui/core";
import { FloatingOverrideContext } from "@tamagui/floating";
import { getSize } from "@tamagui/get-token";
import {
  PopoverAnchor,
  PopoverArrow,
  PopoverContent,
  PopoverContext,
  PopoverTrigger
} from "@tamagui/popover";
import {
  Popper,
  PopperContentFrame,
  usePopperContext
} from "@tamagui/popper";
import { useControllableState } from "@tamagui/use-controllable-state";
import * as React from "react";
const TooltipContent = PopperContentFrame.extractable(
  React.forwardRef(
    ({ __scopePopover, ...props }, ref) => {
      const popper = usePopperContext();
      const padding = props.padding ?? props.size ?? popper.size ?? getSize("$true", {
        shift: -2
      });
      return /* @__PURE__ */ jsx(
        PopoverContent,
        {
          componentName: "Tooltip",
          disableRemoveScroll: true,
          disableFocusScope: true,
          ...!props.unstyled && {
            padding
          },
          ref,
          ...props
        }
      );
    }
  )
);
const TooltipArrow = React.forwardRef((props, ref) => {
  return /* @__PURE__ */ jsx(PopoverArrow, { componentName: "Tooltip", ref, ...props });
});
const TooltipGroup = ({ children, delay }) => {
  return /* @__PURE__ */ jsx(FloatingDelayGroup, { delay: React.useMemo(() => delay, [JSON.stringify(delay)]), children });
};
const TooltipComponent = React.forwardRef(function Tooltip(props, ref) {
  const {
    __scopePopover,
    children,
    delay: delayProp,
    restMs = typeof delayProp === "undefined" ? 500 : typeof delayProp === "number" ? delayProp : 0,
    onOpenChange: onOpenChangeProp,
    focus,
    open: openProp,
    ...restProps
  } = props;
  const triggerRef = React.useRef(null);
  const [hasCustomAnchor, setHasCustomAnchor] = React.useState(false);
  const { delay: delayGroup, setCurrentId } = useDelayGroupContext();
  const delay = delayProp ?? delayGroup;
  const [open, setOpen] = useControllableState({
    prop: openProp,
    defaultProp: false,
    onChange: onOpenChangeProp
  });
  const id = props.groupId;
  const onOpenChange = useEvent((open2) => {
    if (open2) {
      setCurrentId(id);
    }
    setOpen(open2);
  });
  const useFloatingFn = (props2) => {
    const floating = useFloating({
      ...props2,
      open,
      onOpenChange
    });
    const { getReferenceProps, getFloatingProps } = useInteractions([
      useHover(floating.context, { delay, restMs }),
      useFocus(floating.context, focus),
      useRole(floating.context, { role: "tooltip" }),
      useDismiss(floating.context),
      useDelayGroup(floating.context, { id })
    ]);
    return {
      ...floating,
      open,
      getReferenceProps,
      getFloatingProps
    };
  };
  const useFloatingContext = React.useCallback(useFloatingFn, [id, delay, open]);
  const onCustomAnchorAdd = React.useCallback(() => setHasCustomAnchor(true), []);
  const onCustomAnchorRemove = React.useCallback(() => setHasCustomAnchor(false), []);
  const contentId = React.useId();
  const smallerSize = props.unstyled ? null : getSize("$true", {
    shift: -2,
    bounds: [0]
  });
  return /* @__PURE__ */ jsx(FloatingOverrideContext.Provider, { value: useFloatingContext, children: /* @__PURE__ */ jsx(Popper, { size: smallerSize == null ? void 0 : smallerSize.key, allowFlip: true, stayInFrame: true, ...restProps, children: /* @__PURE__ */ jsx(
    PopoverContext.Provider,
    {
      contentId,
      triggerRef,
      sheetBreakpoint: false,
      open,
      onOpenChange: setOpen,
      onOpenToggle: voidFn,
      hasCustomAnchor,
      onCustomAnchorAdd,
      onCustomAnchorRemove,
      children
    }
  ) }) });
});
const Tooltip2 = withStaticProperties(TooltipComponent, {
  Anchor: PopoverAnchor,
  Arrow: TooltipArrow,
  Content: TooltipContent,
  Trigger: PopoverTrigger
});
const voidFn = () => {
};
export {
  Tooltip2 as Tooltip,
  TooltipGroup
};
//# sourceMappingURL=Tooltip.js.map
