"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var Tooltip_exports = {};
__export(Tooltip_exports, {
  Tooltip: () => Tooltip2,
  TooltipGroup: () => TooltipGroup
});
module.exports = __toCommonJS(Tooltip_exports);
var import_jsx_runtime = require("react/jsx-runtime");
var import_polyfill_dev = require("@tamagui/polyfill-dev");
var import_react = require("@floating-ui/react");
var import_core = require("@tamagui/core");
var import_floating = require("@tamagui/floating");
var import_get_token = require("@tamagui/get-token");
var import_popover = require("@tamagui/popover");
var import_popper = require("@tamagui/popper");
var import_use_controllable_state = require("@tamagui/use-controllable-state");
var React = __toESM(require("react"));
const TooltipContent = import_popper.PopperContentFrame.extractable(
  React.forwardRef(
    ({ __scopePopover, ...props }, ref) => {
      const popper = (0, import_popper.usePopperContext)();
      const padding = props.padding ?? props.size ?? popper.size ?? (0, import_get_token.getSize)("$true", {
        shift: -2
      });
      return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
        import_popover.PopoverContent,
        {
          componentName: "Tooltip",
          disableRemoveScroll: true,
          disableFocusScope: true,
          ...!props.unstyled && {
            padding
          },
          ref,
          ...props
        }
      );
    }
  )
);
const TooltipArrow = React.forwardRef((props, ref) => {
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_popover.PopoverArrow, { componentName: "Tooltip", ref, ...props });
});
const TooltipGroup = ({ children, delay }) => {
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_react.FloatingDelayGroup, { delay: React.useMemo(() => delay, [JSON.stringify(delay)]), children });
};
const TooltipComponent = React.forwardRef(function Tooltip(props, ref) {
  const {
    __scopePopover,
    children,
    delay: delayProp,
    restMs = typeof delayProp === "undefined" ? 500 : typeof delayProp === "number" ? delayProp : 0,
    onOpenChange: onOpenChangeProp,
    focus,
    open: openProp,
    ...restProps
  } = props;
  const triggerRef = React.useRef(null);
  const [hasCustomAnchor, setHasCustomAnchor] = React.useState(false);
  const { delay: delayGroup, setCurrentId } = (0, import_react.useDelayGroupContext)();
  const delay = delayProp ?? delayGroup;
  const [open, setOpen] = (0, import_use_controllable_state.useControllableState)({
    prop: openProp,
    defaultProp: false,
    onChange: onOpenChangeProp
  });
  const id = props.groupId;
  const onOpenChange = (0, import_core.useEvent)((open2) => {
    if (open2) {
      setCurrentId(id);
    }
    setOpen(open2);
  });
  const useFloatingFn = (props2) => {
    const floating = (0, import_react.useFloating)({
      ...props2,
      open,
      onOpenChange
    });
    const { getReferenceProps, getFloatingProps } = (0, import_react.useInteractions)([
      (0, import_react.useHover)(floating.context, { delay, restMs }),
      (0, import_react.useFocus)(floating.context, focus),
      (0, import_react.useRole)(floating.context, { role: "tooltip" }),
      (0, import_react.useDismiss)(floating.context),
      (0, import_react.useDelayGroup)(floating.context, { id })
    ]);
    return {
      ...floating,
      open,
      getReferenceProps,
      getFloatingProps
    };
  };
  const useFloatingContext = React.useCallback(useFloatingFn, [id, delay, open]);
  const onCustomAnchorAdd = React.useCallback(() => setHasCustomAnchor(true), []);
  const onCustomAnchorRemove = React.useCallback(() => setHasCustomAnchor(false), []);
  const contentId = React.useId();
  const smallerSize = props.unstyled ? null : (0, import_get_token.getSize)("$true", {
    shift: -2,
    bounds: [0]
  });
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_floating.FloatingOverrideContext.Provider, { value: useFloatingContext, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_popper.Popper, { size: smallerSize == null ? void 0 : smallerSize.key, allowFlip: true, stayInFrame: true, ...restProps, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
    import_popover.PopoverContext.Provider,
    {
      contentId,
      triggerRef,
      sheetBreakpoint: false,
      open,
      onOpenChange: setOpen,
      onOpenToggle: voidFn,
      hasCustomAnchor,
      onCustomAnchorAdd,
      onCustomAnchorRemove,
      children
    }
  ) }) });
});
const Tooltip2 = (0, import_core.withStaticProperties)(TooltipComponent, {
  Anchor: import_popover.PopoverAnchor,
  Arrow: TooltipArrow,
  Content: TooltipContent,
  Trigger: import_popover.PopoverTrigger
});
const voidFn = () => {
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Tooltip,
  TooltipGroup
});
//# sourceMappingURL=Tooltip.js.map
