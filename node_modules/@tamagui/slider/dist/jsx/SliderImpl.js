import { composeEventHandlers, getVariableValue, isWeb, styled } from "@tamagui/core";
import { getSize } from "@tamagui/get-token";
import { YStack } from "@tamagui/stacks";
import * as React from "react";
import { ARROW_KEYS, PAGE_KEYS, SLIDER_NAME, useSliderContext } from "./constants";
const DirectionalYStack = styled(YStack, {
  variants: {
    orientation: {
      horizontal: {},
      vertical: {}
    }
  }
});
const SliderFrame = styled(DirectionalYStack, {
  position: "relative",
  variants: {
    size: (val, extras) => {
      if (!val) {
        return;
      }
      const orientation = extras.props.orientation;
      const size = Math.round(getVariableValue(getSize(val)) / 6);
      if (orientation === "horizontal") {
        return {
          height: size,
          borderRadius: size,
          justifyContent: "center"
        };
      }
      return {
        width: size,
        borderRadius: size,
        alignItems: "center"
      };
    }
  }
});
const SliderImpl = React.forwardRef(
  (props, forwardedRef) => {
    const {
      __scopeSlider,
      onSlideStart,
      onSlideMove,
      onSlideEnd,
      onHomeKeyDown,
      onEndKeyDown,
      onStepKeyDown,
      ...sliderProps
    } = props;
    const context = useSliderContext(SLIDER_NAME, __scopeSlider);
    return <SliderFrame
      size="$4"
      {...sliderProps}
      data-orientation={sliderProps.orientation}
      ref={forwardedRef}
      {...isWeb && {
        onKeyDown: (event) => {
          if (event.key === "Home") {
            onHomeKeyDown(event);
            event.preventDefault();
          } else if (event.key === "End") {
            onEndKeyDown(event);
            event.preventDefault();
          } else if (PAGE_KEYS.concat(ARROW_KEYS).includes(event.key)) {
            onStepKeyDown(event);
            event.preventDefault();
          }
        }
      }}
      onMoveShouldSetResponderCapture={() => true}
      onScrollShouldSetResponder={() => true}
      onScrollShouldSetResponderCapture={() => true}
      onMoveShouldSetResponder={() => true}
      onStartShouldSetResponder={() => true}
      onResponderTerminationRequest={() => {
        return false;
      }}
      onResponderGrant={composeEventHandlers(props.onResponderGrant, (event) => {
        const target = event.target;
        const isStartingOnThumb = context.thumbs.has(target);
        if (isWeb && target instanceof HTMLElement) {
          if (context.thumbs.has(target)) {
            target.focus();
          }
        }
        onSlideStart(event, isStartingOnThumb ? "thumb" : "track");
      })}
      onResponderMove={composeEventHandlers(props.onResponderMove, (event) => {
        event.stopPropagation();
        onSlideMove(event);
      })}
      onResponderRelease={composeEventHandlers(props.onResponderRelease, (event) => {
        onSlideEnd(event);
      })}
    />;
  }
);
export {
  DirectionalYStack,
  SliderFrame,
  SliderImpl
};
//# sourceMappingURL=SliderImpl.js.map
