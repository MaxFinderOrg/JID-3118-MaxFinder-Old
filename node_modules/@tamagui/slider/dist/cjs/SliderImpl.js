"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var SliderImpl_exports = {};
__export(SliderImpl_exports, {
  DirectionalYStack: () => DirectionalYStack,
  SliderFrame: () => SliderFrame,
  SliderImpl: () => SliderImpl
});
module.exports = __toCommonJS(SliderImpl_exports);
var import_jsx_runtime = require("react/jsx-runtime");
var import_core = require("@tamagui/core");
var import_get_token = require("@tamagui/get-token");
var import_stacks = require("@tamagui/stacks");
var React = __toESM(require("react"));
var import_constants = require("./constants");
const DirectionalYStack = (0, import_core.styled)(import_stacks.YStack, {
  variants: {
    orientation: {
      horizontal: {},
      vertical: {}
    }
  }
});
const SliderFrame = (0, import_core.styled)(DirectionalYStack, {
  position: "relative",
  variants: {
    size: (val, extras) => {
      if (!val) {
        return;
      }
      const orientation = extras.props.orientation;
      const size = Math.round((0, import_core.getVariableValue)((0, import_get_token.getSize)(val)) / 6);
      if (orientation === "horizontal") {
        return {
          height: size,
          borderRadius: size,
          justifyContent: "center"
        };
      }
      return {
        width: size,
        borderRadius: size,
        alignItems: "center"
      };
    }
  }
});
const SliderImpl = React.forwardRef(
  (props, forwardedRef) => {
    const {
      __scopeSlider,
      onSlideStart,
      onSlideMove,
      onSlideEnd,
      onHomeKeyDown,
      onEndKeyDown,
      onStepKeyDown,
      ...sliderProps
    } = props;
    const context = (0, import_constants.useSliderContext)(import_constants.SLIDER_NAME, __scopeSlider);
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      SliderFrame,
      {
        size: "$4",
        ...sliderProps,
        "data-orientation": sliderProps.orientation,
        ref: forwardedRef,
        ...import_core.isWeb && {
          onKeyDown: (event) => {
            if (event.key === "Home") {
              onHomeKeyDown(event);
              event.preventDefault();
            } else if (event.key === "End") {
              onEndKeyDown(event);
              event.preventDefault();
            } else if (import_constants.PAGE_KEYS.concat(import_constants.ARROW_KEYS).includes(event.key)) {
              onStepKeyDown(event);
              event.preventDefault();
            }
          }
        },
        onMoveShouldSetResponderCapture: () => true,
        onScrollShouldSetResponder: () => true,
        onScrollShouldSetResponderCapture: () => true,
        onMoveShouldSetResponder: () => true,
        onStartShouldSetResponder: () => true,
        onResponderTerminationRequest: () => {
          return false;
        },
        onResponderGrant: (0, import_core.composeEventHandlers)(props.onResponderGrant, (event) => {
          const target = event.target;
          const isStartingOnThumb = context.thumbs.has(target);
          if (import_core.isWeb && target instanceof HTMLElement) {
            if (context.thumbs.has(target)) {
              target.focus();
            }
          }
          onSlideStart(event, isStartingOnThumb ? "thumb" : "track");
        }),
        onResponderMove: (0, import_core.composeEventHandlers)(props.onResponderMove, (event) => {
          event.stopPropagation();
          onSlideMove(event);
        }),
        onResponderRelease: (0, import_core.composeEventHandlers)(props.onResponderRelease, (event) => {
          onSlideEnd(event);
        })
      }
    );
  }
);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  DirectionalYStack,
  SliderFrame,
  SliderImpl
});
//# sourceMappingURL=SliderImpl.js.map
