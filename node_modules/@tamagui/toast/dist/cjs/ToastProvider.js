"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var ToastProvider_exports = {};
__export(ToastProvider_exports, {
  Collection: () => Collection,
  ToastProvider: () => ToastProvider,
  createToastContext: () => createToastContext,
  createToastScope: () => createToastScope,
  useCollection: () => useCollection,
  useToastProviderContext: () => useToastProviderContext
});
module.exports = __toCommonJS(ToastProvider_exports);
var import_jsx_runtime = require("react/jsx-runtime");
var import_collection = require("@tamagui/collection");
var import_create_context = require("@tamagui/create-context");
var React = __toESM(require("react"));
var import_ToastImperative = require("./ToastImperative");
const PROVIDER_NAME = "ToastProvider";
const [Collection, useCollection, createCollectionScope] = (0, import_collection.createCollection)("Toast");
const [createToastContext, createToastScope] = (0, import_create_context.createContextScope)("Toast", [
  createCollectionScope
]);
const [ToastProviderProvider, useToastProviderContext] = createToastContext(PROVIDER_NAME);
const ToastProvider = (props) => {
  const {
    __scopeToast,
    id: providedId,
    burntOptions,
    native,
    notificationOptions,
    label = "Notification",
    duration = 5e3,
    swipeDirection = "right",
    swipeThreshold = 50,
    children
  } = props;
  const id = providedId ?? React.useId();
  const [viewports, setViewports] = React.useState({});
  const [toastCount, setToastCount] = React.useState(0);
  const isFocusedToastEscapeKeyDownRef = React.useRef(false);
  const isClosePausedRef = React.useRef(false);
  const handleViewportChange = React.useCallback(
    (name, viewport) => {
      setViewports((prev) => ({ ...prev, [name]: viewport }));
    },
    []
  );
  const options = React.useMemo(() => {
    return {
      duration,
      burntOptions,
      native,
      notificationOptions
    };
  }, [JSON.stringify([duration, burntOptions, native, notificationOptions])]);
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Collection.Provider, { scope: __scopeToast, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
    ToastProviderProvider,
    {
      scope: __scopeToast,
      id,
      label,
      duration,
      swipeDirection,
      swipeThreshold,
      toastCount,
      viewports,
      onViewportChange: handleViewportChange,
      onToastAdd: React.useCallback(() => {
        setToastCount((prevCount) => prevCount + 1);
      }, []),
      onToastRemove: React.useCallback(() => {
        setToastCount((prevCount) => prevCount - 1);
      }, []),
      isFocusedToastEscapeKeyDownRef,
      isClosePausedRef,
      children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_ToastImperative.ToastImperativeProvider, { options, children })
    }
  ) });
};
ToastProvider.propTypes = {
  label(props) {
    if (props.label && typeof props.label === "string" && !props.label.trim()) {
      const error = `Invalid prop \`label\` supplied to \`${PROVIDER_NAME}\`. Expected non-empty \`string\`.`;
      return new Error(error);
    }
    return null;
  }
};
ToastProvider.displayName = PROVIDER_NAME;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Collection,
  ToastProvider,
  createToastContext,
  createToastScope,
  useCollection,
  useToastProviderContext
});
//# sourceMappingURL=ToastProvider.js.map
