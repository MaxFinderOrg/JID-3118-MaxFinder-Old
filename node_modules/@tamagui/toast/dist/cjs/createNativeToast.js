"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var createNativeToast_exports = {};
__export(createNativeToast_exports, {
  createNativeToast: () => createNativeToast,
  hideNativeToast: () => hideNativeToast
});
module.exports = __toCommonJS(createNativeToast_exports);
const createNativeToast = (title, { message, notificationOptions }) => {
  if (!("Notification" in window)) {
    console.error("This browser does not support notifications");
    return false;
  }
  if (Notification.permission === "denied")
    false;
  const showNotification = () => {
    const notification = new Notification(title, {
      body: message,
      ...notificationOptions
    });
    return notification;
  };
  if (Notification.permission === "granted") {
    const notification = showNotification();
    return {
      nativeToastRef: notification
    };
  } else {
    Notification.requestPermission().then((permission) => {
      if (permission === "granted") {
        const notification = showNotification();
        return {
          nativeToastRef: notification
        };
      }
    });
  }
  return true;
};
const hideNativeToast = (ref) => {
  if (!("Notification" in window)) {
    console.error("This browser does not support notifications");
    return;
  }
  if (ref) {
    ref.close();
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  createNativeToast,
  hideNativeToast
});
//# sourceMappingURL=createNativeToast.js.map
