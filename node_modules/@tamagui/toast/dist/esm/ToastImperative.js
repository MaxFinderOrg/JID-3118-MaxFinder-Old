import { jsx } from "react/jsx-runtime";
import { isWeb } from "@tamagui/core";
import React, { createContext, useContext, useMemo, useRef } from "react";
import { Platform } from "react-native";
import { createNativeToast } from "./createNativeToast";
const ToastContext = createContext({});
const ToastCurrentContext = createContext(null);
const useToastController = () => {
  return useContext(ToastContext);
};
const useToastState = () => {
  return useContext(ToastCurrentContext);
};
const useToast = () => {
  return {
    ...useToastController(),
    currentToast: useToastState()
  };
};
const ToastImperativeProvider = ({
  children,
  options
}) => {
  const counterRef = useRef(0);
  const [toast, setToast] = React.useState(null);
  const [lastNativeToastRef, setLastNativeToastRef] = React.useState(null);
  const show = React.useCallback(
    (title, showOptions) => {
      const native = (showOptions == null ? void 0 : showOptions.native) ?? options.native;
      const isWebNative = Array.isArray(native) ? native.includes("web") : native === "web";
      const isMobileNative = Array.isArray(native) ? native.includes("mobile") : native === "mobile";
      const isAndroidNative = isMobileNative || (Array.isArray(native) ? native.includes("android") : native === "android");
      const isIosNative = isMobileNative || (Array.isArray(native) ? native.includes("ios") : native === "ios");
      const isHandledNatively = native === true || isWeb && isWebNative || !isWeb && isMobileNative || Platform.OS === "android" && isAndroidNative || Platform.OS === "ios" && isIosNative;
      if (isHandledNatively) {
        const nativeToastResult = createNativeToast(title, showOptions ?? {});
        if (typeof nativeToastResult === "object" && nativeToastResult.nativeToastRef) {
          setLastNativeToastRef(nativeToastResult.nativeToastRef);
        }
      }
      counterRef.current++;
      setToast({
        ...showOptions == null ? void 0 : showOptions.customData,
        ...showOptions,
        viewportName: (showOptions == null ? void 0 : showOptions.viewportName) ?? "default",
        title,
        id: counterRef.current.toString(),
        isHandledNatively
      });
      return true;
    },
    [setToast, options.native]
  );
  const hide = React.useCallback(() => {
    lastNativeToastRef == null ? void 0 : lastNativeToastRef.close();
    setToast(null);
  }, [setToast, lastNativeToastRef]);
  const contextValue = useMemo(() => {
    return {
      show,
      hide,
      nativeToast: lastNativeToastRef,
      options
    };
  }, [show, hide, lastNativeToastRef, JSON.stringify(options || null)]);
  return /* @__PURE__ */ jsx(ToastContext.Provider, { value: contextValue, children: /* @__PURE__ */ jsx(ToastCurrentContext.Provider, { value: toast, children }) });
};
export {
  ToastImperativeProvider,
  useToast,
  useToastController,
  useToastState
};
//# sourceMappingURL=ToastImperative.js.map
