import {
  Stack,
  Text,
  styled,
  useEvent,
  useIsomorphicLayoutEffect
} from "@tamagui/core";
import { Portal } from "@tamagui/portal";
import { VisuallyHidden } from "@tamagui/visually-hidden";
import * as React from "react";
import { TOAST_NAME } from "./constants";
import { useToastProviderContext } from "./ToastProvider";
const ToastAnnounceExcludeFrame = styled(Stack, {
  name: "ToastAnnounceExclude"
});
const ToastAnnounceExclude = React.forwardRef(
  (props, forwardedRef) => {
    const { __scopeToast, altText, ...announceExcludeProps } = props;
    return <ToastAnnounceExcludeFrame
      data-toast-announce-exclude=""
      data-toast-announce-alt={altText || void 0}
      {...announceExcludeProps}
      ref={forwardedRef}
    />;
  }
);
const ToastAnnounce = (props) => {
  const { __scopeToast, children, ...announceProps } = props;
  const context = useToastProviderContext(TOAST_NAME, __scopeToast);
  const [renderAnnounceText, setRenderAnnounceText] = React.useState(false);
  const [isAnnounced, setIsAnnounced] = React.useState(false);
  useNextFrame(() => setRenderAnnounceText(true));
  React.useEffect(() => {
    const timer = setTimeout(() => setIsAnnounced(true), 1e3);
    return () => clearTimeout(timer);
  }, []);
  return isAnnounced ? null : <Portal asChild><VisuallyHidden {...announceProps}>{renderAnnounceText && <Text>
    {context.label}
    {" "}
    {children}
  </Text>}</VisuallyHidden></Portal>;
};
function useNextFrame(callback = () => {
}) {
  const fn = useEvent(callback);
  useIsomorphicLayoutEffect(() => {
    let raf1 = 0;
    let raf2 = 0;
    raf1 = requestAnimationFrame(() => {
      raf2 = requestAnimationFrame(fn);
    });
    return () => {
      cancelAnimationFrame(raf1);
      cancelAnimationFrame(raf2);
    };
  }, [fn]);
}
export {
  ToastAnnounce,
  ToastAnnounceExclude
};
//# sourceMappingURL=ToastAnnounce.js.map
