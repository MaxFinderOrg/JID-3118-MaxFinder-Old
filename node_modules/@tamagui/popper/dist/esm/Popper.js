import { jsx } from "react/jsx-runtime";
import { useComposedRefs } from "@tamagui/compose-refs";
import {
  View as TamaguiView,
  createStyledContext,
  getVariableValue,
  isWeb,
  styled,
  useIsomorphicLayoutEffect,
  useProps
} from "@tamagui/core";
import {
  arrow,
  autoUpdate,
  flip,
  offset as offsetFn,
  shift,
  useFloating
} from "@tamagui/floating";
import { getSpace } from "@tamagui/get-token";
import { ThemeableStack, YStack } from "@tamagui/stacks";
import * as React from "react";
import { Keyboard, useWindowDimensions } from "react-native";
const PopperContext = createStyledContext({});
const usePopperContext = () => React.useContext(PopperContext);
function Popper(props) {
  const {
    children,
    size,
    strategy = "absolute",
    placement = "bottom",
    stayInFrame,
    allowFlip,
    offset
  } = props;
  const [isMounted, setIsMounted] = React.useState(false);
  useIsomorphicLayoutEffect(() => {
    setIsMounted(true);
  }, []);
  const [anchorRef, setAnchorRef] = React.useState();
  const [arrowEl, setArrow] = React.useState(null);
  const [arrowSize, setArrowSize] = React.useState(0);
  const offsetOptions = offset ?? arrowSize;
  const floating = useFloating({
    strategy,
    placement,
    sameScrollView: false,
    // this only takes effect on native
    middleware: [
      stayInFrame ? shift(typeof stayInFrame === "boolean" ? {} : stayInFrame) : null,
      allowFlip ? flip(typeof allowFlip === "boolean" ? {} : allowFlip) : null,
      arrowEl ? arrow({ element: arrowEl }) : null,
      typeof offsetOptions !== "undefined" ? offsetFn(offsetOptions) : null
    ].filter(Boolean)
  });
  const {
    refs,
    middlewareData,
    // @ts-expect-error this comes from Tooltip for example
    open
  } = floating;
  useIsomorphicLayoutEffect(() => {
    floating.refs.setReference(anchorRef);
  }, [anchorRef]);
  if (isWeb) {
    useIsomorphicLayoutEffect(() => {
      if (!open)
        return;
      if (!(refs.reference.current && refs.floating.current)) {
        return;
      }
      return autoUpdate(refs.reference.current, refs.floating.current, floating.update);
    }, [open, floating.update, refs.floating, refs.reference]);
  } else {
    const dimensions = useWindowDimensions();
    const [keyboardOpen, setKeyboardOpen] = React.useState(false);
    React.useEffect(() => {
      const showSubscription = Keyboard.addListener("keyboardDidShow", () => {
        setKeyboardOpen(true);
      });
      const hideSubscription = Keyboard.addListener("keyboardDidHide", () => {
        setKeyboardOpen(false);
      });
      return () => {
        showSubscription.remove();
        hideSubscription.remove();
      };
    }, []);
    useIsomorphicLayoutEffect(() => {
      floating.update();
    }, [dimensions, keyboardOpen]);
  }
  const popperContext = {
    anchorRef: setAnchorRef,
    size,
    arrowRef: setArrow,
    arrowStyle: middlewareData.arrow,
    onArrowSize: setArrowSize,
    isMounted,
    ...floating
  };
  return /* @__PURE__ */ jsx(PopperContext.Provider, { ...popperContext, children });
}
const PopperAnchor = YStack.extractable(
  React.forwardRef(function PopperAnchor2(props, forwardedRef) {
    const { virtualRef, ...anchorProps } = props;
    const { anchorRef, getReferenceProps } = usePopperContext();
    const ref = React.useRef(null);
    const composedRefs = useComposedRefs(forwardedRef, ref, anchorRef);
    if (virtualRef) {
      return null;
    }
    const stackProps = {
      ref: composedRefs,
      ...anchorProps
    };
    return /* @__PURE__ */ jsx(
      TamaguiView,
      {
        ...getReferenceProps ? getReferenceProps(stackProps) : stackProps
      }
    );
  })
);
const PopperContentFrame = styled(ThemeableStack, {
  name: "PopperContent",
  variants: {
    unstyled: {
      false: {
        size: "$true",
        backgroundColor: "$background",
        alignItems: "center",
        radiused: true
      }
    },
    size: {
      "...size": (val, { tokens }) => {
        return {
          padding: tokens.space[val],
          borderRadius: tokens.radius[val]
        };
      }
    }
  },
  defaultVariants: {
    unstyled: false
  }
});
const PopperContent = React.forwardRef(
  function PopperContent2(props, forwardedRef) {
    const { strategy, placement, refs, x, y, getFloatingProps, size, isMounted, update } = usePopperContext();
    const contentRefs = useComposedRefs(refs.setFloating, forwardedRef);
    const contents = React.useMemo(() => {
      return /* @__PURE__ */ jsx(
        PopperContentFrame,
        {
          "data-placement": placement,
          "data-strategy": strategy,
          contain: "layout",
          size,
          ...props
        },
        "popper-content-frame"
      );
    }, [placement, strategy, props]);
    useIsomorphicLayoutEffect(() => {
      if (isMounted) {
        update();
      }
    }, [isMounted]);
    if (!isMounted) {
      return null;
    }
    const frameProps = {
      ref: contentRefs,
      x: x || 0,
      y: y || 0,
      position: strategy
    };
    return /* @__PURE__ */ jsx(YStack, { ...getFloatingProps ? getFloatingProps(frameProps) : frameProps, children: contents });
  }
);
const PopperArrowFrame = styled(YStack, {
  name: "PopperArrow",
  variants: {
    unstyled: {
      false: {
        borderColor: "$borderColor",
        backgroundColor: "$background",
        position: "relative"
      }
    }
  },
  defaultVariants: {
    unstyled: false
  }
});
const PopperArrowOuterFrame = styled(YStack, {
  name: "PopperArrowOuter",
  variants: {
    unstyled: {
      false: {
        position: "absolute",
        zIndex: -1,
        pointerEvents: "none",
        overflow: "hidden",
        alignItems: "center",
        justifyContent: "center"
      }
    }
  },
  defaultVariants: {
    unstyled: false
  }
});
const opposites = {
  top: "bottom",
  right: "left",
  bottom: "top",
  left: "right"
};
const PopperArrow = PopperArrowFrame.styleable(
  function PopperArrow2(propsIn, forwardedRef) {
    var _a, _b;
    const props = useProps(propsIn);
    const { offset, size: sizeProp, borderWidth = 0, ...arrowProps } = props;
    const context = usePopperContext();
    const sizeVal = sizeProp ?? context.size;
    const sizeValResolved = getVariableValue(
      getSpace(sizeVal, {
        shift: -2,
        bounds: [2]
      })
    );
    const size = +sizeValResolved;
    const { placement } = context;
    const refs = useComposedRefs(context.arrowRef, forwardedRef);
    const x = ((_a = context.arrowStyle) == null ? void 0 : _a.x) || 0;
    const y = ((_b = context.arrowStyle) == null ? void 0 : _b.y) || 0;
    const primaryPlacement = placement ? placement.split("-")[0] : "top";
    const arrowStyle = { x, y, width: size, height: size };
    const innerArrowStyle = {};
    const isVertical = primaryPlacement === "bottom" || primaryPlacement === "top";
    if (primaryPlacement) {
      arrowStyle[isVertical ? "width" : "height"] = size * 2;
      const oppSide = opposites[primaryPlacement];
      if (oppSide) {
        arrowStyle[oppSide] = -size;
        innerArrowStyle[oppSide] = size / 2;
      }
      if (oppSide === "top" || oppSide === "bottom") {
        arrowStyle.left = 0;
      }
      if (oppSide === "left" || oppSide === "right") {
        arrowStyle.top = 0;
      }
    }
    useIsomorphicLayoutEffect(() => {
      var _a2;
      (_a2 = context.onArrowSize) == null ? void 0 : _a2.call(context, size);
    }, [size, context.onArrowSize]);
    return /* @__PURE__ */ jsx(PopperArrowOuterFrame, { ref: refs, ...arrowStyle, children: /* @__PURE__ */ jsx(
      PopperArrowFrame,
      {
        width: size,
        height: size,
        ...arrowProps,
        ...innerArrowStyle,
        rotate: "45deg",
        ...primaryPlacement === "bottom" && {
          borderLeftWidth: borderWidth,
          borderTopWidth: borderWidth
        },
        ...primaryPlacement === "top" && {
          borderBottomWidth: borderWidth,
          borderRightWidth: borderWidth
        },
        ...primaryPlacement === "right" && {
          borderLeftWidth: borderWidth,
          borderBottomWidth: borderWidth
        },
        ...primaryPlacement === "left" && {
          borderTopWidth: borderWidth,
          borderRightWidth: borderWidth
        }
      }
    ) });
  }
);
export {
  Popper,
  PopperAnchor,
  PopperArrow,
  PopperContent,
  PopperContentFrame,
  PopperContext,
  usePopperContext
};
//# sourceMappingURL=Popper.js.map
