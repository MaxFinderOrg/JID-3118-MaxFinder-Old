"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var AnimatePresence_exports = {};
__export(AnimatePresence_exports, {
  AnimatePresence: () => AnimatePresence
});
module.exports = __toCommonJS(AnimatePresence_exports);
var import_jsx_runtime = require("react/jsx-runtime");
var import_use_force_update = require("@tamagui/use-force-update");
var import_web = require("@tamagui/web");
var import_react = __toESM(require("react"));
var import_LayoutGroupContext = require("./LayoutGroupContext");
var import_PresenceChild = require("./PresenceChild");
const getChildKey = (child) => child.key || "";
const isDev = process.env.NODE_ENV !== "production";
function updateChildLookup(children, allChildren) {
  const seenChildren = isDev ? /* @__PURE__ */ new Set() : null;
  children.forEach((child) => {
    const key = getChildKey(child);
    if (isDev && seenChildren && seenChildren.has(key)) {
      console.warn(
        `Children of AnimatePresence require unique keys. "${key}" is a duplicate.`
      );
      seenChildren.add(key);
    }
    allChildren.set(key, child);
  });
}
function onlyElements(children) {
  const filtered = [];
  import_react.Children.forEach(children, (child, index) => {
    if ((0, import_react.isValidElement)(child)) {
      if (!child.key && import_react.Children.count(children) > 1) {
        if (process.env.NODE_ENV === "development") {
          console.warn("No key given to AnimatePresence child, assigning index as key");
        }
        filtered.push(
          import_react.default.cloneElement(child, {
            key: index
          })
        );
      } else {
        filtered.push(child);
      }
    }
  });
  return filtered;
}
const AnimatePresence = ({
  children,
  enterVariant,
  exitVariant,
  enterExitVariant,
  initial = true,
  onExitComplete,
  exitBeforeEnter,
  presenceAffectsLayout = true
}) => {
  let forceRender = (0, import_use_force_update.useForceUpdate)();
  const isClientMounted = (0, import_web.useDidFinishSSR)();
  const forceRenderLayoutGroup = (0, import_react.useContext)(import_LayoutGroupContext.LayoutGroupContext).forceRender;
  if (forceRenderLayoutGroup)
    forceRender = forceRenderLayoutGroup;
  const isMounted = (0, import_react.useRef)(false);
  const filteredChildren = onlyElements(children);
  let childrenToRender = filteredChildren;
  const exiting = /* @__PURE__ */ new Set();
  const presentChildren = (0, import_react.useRef)(childrenToRender);
  const allChildren = (0, import_react.useRef)(/* @__PURE__ */ new Map()).current;
  const isInitialRender = (0, import_react.useRef)(true);
  (0, import_react.useEffect)(() => {
    isMounted.current = true;
    return () => {
      isMounted.current = false;
      isInitialRender.current = true;
      allChildren.clear();
      exiting.clear();
    };
  }, []);
  (0, import_web.useIsomorphicLayoutEffect)(() => {
    isInitialRender.current = false;
    updateChildLookup(filteredChildren, allChildren);
    presentChildren.current = childrenToRender;
  });
  const hasWarned = process.env.NODE_ENV === "development" ? (0, import_react.useRef)(false) : null;
  if (isInitialRender.current) {
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_jsx_runtime.Fragment, { children: childrenToRender.map((child) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      import_PresenceChild.PresenceChild,
      {
        isPresent: Boolean(isClientMounted ? true : isMounted.current),
        enterExitVariant,
        exitVariant,
        enterVariant,
        initial: initial ? void 0 : false,
        presenceAffectsLayout,
        children: child
      },
      getChildKey(child)
    )) });
  }
  childrenToRender = [...childrenToRender];
  const presentKeys = presentChildren.current.map(getChildKey);
  const targetKeys = filteredChildren.map(getChildKey);
  const numPresent = presentKeys.length;
  for (let i = 0; i < numPresent; i++) {
    const key = presentKeys[i];
    if (targetKeys.indexOf(key) === -1) {
      exiting.add(key);
    }
  }
  if (exitBeforeEnter && exiting.size) {
    childrenToRender = [];
  }
  exiting.forEach((key) => {
    if (targetKeys.indexOf(key) !== -1)
      return;
    const child = allChildren.get(key);
    if (!child)
      return;
    const insertionIndex = presentKeys.indexOf(key);
    childrenToRender.splice(
      insertionIndex,
      0,
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
        import_PresenceChild.PresenceChild,
        {
          isPresent: false,
          onExitComplete: () => {
            allChildren.delete(key);
            exiting.delete(key);
            const removeIndex = presentChildren.current.findIndex(
              (presentChild) => presentChild.key === key
            );
            presentChildren.current.splice(removeIndex, 1);
            if (!exiting.size) {
              presentChildren.current = filteredChildren;
              if (isMounted.current === false)
                return;
              forceRender();
              onExitComplete == null ? void 0 : onExitComplete();
            }
          },
          exitVariant,
          enterVariant,
          enterExitVariant,
          presenceAffectsLayout,
          children: child
        },
        getChildKey(child)
      )
    );
  });
  childrenToRender = childrenToRender.map((child) => {
    const key = child.key;
    return exiting.has(key) ? child : /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      import_PresenceChild.PresenceChild,
      {
        isPresent: true,
        exitVariant,
        enterVariant,
        enterExitVariant,
        presenceAffectsLayout,
        children: child
      },
      getChildKey(child)
    );
  });
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_jsx_runtime.Fragment, { children: exiting.size ? childrenToRender : childrenToRender.map((child) => (0, import_react.cloneElement)(child)) });
};
AnimatePresence.displayName = "AnimatePresence";
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  AnimatePresence
});
//# sourceMappingURL=AnimatePresence.js.map
