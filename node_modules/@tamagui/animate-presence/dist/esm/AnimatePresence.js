import { Fragment, jsx } from "react/jsx-runtime";
import { useForceUpdate } from "@tamagui/use-force-update";
import { useDidFinishSSR, useIsomorphicLayoutEffect } from "@tamagui/web";
import React, {
  Children,
  cloneElement,
  isValidElement,
  useContext,
  useEffect,
  useRef
} from "react";
import { LayoutGroupContext } from "./LayoutGroupContext";
import { PresenceChild } from "./PresenceChild";
const getChildKey = (child) => child.key || "";
const isDev = process.env.NODE_ENV !== "production";
function updateChildLookup(children, allChildren) {
  const seenChildren = isDev ? /* @__PURE__ */ new Set() : null;
  children.forEach((child) => {
    const key = getChildKey(child);
    if (isDev && seenChildren && seenChildren.has(key)) {
      console.warn(
        `Children of AnimatePresence require unique keys. "${key}" is a duplicate.`
      );
      seenChildren.add(key);
    }
    allChildren.set(key, child);
  });
}
function onlyElements(children) {
  const filtered = [];
  Children.forEach(children, (child, index) => {
    if (isValidElement(child)) {
      if (!child.key && Children.count(children) > 1) {
        if (process.env.NODE_ENV === "development") {
          console.warn("No key given to AnimatePresence child, assigning index as key");
        }
        filtered.push(
          React.cloneElement(child, {
            key: index
          })
        );
      } else {
        filtered.push(child);
      }
    }
  });
  return filtered;
}
const AnimatePresence = ({
  children,
  enterVariant,
  exitVariant,
  enterExitVariant,
  initial = true,
  onExitComplete,
  exitBeforeEnter,
  presenceAffectsLayout = true
}) => {
  let forceRender = useForceUpdate();
  const isClientMounted = useDidFinishSSR();
  const forceRenderLayoutGroup = useContext(LayoutGroupContext).forceRender;
  if (forceRenderLayoutGroup)
    forceRender = forceRenderLayoutGroup;
  const isMounted = useRef(false);
  const filteredChildren = onlyElements(children);
  let childrenToRender = filteredChildren;
  const exiting = /* @__PURE__ */ new Set();
  const presentChildren = useRef(childrenToRender);
  const allChildren = useRef(/* @__PURE__ */ new Map()).current;
  const isInitialRender = useRef(true);
  useEffect(() => {
    isMounted.current = true;
    return () => {
      isMounted.current = false;
      isInitialRender.current = true;
      allChildren.clear();
      exiting.clear();
    };
  }, []);
  useIsomorphicLayoutEffect(() => {
    isInitialRender.current = false;
    updateChildLookup(filteredChildren, allChildren);
    presentChildren.current = childrenToRender;
  });
  const hasWarned = process.env.NODE_ENV === "development" ? useRef(false) : null;
  if (isInitialRender.current) {
    return /* @__PURE__ */ jsx(Fragment, { children: childrenToRender.map((child) => /* @__PURE__ */ jsx(
      PresenceChild,
      {
        isPresent: Boolean(isClientMounted ? true : isMounted.current),
        enterExitVariant,
        exitVariant,
        enterVariant,
        initial: initial ? void 0 : false,
        presenceAffectsLayout,
        children: child
      },
      getChildKey(child)
    )) });
  }
  childrenToRender = [...childrenToRender];
  const presentKeys = presentChildren.current.map(getChildKey);
  const targetKeys = filteredChildren.map(getChildKey);
  const numPresent = presentKeys.length;
  for (let i = 0; i < numPresent; i++) {
    const key = presentKeys[i];
    if (targetKeys.indexOf(key) === -1) {
      exiting.add(key);
    }
  }
  if (exitBeforeEnter && exiting.size) {
    childrenToRender = [];
  }
  exiting.forEach((key) => {
    if (targetKeys.indexOf(key) !== -1)
      return;
    const child = allChildren.get(key);
    if (!child)
      return;
    const insertionIndex = presentKeys.indexOf(key);
    childrenToRender.splice(
      insertionIndex,
      0,
      /* @__PURE__ */ jsx(
        PresenceChild,
        {
          isPresent: false,
          onExitComplete: () => {
            allChildren.delete(key);
            exiting.delete(key);
            const removeIndex = presentChildren.current.findIndex(
              (presentChild) => presentChild.key === key
            );
            presentChildren.current.splice(removeIndex, 1);
            if (!exiting.size) {
              presentChildren.current = filteredChildren;
              if (isMounted.current === false)
                return;
              forceRender();
              onExitComplete == null ? void 0 : onExitComplete();
            }
          },
          exitVariant,
          enterVariant,
          enterExitVariant,
          presenceAffectsLayout,
          children: child
        },
        getChildKey(child)
      )
    );
  });
  childrenToRender = childrenToRender.map((child) => {
    const key = child.key;
    return exiting.has(key) ? child : /* @__PURE__ */ jsx(
      PresenceChild,
      {
        isPresent: true,
        exitVariant,
        enterVariant,
        enterExitVariant,
        presenceAffectsLayout,
        children: child
      },
      getChildKey(child)
    );
  });
  return /* @__PURE__ */ jsx(Fragment, { children: exiting.size ? childrenToRender : childrenToRender.map((child) => cloneElement(child)) });
};
AnimatePresence.displayName = "AnimatePresence";
export {
  AnimatePresence
};
//# sourceMappingURL=AnimatePresence.js.map
