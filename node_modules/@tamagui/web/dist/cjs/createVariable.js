"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var createVariable_exports = {};
__export(createVariable_exports, {
  createCSSVariable: () => createCSSVariable,
  createVariable: () => createVariable,
  didGetVariableValue: () => didGetVariableValue,
  getVariable: () => getVariable,
  getVariableName: () => getVariableName,
  getVariableValue: () => getVariableValue,
  getVariableVariable: () => getVariableVariable,
  isVariable: () => isVariable,
  setDidGetVariableValue: () => setDidGetVariableValue,
  variableToString: () => variableToString
});
module.exports = __toCommonJS(createVariable_exports);
var import_constants = require("@tamagui/constants");
var import_helpers = require("@tamagui/helpers");
var import_config = require("./config");
const IS_VAR = "isVar";
const createVariable = (props, skipHash = false) => {
  if (!skipHash && isVariable(props))
    return props;
  const { key, name, val } = props;
  return {
    [IS_VAR]: true,
    key,
    name: skipHash ? "" : (0, import_helpers.simpleHash)(name, 40),
    val,
    variable: import_constants.isWeb ? skipHash ? `var(--${name})` : createCSSVariable(name) : ""
  };
};
function variableToString(vrble, getValue = false) {
  if (isVariable(vrble)) {
    if (!getValue && import_constants.isWeb && vrble.variable) {
      return vrble.variable;
    }
    return `${vrble.val}`;
  }
  return `${vrble || ""}`;
}
function isVariable(v) {
  return v && typeof v === "object" && IS_VAR in v;
}
function getVariable(nameOrVariable) {
  setDidGetVariableValue(true);
  if (isVariable(nameOrVariable)) {
    return variableToString(nameOrVariable);
  }
  const tokens = (0, import_config.getConfig)().tokensParsed;
  return variableToString(tokens[nameOrVariable] ?? nameOrVariable);
}
let accessed = false;
const setDidGetVariableValue = (val) => accessed = val;
const didGetVariableValue = () => accessed;
function getVariableValue(v) {
  if (isVariable(v)) {
    setDidGetVariableValue(true);
    return v.val;
  }
  return v;
}
function getVariableName(v) {
  if (isVariable(v))
    return v.name;
  return v;
}
function getVariableVariable(v) {
  if (isVariable(v))
    return v.variable;
  return v;
}
const createCSSVariable = (nameProp, includeVar = true) => {
  if (process.env.NODE_ENV === "development") {
    if (!nameProp || typeof nameProp !== "string") {
      throw new Error(`createCSSVariable expected string, got: ${nameProp}`);
    }
  }
  const name = (0, import_helpers.simpleHash)(nameProp, 60);
  return includeVar ? `var(--${name})` : name;
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  createCSSVariable,
  createVariable,
  didGetVariableValue,
  getVariable,
  getVariableName,
  getVariableValue,
  getVariableVariable,
  isVariable,
  setDidGetVariableValue,
  variableToString
});
//# sourceMappingURL=createVariable.js.map
