"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var styled_exports = {};
__export(styled_exports, {
  styled: () => styled
});
module.exports = __toCommonJS(styled_exports);
var import_createComponent = require("./createComponent");
var import_mergeVariants = require("./helpers/mergeVariants");
var import_setupReactNative = require("./setupReactNative");
function styled(ComponentIn, options, staticExtractionOptions) {
  if (process.env.NODE_ENV !== "production") {
    if (!ComponentIn) {
      throw new Error(`No component given to styled()`);
    }
  }
  const parentStaticConfig = ComponentIn["staticConfig"];
  const isPlainStyledComponent = !!parentStaticConfig && !(parentStaticConfig.isReactNative || parentStaticConfig.isHOC);
  const isNonStyledHOC = (parentStaticConfig == null ? void 0 : parentStaticConfig.isHOC) && !(parentStaticConfig == null ? void 0 : parentStaticConfig.isStyledHOC);
  let Component = isNonStyledHOC || isPlainStyledComponent ? ComponentIn : (parentStaticConfig == null ? void 0 : parentStaticConfig.Component) || ComponentIn;
  const reactNativeConfig = (0, import_setupReactNative.getReactNativeConfig)(Component);
  const isReactNative = Boolean(
    reactNativeConfig || (staticExtractionOptions == null ? void 0 : staticExtractionOptions.isReactNative) || (parentStaticConfig == null ? void 0 : parentStaticConfig.isReactNative) || (0, import_setupReactNative.getReactNativeConfig)(parentStaticConfig == null ? void 0 : parentStaticConfig.Component)
  );
  const staticConfigProps = (() => {
    if (options) {
      let {
        variants,
        name,
        defaultVariants,
        acceptsClassName: acceptsClassNameProp,
        context,
        ...defaultProps
      } = options;
      if (defaultVariants) {
        defaultProps = {
          ...defaultVariants,
          ...defaultProps
        };
      }
      if (parentStaticConfig) {
        const avoid = parentStaticConfig.isHOC && !parentStaticConfig.isStyledHOC;
        if (!avoid) {
          defaultProps = {
            ...parentStaticConfig.defaultProps,
            ...defaultProps
          };
        }
        if (parentStaticConfig.variants) {
          variants = (0, import_mergeVariants.mergeVariants)(parentStaticConfig.variants, variants);
        }
      }
      if (parentStaticConfig == null ? void 0 : parentStaticConfig.isHOC) {
        if (name) {
          defaultProps.componentName = name;
        }
      }
      const isText = Boolean(
        (staticExtractionOptions == null ? void 0 : staticExtractionOptions.isText) || (parentStaticConfig == null ? void 0 : parentStaticConfig.isText)
      );
      const acceptsClassName = acceptsClassNameProp ?? (isPlainStyledComponent || isReactNative || (parentStaticConfig == null ? void 0 : parentStaticConfig.isHOC) && (parentStaticConfig == null ? void 0 : parentStaticConfig.acceptsClassName));
      const conf = {
        ...parentStaticConfig,
        ...staticExtractionOptions,
        ...!isPlainStyledComponent && {
          Component
        },
        // this type gets messed up by options?: Partial<GetProps<ParentComponent>> above
        // take away the Partial<> and it's fine
        variants,
        defaultProps,
        defaultVariants,
        componentName: name || (parentStaticConfig == null ? void 0 : parentStaticConfig.componentName),
        isReactNative,
        isText,
        acceptsClassName,
        context,
        ...reactNativeConfig,
        isStyledHOC: Boolean(parentStaticConfig == null ? void 0 : parentStaticConfig.isHOC),
        parentStaticConfig
      };
      if (defaultProps.children || !acceptsClassName || context) {
        conf.neverFlatten = true;
      }
      return conf;
    }
  })();
  const component = (0, import_createComponent.createComponent)(staticConfigProps || {});
  for (const key in ComponentIn) {
    if (key in component)
      continue;
    component[key] = ComponentIn[key];
  }
  return component;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  styled
});
//# sourceMappingURL=styled.js.map
