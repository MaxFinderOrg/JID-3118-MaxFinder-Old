"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var Theme_exports = {};
__export(Theme_exports, {
  Theme: () => Theme,
  useThemedChildren: () => useThemedChildren,
  wrapThemeElements: () => wrapThemeElements
});
module.exports = __toCommonJS(Theme_exports);
var import_jsx_runtime = require("react/jsx-runtime");
var import_constants = require("@tamagui/constants");
var import_react = __toESM(require("react"));
var import_createVariable = require("../createVariable");
var import_ThemeManagerContext = require("../helpers/ThemeManagerContext");
var import_useTheme = require("../hooks/useTheme");
var import_ThemeDebug = require("./ThemeDebug");
const Theme = (0, import_react.forwardRef)(function Theme2(props, ref) {
  if (props.disable) {
    return props.children;
  }
  const isRoot = !!props["_isRoot"];
  const disableDirectChildTheme = props["disable-child-theme"];
  const themeState = (0, import_useTheme.useChangeThemeEffect)(props, isRoot);
  const children = (0, import_react.useMemo)(() => {
    let children2 = disableDirectChildTheme ? import_react.Children.map(
      props.children,
      (child) => (0, import_react.cloneElement)(child, { ["data-disable-theme"]: true })
    ) : props.children;
    if (ref) {
      try {
        import_react.default.Children.only(children2);
        children2 = (0, import_react.cloneElement)(children2, { ref });
      } catch {
      }
    }
    if (process.env.NODE_ENV === "development") {
      if (props.debug === "visualize") {
        children2 = /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_ThemeDebug.ThemeDebug, { themeState, themeProps: props, children: children2 });
      }
    }
    return children2;
  }, [props.children, disableDirectChildTheme]);
  return useThemedChildren(themeState, children, props, isRoot);
});
Theme["avoidForwardRef"] = true;
function useThemedChildren(themeState, children, props, isRoot = false) {
  const { themeManager, isNewTheme } = themeState;
  const { shallow, forceClassName } = props;
  const hasEverThemed = (0, import_react.useRef)(false);
  if (isNewTheme) {
    hasEverThemed.current = true;
  }
  const shouldRenderChildrenWithTheme = isNewTheme || props.inverse || hasEverThemed.current || forceClassName || isRoot;
  if (!shouldRenderChildrenWithTheme) {
    return children;
  }
  let next = children;
  if (shallow && themeManager) {
    next = import_react.Children.toArray(children).map((child) => {
      return (0, import_react.isValidElement)(child) ? (0, import_react.cloneElement)(
        child,
        void 0,
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Theme, { name: themeManager.state.parentName, children: child.props.children })
      ) : child;
    });
  }
  const elementsWithContext = /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_ThemeManagerContext.ThemeManagerContext.Provider, { value: themeManager, children: next });
  if (forceClassName === false) {
    return elementsWithContext;
  }
  if (import_constants.isWeb) {
    return wrapThemeElements({
      children: elementsWithContext,
      themeState,
      forceClassName,
      isRoot
    });
  }
  return elementsWithContext;
}
function wrapThemeElements({
  children,
  themeState,
  forceClassName,
  isRoot
}) {
  if (isRoot && forceClassName === false) {
    return children;
  }
  const inverse = themeState.state.inverse;
  if (!themeState.isNewTheme && !inverse && !forceClassName) {
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", { className: "_dsp_contents is_Theme", children });
  }
  const themeColor = themeState.state.theme && themeState.isNewTheme ? (0, import_createVariable.variableToString)(themeState.state.theme.color) : "";
  const colorStyle = themeColor ? {
    color: themeColor
  } : void 0;
  let className = themeState.state.className || "";
  if (isRoot) {
    className = className.replace("t_sub_theme", "");
  }
  let themedChildren = /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", { className: `${className} _dsp_contents is_Theme`, style: colorStyle, children });
  if (inverse != null || forceClassName) {
    themedChildren = /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      "span",
      {
        className: `${themeState.state.name.startsWith("light") ? "t_light" : themeState.state.name.startsWith("dark") ? "t_dark" : ""} _dsp_contents ${inverse ? "is_inversed" : ""}`,
        children: themedChildren
      }
    );
  }
  return themedChildren;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Theme,
  useThemedChildren,
  wrapThemeElements
});
//# sourceMappingURL=Theme.js.map
