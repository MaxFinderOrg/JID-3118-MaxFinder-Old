"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var Slot_exports = {};
__export(Slot_exports, {
  Slot: () => Slot,
  Slottable: () => Slottable
});
module.exports = __toCommonJS(Slot_exports);
var import_jsx_runtime = require("react/jsx-runtime");
var import_compose_refs = require("@tamagui/compose-refs");
var import_constants = require("@tamagui/constants");
var import_helpers = require("@tamagui/helpers");
var import_react = require("react");
const Slot = (0, import_react.forwardRef)(function Slot2(props, forwardedRef) {
  const { children, ...slotProps } = props;
  if ((0, import_react.isValidElement)(children)) {
    const mergedProps = mergeSlotProps(children, slotProps);
    return (0, import_react.cloneElement)(
      children,
      children.type["avoidForwardRef"] ? mergedProps : {
        ...mergedProps,
        ref: (0, import_compose_refs.composeRefs)(forwardedRef, children.ref)
      }
    );
  }
  return import_react.Children.count(children) > 1 ? import_react.Children.only(null) : null;
});
const Slottable = ({ children }) => {
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_jsx_runtime.Fragment, { children });
};
const pressMap = import_constants.isWeb ? {
  onPress: "onClick",
  onPressOut: "onMouseUp",
  onPressIn: "onMouseDown"
} : {};
function mergeSlotProps(child, slotProps) {
  const childProps = child.props;
  const overrideProps = { ...childProps };
  const isHTMLChild = typeof child.type === "string";
  if (isHTMLChild) {
    for (const key in pressMap) {
      if (key in slotProps) {
        slotProps[pressMap[key]] = slotProps[key];
        delete slotProps[key];
      }
    }
  }
  for (let propName in childProps) {
    const slotPropValue = slotProps[propName];
    const childPropValue = childProps[propName];
    if (isHTMLChild && propName in pressMap) {
      propName = pressMap[propName];
      delete overrideProps[propName];
    }
    const isHandler = handleRegex.test(propName);
    if (isHandler) {
      overrideProps[propName] = (0, import_helpers.composeEventHandlers)(childPropValue, slotPropValue);
    } else if (propName === "style") {
      overrideProps[propName] = { ...slotPropValue, ...childPropValue };
    } else if (propName === "className") {
      overrideProps[propName] = [slotPropValue, childPropValue].filter(Boolean).join(" ");
    }
  }
  return { ...slotProps, ...overrideProps };
}
const handleRegex = /^on[A-Z]/;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Slot,
  Slottable
});
//# sourceMappingURL=Slot.js.map
