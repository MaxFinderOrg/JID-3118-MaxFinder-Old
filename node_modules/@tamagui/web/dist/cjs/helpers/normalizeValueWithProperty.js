"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var normalizeValueWithProperty_exports = {};
__export(normalizeValueWithProperty_exports, {
  normalizeValueWithProperty: () => normalizeValueWithProperty,
  reverseMapClassNameToValue: () => reverseMapClassNameToValue
});
module.exports = __toCommonJS(normalizeValueWithProperty_exports);
var import_constants = require("@tamagui/constants");
var import_helpers = require("@tamagui/helpers");
var import_insertStyleRule = require("./insertStyleRule");
const stylePropsAllPlusTransforms = {
  ...import_helpers.stylePropsAll,
  translateX: true,
  translateY: true
};
function normalizeValueWithProperty(value, property) {
  if (!import_constants.isWeb)
    return value;
  if (typeof value === "boolean") {
    return value;
  }
  if (property && property in import_helpers.stylePropsUnitless) {
    return value;
  }
  if (property && !(property in stylePropsAllPlusTransforms)) {
    return value;
  }
  let res = value;
  if (value && typeof value === "object")
    return value;
  if (typeof value === "number") {
    res = `${value}px`;
  } else if (property) {
    res = `${res}`;
  }
  return res;
}
const rcache = {};
function reverseMapClassNameToValue(key, className) {
  const selectors = (0, import_insertStyleRule.getAllSelectors)();
  const cssRule = selectors[className];
  if (rcache[cssRule]) {
    return rcache[cssRule];
  }
  if (!cssRule) {
    if (process.env.NODE_ENV === "development") {
      console.warn(
        `No CSS rule found for ${key} looking for selector ".${className}", you may not be injecting extracted CSS`
      );
    }
    return;
  }
  const cssVal = cssRule.replace(/.*:/, "").replace(/;.*/, "").trim();
  let res;
  if (cssVal.startsWith("var(")) {
    res = cssVal;
  } else if (import_helpers.stylePropsUnitless[key]) {
    res = +cssVal;
  } else if (cssVal.endsWith("px")) {
    res = +cssVal.replace("px", "");
  } else {
    res = cssVal;
  }
  rcache[cssRule] = res;
  if (process.env.NODE_ENV === "development") {
    if (typeof res === "number" && isNaN(res)) {
      console.log("Tamagui invalid parsed value, NaN:", {
        res,
        cssVal,
        cssRule,
        key,
        className
      });
    }
  }
  return res;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  normalizeValueWithProperty,
  reverseMapClassNameToValue
});
//# sourceMappingURL=normalizeValueWithProperty.js.map
