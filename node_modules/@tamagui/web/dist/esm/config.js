import { isWeb } from "@tamagui/constants";
let conf;
const setConfig = (next) => {
  conf = next;
  configListeners.forEach((cb) => cb(next));
};
const setConfigFont = (name, font, fontParsed) => {
  if (process.env.NODE_ENV === "development") {
    if (!conf)
      throw new Error(`Haven't called createTamagui yet`);
  }
  conf.fonts[name] = font;
  conf.fontsParsed[`$${name}`] = fontParsed;
};
const getConfig = () => {
  if (!conf) {
    throw new Error(
      process.env.NODE_ENV !== "production" ? `Missing tamagui config, you either have a duplicate config, or haven't set it up. Be sure createTamagui is called before rendering. Also, make sure all of your tamagui dependencies are on the same version (\`tamagui\`, \`@tamagui/package-name\`, etc.)` : "Err0"
    );
  }
  return conf;
};
let tokensMerged;
function setTokens(_) {
  tokensMerged = _;
}
const getTokens = ({
  prefixed
} = {}) => {
  if (process.env.NODE_ENV === "development") {
    if (!conf)
      throw new Error(`Haven't called createTamagui yet`);
  }
  const { tokens, tokensParsed } = conf;
  if (prefixed === false)
    return tokens;
  if (prefixed === true)
    return tokensParsed;
  return tokensMerged;
};
const getTokenObject = (value, group) => {
  var _a, _b;
  return conf.specificTokens[value] ?? (group ? (_a = tokensMerged[group]) == null ? void 0 : _a[value] : (_b = tokensMerged[Object.keys(tokensMerged).find((cat) => tokensMerged[cat][value]) || ""]) == null ? void 0 : _b[value]);
};
const getToken = (value, group, useVariable = isWeb) => {
  const token = getTokenObject(value, group);
  return useVariable ? token == null ? void 0 : token.variable : token == null ? void 0 : token.val;
};
const getTokenValue = (value, group) => {
  return getToken(value, group, false);
};
const useTokens = getTokens;
const getThemes = () => conf.themes;
const configListeners = /* @__PURE__ */ new Set();
const onConfiguredOnce = (cb) => {
  if (conf) {
    cb(conf);
  } else {
    configListeners.add(cb);
  }
};
const updateConfig = (key, value) => {
  Object.assign(conf[key], value);
};
const getFont = (name) => {
  var _a;
  const conf2 = getConfig();
  return conf2.fontsParsed[name] ?? ((_a = Object.entries(conf2.fontsParsed).find(
    ([k]) => {
      var _a2, _b;
      return ((_b = (_a2 = conf2.fontsParsed[k]) == null ? void 0 : _a2.family) == null ? void 0 : _b["val"]) === name;
    }
  )) == null ? void 0 : _a[1]);
};
export {
  configListeners,
  getConfig,
  getFont,
  getThemes,
  getToken,
  getTokenObject,
  getTokenValue,
  getTokens,
  onConfiguredOnce,
  setConfig,
  setConfigFont,
  setTokens,
  updateConfig,
  useTokens
};
//# sourceMappingURL=config.js.map
