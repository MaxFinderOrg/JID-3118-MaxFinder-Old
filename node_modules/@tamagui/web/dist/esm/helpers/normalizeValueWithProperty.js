import { isWeb } from "@tamagui/constants";
import { stylePropsAll, stylePropsUnitless } from "@tamagui/helpers";
import { getAllSelectors } from "./insertStyleRule";
const stylePropsAllPlusTransforms = {
  ...stylePropsAll,
  translateX: true,
  translateY: true
};
function normalizeValueWithProperty(value, property) {
  if (!isWeb)
    return value;
  if (typeof value === "boolean") {
    return value;
  }
  if (property && property in stylePropsUnitless) {
    return value;
  }
  if (property && !(property in stylePropsAllPlusTransforms)) {
    return value;
  }
  let res = value;
  if (value && typeof value === "object")
    return value;
  if (typeof value === "number") {
    res = `${value}px`;
  } else if (property) {
    res = `${res}`;
  }
  return res;
}
const rcache = {};
function reverseMapClassNameToValue(key, className) {
  const selectors = getAllSelectors();
  const cssRule = selectors[className];
  if (rcache[cssRule]) {
    return rcache[cssRule];
  }
  if (!cssRule) {
    if (process.env.NODE_ENV === "development") {
      console.warn(
        `No CSS rule found for ${key} looking for selector ".${className}", you may not be injecting extracted CSS`
      );
    }
    return;
  }
  const cssVal = cssRule.replace(/.*:/, "").replace(/;.*/, "").trim();
  let res;
  if (cssVal.startsWith("var(")) {
    res = cssVal;
  } else if (stylePropsUnitless[key]) {
    res = +cssVal;
  } else if (cssVal.endsWith("px")) {
    res = +cssVal.replace("px", "");
  } else {
    res = cssVal;
  }
  rcache[cssRule] = res;
  if (process.env.NODE_ENV === "development") {
    if (typeof res === "number" && isNaN(res)) {
      console.log("Tamagui invalid parsed value, NaN:", {
        res,
        cssVal,
        cssRule,
        key,
        className
      });
    }
  }
  return res;
}
export {
  normalizeValueWithProperty,
  reverseMapClassNameToValue
};
//# sourceMappingURL=normalizeValueWithProperty.js.map
