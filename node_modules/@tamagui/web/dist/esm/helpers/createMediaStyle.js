import { getConfig } from "../config";
import { mediaObjectToString } from "../hooks/useMedia";
import { getGroupPropParts } from "./getGroupPropParts";
const MEDIA_SEP = "_";
let prefixes = null;
let selectors = null;
const groupPseudoToPseudoCSSMap = {
  press: "active"
};
const createMediaStyle = (styleObject, mediaKeyIn, mediaQueries, negate, priority) => {
  const { property, identifier, rules } = styleObject;
  const conf = getConfig();
  const enableMediaPropOrder = conf.settings.mediaPropOrder;
  const isThemeMedia = mediaKeyIn.startsWith("theme-");
  const isPlatformMedia = !isThemeMedia && mediaKeyIn.startsWith("platform-");
  const isGroup = !isThemeMedia && !isPlatformMedia && mediaKeyIn.startsWith("group-");
  const isNonWindowMedia = isThemeMedia || isPlatformMedia || isGroup;
  const negKey = negate ? "0" : "";
  const ogPrefix = identifier.slice(0, identifier.indexOf("-") + 1);
  const id = `${ogPrefix}${MEDIA_SEP}${mediaKeyIn.replace("-", "")}${negKey}${MEDIA_SEP}`;
  let styleRule = "";
  let groupMediaKey;
  let containerName;
  let nextIdentifier = identifier.replace(ogPrefix, id);
  let styleInner = rules.map((rule) => rule.replace(identifier, nextIdentifier)).join(";");
  if (isNonWindowMedia) {
    const precedenceImportancePrefix = new Array((priority || 0) + (isGroup ? 1 : 0)).fill(":root").join("");
    if (isThemeMedia || isGroup) {
      const groupInfo = getGroupPropParts(mediaKeyIn);
      const mediaName = groupInfo == null ? void 0 : groupInfo.name;
      groupMediaKey = groupInfo == null ? void 0 : groupInfo.media;
      if (isGroup) {
        containerName = mediaName;
      }
      const name = (isGroup ? "group_" : "") + mediaName;
      const selectorStart = styleInner.indexOf(":root");
      const selectorEnd = styleInner.lastIndexOf("{");
      const selector = styleInner.slice(selectorStart, selectorEnd);
      const precedenceSpace = conf.themeClassNameOnRoot ? "" : " ";
      const pseudoSelectorName = groupInfo.pseudo ? groupPseudoToPseudoCSSMap[groupInfo.pseudo] || groupInfo.pseudo : void 0;
      const pseudoSelector = pseudoSelectorName ? `:${pseudoSelectorName}` : "";
      const presedencePrefix = `:root${precedenceImportancePrefix}${precedenceSpace}`;
      const mediaSelector = `.t_${name}${pseudoSelector}`;
      const nextSelector = `${presedencePrefix}${mediaSelector} ${selector.replace(
        ":root",
        ""
      )}`;
      styleRule = styleInner.replace(selector, nextSelector);
    } else {
      styleRule = `${precedenceImportancePrefix}${styleInner}`;
    }
  }
  if (!isNonWindowMedia || groupMediaKey) {
    if (!selectors) {
      const mediaKeys = Object.keys(mediaQueries);
      selectors = Object.fromEntries(
        mediaKeys.map((key) => [key, mediaObjectToString(mediaQueries[key])])
      );
      if (!enableMediaPropOrder) {
        prefixes = Object.fromEntries(
          mediaKeys.map((k, index) => [k, new Array(index + 1).fill(":root").join("")])
        );
      }
    }
    const mediaKey = groupMediaKey || mediaKeyIn;
    const mediaSelector = selectors[mediaKey];
    const screenStr = negate ? "not all and" : "";
    const mediaQuery = `${screenStr} ${mediaSelector}`;
    const precedenceImportancePrefix = groupMediaKey ? "" : enableMediaPropOrder ? (
      // this new array should be cached
      new Array(priority).fill(":root").join("")
    ) : (
      // @ts-ignore
      prefixes[mediaKey]
    );
    const prefix = groupMediaKey ? `@container ${containerName}` : "@media";
    if (groupMediaKey) {
      styleInner = styleRule;
    }
    if (styleInner.includes(prefix)) {
      styleRule = styleInner.replace("{", ` and ${mediaQuery} {`);
    } else {
      styleRule = `${prefix} ${mediaQuery}{${precedenceImportancePrefix}${styleInner}}`;
    }
  }
  return {
    property,
    rules: [styleRule],
    identifier: nextIdentifier
  };
};
export {
  MEDIA_SEP,
  createMediaStyle
};
//# sourceMappingURL=createMediaStyle.js.map
