const mergeVariants = (parentVariants, ourVariants) => {
  const variants = {};
  for (const key in ourVariants) {
    const parentVariant = parentVariants == null ? void 0 : parentVariants[key];
    const ourVariant = ourVariants[key];
    if (!parentVariant || typeof ourVariant === "function") {
      variants[key] = ourVariant;
      continue;
    }
    if (parentVariant && !ourVariant) {
      variants[key] = parentVariant[key];
      continue;
    }
    variants[key] = {};
    for (const subKey in ourVariant) {
      const val = ourVariant[subKey];
      const parentVal = parentVariant == null ? void 0 : parentVariant[subKey];
      if (typeof val === "function") {
        variants[key][subKey] = val;
      } else if (!parentVal || typeof parentVal === "function") {
        variants[key][subKey] = val;
      } else {
        variants[key][subKey] = {
          // keep order
          ...parentVal,
          ...val
        };
      }
    }
    if (parentVariant) {
      variants[key] = {
        ...parentVariant,
        ...variants[key]
      };
    }
  }
  return {
    ...parentVariants,
    ...variants
  };
};
export {
  mergeVariants
};
//# sourceMappingURL=mergeVariants.js.map
