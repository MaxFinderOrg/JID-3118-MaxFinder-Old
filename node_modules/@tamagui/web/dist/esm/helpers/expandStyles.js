import { isWeb } from "@tamagui/constants";
import { expandStyle } from "./expandStyle";
import { normalizeShadow } from "./normalizeShadow";
import { normalizeValueWithProperty } from "./normalizeValueWithProperty";
import { pseudoDescriptors } from "./pseudoDescriptors";
function expandStylesAndRemoveNullishValues(style) {
  const res = {};
  for (let key in style) {
    const valIn = style[key];
    if (valIn == null)
      continue;
    if (key in pseudoDescriptors) {
      res[key] = expandStylesAndRemoveNullishValues(valIn);
      continue;
    }
    const val = normalizeValueWithProperty(valIn, key);
    const out = expandStyle(key, val);
    if (out) {
      Object.assign(res, Object.fromEntries(out));
    } else {
      res[key] = val;
    }
  }
  fixStyles(res);
  return res;
}
function fixStyles(style) {
  if (process.env.TAMAGUI_TARGET === "native") {
    if ("elevationAndroid" in style) {
      style["elevation"] = style.elevationAndroid;
      delete style.elevationAndroid;
    }
  }
  if (style.shadowRadius || style.shadowColor || style.shadowOpacity || style.shadowOffset) {
    Object.assign(style, normalizeShadow(style));
  }
  for (const key in borderDefaults) {
    if (key in style && !style[borderDefaults[key]]) {
      style[borderDefaults[key]] = "solid";
    }
  }
}
const nativeStyle = isWeb ? null : "borderStyle";
const borderDefaults = {
  borderWidth: "borderStyle",
  borderBottomWidth: nativeStyle || "borderBottomStyle",
  borderTopWidth: nativeStyle || "borderTopStyle",
  borderLeftWidth: nativeStyle || "borderLeftStyle",
  borderRightWidth: nativeStyle || "borderRightStyle"
};
export {
  expandStylesAndRemoveNullishValues,
  fixStyles
};
//# sourceMappingURL=expandStyles.js.map
