import { jsx } from "react/jsx-runtime";
import { isClient, isServer, isWeb } from "@tamagui/constants";
import * as React from "react";
import { ComponentContext } from "../contexts/ComponentContext";
import { useMediaListeners } from "../hooks/useMedia";
import { ThemeProvider } from "./ThemeProvider";
function TamaguiProvider({
  children,
  disableInjectCSS,
  config,
  ...themePropsProvider
}) {
  if (!(isWeb && isServer)) {
    useMediaListeners(config);
  }
  if (isClient) {
    React.useLayoutEffect(() => {
      if (document.documentElement.classList.contains("t_unmounted")) {
        document.documentElement.classList.remove("t_unmounted");
      }
      if (disableInjectCSS)
        return;
      const style = document.createElement("style");
      style.appendChild(document.createTextNode(config.getCSS()));
      document.head.appendChild(style);
      return () => {
        document.head.removeChild(style);
      };
    }, [config, disableInjectCSS]);
  }
  return /* @__PURE__ */ jsx(ComponentContext.Provider, { animationDriver: config.animations, children: /* @__PURE__ */ jsx(
    ThemeProvider,
    {
      themeClassNameOnRoot: config.themeClassNameOnRoot,
      disableRootThemeClass: config.disableRootThemeClass,
      ...themePropsProvider,
      defaultTheme: themePropsProvider.defaultTheme ?? Object.keys(config.themes)[0],
      children
    }
  ) });
}
export {
  TamaguiProvider
};
//# sourceMappingURL=TamaguiProvider.js.map
