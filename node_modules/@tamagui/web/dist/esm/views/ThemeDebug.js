import { Fragment, jsx, jsxs } from "react/jsx-runtime";
import { useForceUpdate } from "@tamagui/use-force-update";
import { useEffect, useId, useState } from "react";
import { createPortal } from "react-dom";
let node;
function ThemeDebug({
  themeState,
  themeProps,
  children
}) {
  var _a, _b, _c, _d, _e, _f;
  if (themeProps["disable-child-theme"]) {
    return children;
  }
  if (process.env.NODE_ENV === "development") {
    const [onChangeCount, setOnChangeCount] = useState(0);
    const rerender = useForceUpdate();
    const id = useId();
    if (process.env.NODE_ENV === "development" && typeof document !== "undefined") {
      if (!node) {
        node = document.createElement("div");
        node.style.height = "200px";
        node.style.overflowY = "scroll";
        node.style.position = "fixed";
        node.style.zIndex = 1e7;
        node.style.bottom = "30px";
        node.style.left = "30px";
        node.style.right = "30px";
        node.style.display = "flex";
        node.style.border = "1px solid #888";
        node.style.flexDirection = "row";
        node.style.background = "var(--background)";
        document.body.appendChild(node);
      }
    }
    useEffect(() => {
      var _a2, _b2;
      (_b2 = (_a2 = themeState.themeManager) == null ? void 0 : _a2.parentManager) == null ? void 0 : _b2.onChangeTheme((name, manager) => {
        var _a3, _b3, _c2;
        setOnChangeCount((p) => ++p);
        console.warn(
          `theme changed for ${(_a3 = themeState.themeManager) == null ? void 0 : _a3.id} from parent ${(_c2 = (_b3 = themeState.themeManager) == null ? void 0 : _b3.parentManager) == null ? void 0 : _c2.id} to new name`,
          name
        );
      });
    }, [themeState.themeManager]);
    useEffect(() => {
      const tm = setInterval(rerender, 1e3);
      return () => clearTimeout(tm);
    }, []);
    return /* @__PURE__ */ jsxs(Fragment, { children: [
      createPortal(
        /* @__PURE__ */ jsxs(
          "code",
          {
            style: {
              whiteSpace: "pre"
            },
            children: [
              "<Theme ",
              id,
              " />\xA0",
              JSON.stringify(
                {
                  name: themeState.state.name,
                  className: themeState.state.className,
                  inverse: themeProps.inverse,
                  forceClassName: themeProps.forceClassName,
                  parent: (_a = themeState.themeManager) == null ? void 0 : _a.state.parentName,
                  id: (_b = themeState.themeManager) == null ? void 0 : _b.id,
                  parentId: (_d = (_c = themeState.themeManager) == null ? void 0 : _c.parentManager) == null ? void 0 : _d.id,
                  isNew: themeState.isNewTheme,
                  onChangeCount,
                  listening: [...((_e = themeState.themeManager) == null ? void 0 : _e["_listeningIds"]) || []].join(
                    ","
                  ),
                  _numChangeEventsSent: (_f = themeState.themeManager) == null ? void 0 : _f["_numChangeEventsSent"]
                },
                null,
                2
              )
            ]
          }
        ),
        node
      ),
      /* @__PURE__ */ jsx("div", { style: { color: "red" }, children: id }),
      children
    ] });
  }
  return children;
}
export {
  ThemeDebug
};
//# sourceMappingURL=ThemeDebug.js.map
