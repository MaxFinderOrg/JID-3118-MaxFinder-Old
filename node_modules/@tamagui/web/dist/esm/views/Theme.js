import { jsx } from "react/jsx-runtime";
import { isWeb } from "@tamagui/constants";
import React, {
  Children,
  cloneElement,
  forwardRef,
  isValidElement,
  useMemo,
  useRef
} from "react";
import { variableToString } from "../createVariable";
import { ThemeManagerContext } from "../helpers/ThemeManagerContext";
import { useChangeThemeEffect } from "../hooks/useTheme";
import { ThemeDebug } from "./ThemeDebug";
const Theme = forwardRef(function Theme2(props, ref) {
  if (props.disable) {
    return props.children;
  }
  const isRoot = !!props["_isRoot"];
  const disableDirectChildTheme = props["disable-child-theme"];
  const themeState = useChangeThemeEffect(props, isRoot);
  const children = useMemo(() => {
    let children2 = disableDirectChildTheme ? Children.map(
      props.children,
      (child) => cloneElement(child, { ["data-disable-theme"]: true })
    ) : props.children;
    if (ref) {
      try {
        React.Children.only(children2);
        children2 = cloneElement(children2, { ref });
      } catch {
      }
    }
    if (process.env.NODE_ENV === "development") {
      if (props.debug === "visualize") {
        children2 = /* @__PURE__ */ jsx(ThemeDebug, { themeState, themeProps: props, children: children2 });
      }
    }
    return children2;
  }, [props.children, disableDirectChildTheme]);
  return useThemedChildren(themeState, children, props, isRoot);
});
Theme["avoidForwardRef"] = true;
function useThemedChildren(themeState, children, props, isRoot = false) {
  const { themeManager, isNewTheme } = themeState;
  const { shallow, forceClassName } = props;
  const hasEverThemed = useRef(false);
  if (isNewTheme) {
    hasEverThemed.current = true;
  }
  const shouldRenderChildrenWithTheme = isNewTheme || props.inverse || hasEverThemed.current || forceClassName || isRoot;
  if (!shouldRenderChildrenWithTheme) {
    return children;
  }
  let next = children;
  if (shallow && themeManager) {
    next = Children.toArray(children).map((child) => {
      return isValidElement(child) ? cloneElement(
        child,
        void 0,
        /* @__PURE__ */ jsx(Theme, { name: themeManager.state.parentName, children: child.props.children })
      ) : child;
    });
  }
  const elementsWithContext = /* @__PURE__ */ jsx(ThemeManagerContext.Provider, { value: themeManager, children: next });
  if (forceClassName === false) {
    return elementsWithContext;
  }
  if (isWeb) {
    return wrapThemeElements({
      children: elementsWithContext,
      themeState,
      forceClassName,
      isRoot
    });
  }
  return elementsWithContext;
}
function wrapThemeElements({
  children,
  themeState,
  forceClassName,
  isRoot
}) {
  if (isRoot && forceClassName === false) {
    return children;
  }
  const inverse = themeState.state.inverse;
  if (!themeState.isNewTheme && !inverse && !forceClassName) {
    return /* @__PURE__ */ jsx("span", { className: "_dsp_contents is_Theme", children });
  }
  const themeColor = themeState.state.theme && themeState.isNewTheme ? variableToString(themeState.state.theme.color) : "";
  const colorStyle = themeColor ? {
    color: themeColor
  } : void 0;
  let className = themeState.state.className || "";
  if (isRoot) {
    className = className.replace("t_sub_theme", "");
  }
  let themedChildren = /* @__PURE__ */ jsx("span", { className: `${className} _dsp_contents is_Theme`, style: colorStyle, children });
  if (inverse != null || forceClassName) {
    themedChildren = /* @__PURE__ */ jsx(
      "span",
      {
        className: `${themeState.state.name.startsWith("light") ? "t_light" : themeState.state.name.startsWith("dark") ? "t_dark" : ""} _dsp_contents ${inverse ? "is_inversed" : ""}`,
        children: themedChildren
      }
    );
  }
  return themedChildren;
}
export {
  Theme,
  useThemedChildren,
  wrapThemeElements
};
//# sourceMappingURL=Theme.js.map
