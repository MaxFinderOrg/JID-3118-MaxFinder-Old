import { Fragment, jsx } from "react/jsx-runtime";
import { composeRefs } from "@tamagui/compose-refs";
import { isWeb } from "@tamagui/constants";
import { composeEventHandlers } from "@tamagui/helpers";
import { Children, cloneElement, forwardRef, isValidElement } from "react";
const Slot = forwardRef(function Slot2(props, forwardedRef) {
  const { children, ...slotProps } = props;
  if (isValidElement(children)) {
    const mergedProps = mergeSlotProps(children, slotProps);
    return cloneElement(
      children,
      children.type["avoidForwardRef"] ? mergedProps : {
        ...mergedProps,
        ref: composeRefs(forwardedRef, children.ref)
      }
    );
  }
  return Children.count(children) > 1 ? Children.only(null) : null;
});
const Slottable = ({ children }) => {
  return /* @__PURE__ */ jsx(Fragment, { children });
};
const pressMap = isWeb ? {
  onPress: "onClick",
  onPressOut: "onMouseUp",
  onPressIn: "onMouseDown"
} : {};
function mergeSlotProps(child, slotProps) {
  const childProps = child.props;
  const overrideProps = { ...childProps };
  const isHTMLChild = typeof child.type === "string";
  if (isHTMLChild) {
    for (const key in pressMap) {
      if (key in slotProps) {
        slotProps[pressMap[key]] = slotProps[key];
        delete slotProps[key];
      }
    }
  }
  for (let propName in childProps) {
    const slotPropValue = slotProps[propName];
    const childPropValue = childProps[propName];
    if (isHTMLChild && propName in pressMap) {
      propName = pressMap[propName];
      delete overrideProps[propName];
    }
    const isHandler = handleRegex.test(propName);
    if (isHandler) {
      overrideProps[propName] = composeEventHandlers(childPropValue, slotPropValue);
    } else if (propName === "style") {
      overrideProps[propName] = { ...slotPropValue, ...childPropValue };
    } else if (propName === "className") {
      overrideProps[propName] = [slotPropValue, childPropValue].filter(Boolean).join(" ");
    }
  }
  return { ...slotProps, ...overrideProps };
}
const handleRegex = /^on[A-Z]/;
export {
  Slot,
  Slottable
};
//# sourceMappingURL=Slot.js.map
