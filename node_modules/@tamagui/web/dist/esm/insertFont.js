import { setConfigFont } from "./config";
import { createFont } from "./createFont";
import { createVariables } from "./createVariables";
import { registerCSSVariable, variableToCSS } from "./helpers/registerCSSVariable";
function insertFont(name, fontIn) {
  const font = createFont(fontIn);
  const tokened = createVariables(font, name);
  const parsed = parseFont(tokened);
  if (process.env.TAMAGUI_TARGET === "web" && typeof document !== "undefined") {
    const fontVars = registerFontVariables(parsed);
    const style = document.createElement("style");
    style.innerText = `:root .font_${name} {${fontVars.join(";")}}`;
    style.setAttribute("data-tamagui-font", name);
    document.head.appendChild(style);
  }
  setConfigFont(name, tokened, parsed);
  return parsed;
}
const updateFont = insertFont;
function parseFont(definition) {
  var _a;
  const parsed = {};
  for (const attrKey in definition) {
    const attr = definition[attrKey];
    if (attrKey === "family" || attrKey === "face") {
      parsed[attrKey] = attr;
    } else {
      parsed[attrKey] = {};
      for (const key in attr) {
        let val = attr[key];
        if (((_a = val.val) == null ? void 0 : _a[0]) === "$") {
          val = val.val;
        }
        parsed[attrKey][`$${key}`] = val;
      }
    }
  }
  return parsed;
}
function registerFontVariables(parsedFont) {
  const response = [];
  for (const fkey in parsedFont) {
    if (fkey === "face")
      continue;
    if (fkey === "family") {
      const val = parsedFont[fkey];
      registerCSSVariable(val);
      response.push(variableToCSS(val));
    } else {
      for (const fskey in parsedFont[fkey]) {
        const fval = parsedFont[fkey][fskey];
        if (typeof fval === "string") {
        } else {
          const val = parsedFont[fkey][fskey];
          registerCSSVariable(val);
          response.push(variableToCSS(val));
        }
      }
    }
  }
  return response;
}
export {
  insertFont,
  parseFont,
  registerFontVariables,
  updateFont
};
//# sourceMappingURL=insertFont.js.map
