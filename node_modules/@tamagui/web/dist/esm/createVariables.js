import { simpleHash } from "@tamagui/helpers";
import { createVariable, isVariable } from "./createVariable";
const cache = /* @__PURE__ */ new WeakMap();
const createVariables = (tokens, parentPath = "", isFont = false) => {
  if (cache.has(tokens))
    return tokens;
  const res = {};
  let i = 0;
  for (let keyIn in tokens) {
    i++;
    const val = tokens[keyIn];
    const isPrefixed = keyIn[0] === "$";
    const keyWithPrefix = isPrefixed ? keyIn : `$${keyIn}`;
    const key = isPrefixed ? keyWithPrefix.slice(1) : keyIn;
    if (isVariable(val)) {
      res[key] = val;
      continue;
    }
    const niceKey = simpleHash(key);
    let name = isFont ? niceKey.slice(0, 2) : i;
    name = parentPath ? `${parentPath}-${name}` : niceKey;
    if (val && typeof val === "object") {
      res[key] = createVariables(
        tokens[key],
        name,
        false
        /* note: don't pass isFont down, we want to avoid it past the first level */
      );
      continue;
    }
    const finalValue = isVariable(val) ? val : createVariable({ val, name, key: keyWithPrefix });
    res[key] = finalValue;
  }
  cache.set(res, true);
  return res;
};
export {
  createVariables
};
//# sourceMappingURL=createVariables.js.map
