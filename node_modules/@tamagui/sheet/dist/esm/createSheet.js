import { Fragment, jsx, jsxs } from "react/jsx-runtime";
import { useComposedRefs } from "@tamagui/compose-refs";
import {
  Stack,
  composeEventHandlers,
  useDidFinishSSR,
  useIsomorphicLayoutEffect,
  withStaticProperties
} from "@tamagui/core";
import { RemoveScroll } from "@tamagui/remove-scroll";
import {
  forwardRef,
  memo,
  useCallback,
  useMemo
} from "react";
import { Platform } from "react-native";
import { SHEET_HANDLE_NAME, SHEET_NAME, SHEET_OVERLAY_NAME } from "./constants";
import { getNativeSheet } from "./nativeSheet";
import { useSheetContext } from "./SheetContext";
import { SheetImplementationCustom } from "./SheetImplementationCustom";
import { SheetScrollView } from "./SheetScrollView";
import { useSheetController } from "./useSheetController";
import { useSheetOffscreenSize } from "./useSheetOffscreenSize";
function createSheet({ Handle, Frame, Overlay }) {
  const SheetHandle = Handle.extractable(
    ({ __scopeSheet, ...props }) => {
      const context = useSheetContext(SHEET_HANDLE_NAME, __scopeSheet);
      if (context.onlyShowFrame) {
        return null;
      }
      return (
        // @ts-ignore
        /* @__PURE__ */ jsx(
          Handle,
          {
            onPress: () => {
              const max = context.snapPoints.length + (context.dismissOnSnapToBottom ? -1 : 0);
              const nextPos = (context.position + 1) % max;
              context.setPosition(nextPos);
            },
            open: context.open,
            ...props
          }
        )
      );
    }
  );
  const SheetOverlay = Overlay.extractable(
    memo((propsIn) => {
      const { __scopeSheet, ...props } = propsIn;
      const context = useSheetContext(SHEET_OVERLAY_NAME, __scopeSheet);
      const element = useMemo(
        () => (
          // @ts-ignore
          /* @__PURE__ */ jsx(
            Overlay,
            {
              ...props,
              onPress: composeEventHandlers(
                props.onPress,
                context.dismissOnOverlayPress ? () => {
                  context.setOpen(false);
                } : void 0
              )
            }
          )
        ),
        [props.onPress, context.dismissOnOverlayPress]
      );
      useIsomorphicLayoutEffect(() => {
        var _a;
        (_a = context.onOverlayComponent) == null ? void 0 : _a.call(context, element);
      }, [element]);
      if (context.onlyShowFrame) {
        return null;
      }
      return null;
    })
  );
  const SheetFrame = Frame.extractable(
    forwardRef(
      ({
        __scopeSheet,
        children,
        ...props
      }, forwardedRef) => {
        const context = useSheetContext(SHEET_NAME, __scopeSheet);
        const { removeScrollEnabled, frameSize, contentRef } = context;
        const composedContentRef = useComposedRefs(forwardedRef, contentRef);
        const offscreenSize = useSheetOffscreenSize(context);
        const handleLayoutChange = useCallback((e) => {
          var _a;
          const next = (_a = e.nativeEvent) == null ? void 0 : _a.layout.height;
          if (!next)
            return;
          context.setFrameSize(next);
        }, []);
        const sheetContents = useMemo(() => {
          return (
            // @ts-ignore
            /* @__PURE__ */ jsxs(
              Frame,
              {
                ref: composedContentRef,
                height: context.hasFit ? void 0 : frameSize,
                onLayout: context.hasFit ? handleLayoutChange : void 0,
                ...props,
                children: [
                  children,
                  /* @__PURE__ */ jsx(Stack, { "data-sheet-offscreen-pad": true, height: offscreenSize, width: "100%" })
                ]
              }
            )
          );
        }, [props, frameSize, offscreenSize]);
        return /* @__PURE__ */ jsxs(Fragment, { children: [
          /* @__PURE__ */ jsx(
            RemoveScroll,
            {
              forwardProps: true,
              enabled: removeScrollEnabled,
              allowPinchZoom: true,
              shards: [contentRef],
              removeScrollBar: false,
              children: sheetContents
            }
          ),
          !props.disableHideBottomOverflow && // @ts-ignore
          /* @__PURE__ */ jsx(
            Frame,
            {
              ...props,
              componentName: "SheetCover",
              children: null,
              position: "absolute",
              bottom: "-50%",
              zIndex: -1,
              height: context.frameSize,
              left: 0,
              right: 0,
              borderWidth: 0,
              borderRadius: 0,
              shadowOpacity: 0
            }
          )
        ] });
      }
    )
  );
  const Sheet = forwardRef(function Sheet2(props, ref) {
    const hydrated = useDidFinishSSR();
    const { isShowingNonSheet } = useSheetController();
    let SheetImplementation = SheetImplementationCustom;
    if (props.native && Platform.OS === "ios") {
      if (process.env.TAMAGUI_TARGET === "native") {
        const impl = getNativeSheet("ios");
        if (impl) {
          SheetImplementation = impl;
        }
      }
    }
    if (isShowingNonSheet || !hydrated) {
      return null;
    }
    return /* @__PURE__ */ jsx(SheetImplementation, { ref, ...props });
  });
  const components = {
    Frame: SheetFrame,
    Overlay: SheetOverlay,
    Handle: SheetHandle,
    ScrollView: SheetScrollView
  };
  const Controlled = withStaticProperties(Sheet, components);
  return withStaticProperties(Sheet, {
    ...components,
    Controlled
  });
}
export {
  createSheet
};
//# sourceMappingURL=createSheet.js.map
