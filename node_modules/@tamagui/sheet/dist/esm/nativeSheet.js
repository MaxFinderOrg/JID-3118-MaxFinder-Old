import { Fragment, jsx, jsxs } from "react/jsx-runtime";
import { YStack } from "@tamagui/stacks";
import { useEffect, useRef } from "react";
import { View } from "react-native";
import { SheetProvider } from "./SheetContext";
import { useSheetOpenState } from "./useSheetOpenState";
import { useSheetProviderProps } from "./useSheetProviderProps";
const nativeSheets = {
  ios: null
};
function getNativeSheet(platform) {
  return nativeSheets[platform];
}
function setupNativeSheet(platform, Implementation) {
  if (platform === "ios") {
    nativeSheets[platform] = (props) => {
      const state = useSheetOpenState(props);
      const providerProps = useSheetProviderProps(props, state);
      const { open, setOpen } = state;
      const ref = useRef();
      useEffect(() => {
        var _a;
        (_a = ref.current) == null ? void 0 : _a.setVisibility(open);
      }, [open]);
      return /* @__PURE__ */ jsx(Fragment, { children: /* @__PURE__ */ jsxs(SheetProvider, { ...providerProps, onlyShowFrame: true, children: [
        /* @__PURE__ */ jsx(Implementation, { ref, onModalDismiss: () => setOpen(false), children: /* @__PURE__ */ jsx(View, { style: { flex: 1 }, children: props.children }) }),
        /* @__PURE__ */ jsx(
          YStack,
          {
            position: "absolute",
            opacity: 0,
            pointerEvents: "none",
            width: 0,
            height: 0,
            children: props.children
          }
        )
      ] }) });
    };
  }
}
export {
  getNativeSheet,
  setupNativeSheet
};
//# sourceMappingURL=nativeSheet.js.map
