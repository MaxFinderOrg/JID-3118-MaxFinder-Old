import { useComposedRefs } from "@tamagui/compose-refs";
import {
  Stack,
  mergeEvent,
  useDidFinishSSR,
  useIsomorphicLayoutEffect,
  withStaticProperties
} from "@tamagui/core";
import { RemoveScroll } from "@tamagui/remove-scroll";
import { forwardRef, memo, useMemo } from "react";
import { Platform } from "react-native";
import { SHEET_HANDLE_NAME, SHEET_NAME, SHEET_OVERLAY_NAME } from "./constants";
import { getNativeSheet } from "./nativeSheet";
import { useSheetContext } from "./SheetContext";
import { SheetImplementationCustom } from "./SheetImplementationCustom";
import { SheetScrollView } from "./SheetScrollView";
import { useSheetController } from "./useSheetController";
import { useSheetOffscreenSize } from "./useSheetOffscreenSize";
function createSheet({ Handle, Frame, Overlay }) {
  const SheetHandle = Handle.extractable(
    ({ __scopeSheet, ...props }) => {
      const context = useSheetContext(SHEET_HANDLE_NAME, __scopeSheet);
      if (context.onlyShowFrame) {
        return null;
      }
      return (
        // @ts-ignore
        <Handle
          onPress={() => {
            const max = context.snapPoints.length + (context.dismissOnSnapToBottom ? -1 : 0);
            const nextPos = (context.position + 1) % max;
            context.setPosition(nextPos);
          }}
          open={context.open}
          {...props}
        />
      );
    }
  );
  const SheetOverlay = Overlay.extractable(
    memo((propsIn) => {
      const { __scopeSheet, ...props } = propsIn;
      const context = useSheetContext(SHEET_OVERLAY_NAME, __scopeSheet);
      const element = useMemo(
        () => (
          // @ts-ignore
          <Overlay
            open={context.open && !context.hidden}
            {...props}
            onPress={mergeEvent(
              props.onPress,
              context.dismissOnOverlayPress ? () => {
                context.setOpen(false);
              } : void 0
            )}
          />
        ),
        [context.open, propsIn, context.hidden, context.dismissOnOverlayPress]
      );
      useIsomorphicLayoutEffect(() => {
        context.onOverlayComponent?.(element);
      }, [element]);
      if (context.onlyShowFrame) {
        return null;
      }
      return null;
    })
  );
  const SheetFrame = Frame.extractable(
    forwardRef(
      ({
        __scopeSheet,
        children,
        ...props
      }, forwardedRef) => {
        const context = useSheetContext(SHEET_NAME, __scopeSheet);
        const { removeScrollEnabled, frameSize, contentRef } = context;
        const composedContentRef = useComposedRefs(forwardedRef, contentRef);
        const offscreenSize = useSheetOffscreenSize(context);
        const sheetContents = useMemo(() => {
          return (
            // @ts-ignore
            <Frame ref={composedContentRef} height={frameSize} {...props}>
              {children}
              <Stack data-sheet-offscreen-pad height={offscreenSize} width="100%" />
            </Frame>
          );
        }, [props, frameSize, offscreenSize]);
        return <>
          <RemoveScroll
            forwardProps
            enabled={removeScrollEnabled}
            allowPinchZoom
            shards={[contentRef]}
            removeScrollBar={false}
          >{sheetContents}</RemoveScroll>
          {
            /* below frame hide when bouncing past 100% */
          }
          {!props.disableHideBottomOverflow && // @ts-ignore
          <Frame
            {...props}
            componentName="SheetCover"
            children={null}
            position="absolute"
            bottom="-50%"
            zIndex={-1}
            height={context.frameSize}
            left={0}
            right={0}
            borderWidth={0}
            borderRadius={0}
            shadowOpacity={0}
          />}
        </>;
      }
    )
  );
  const Sheet = forwardRef(function Sheet2(props, ref) {
    const hydrated = useDidFinishSSR();
    const { isShowingNonSheet } = useSheetController();
    let SheetImplementation = SheetImplementationCustom;
    if (props.native && Platform.OS === "ios") {
      if (process.env.TAMAGUI_TARGET === "native") {
        const impl = getNativeSheet("ios");
        if (impl) {
          SheetImplementation = impl;
        }
      }
    }
    if (isShowingNonSheet || !hydrated) {
      return null;
    }
    return <SheetImplementation ref={ref} {...props} />;
  });
  const components = {
    Frame: SheetFrame,
    Overlay: SheetOverlay,
    Handle: SheetHandle,
    ScrollView: SheetScrollView
  };
  const Controlled = withStaticProperties(Sheet, components);
  return withStaticProperties(Sheet, {
    ...components,
    Controlled
  });
}
export {
  createSheet
};
//# sourceMappingURL=createSheet.mjs.map
