"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var useSheetOffscreenSize_exports = {};
__export(useSheetOffscreenSize_exports, {
  useSheetOffscreenSize: () => useSheetOffscreenSize
});
module.exports = __toCommonJS(useSheetOffscreenSize_exports);
const useSheetOffscreenSize = ({
  snapPoints,
  position,
  screenSize,
  frameSize,
  snapPointsMode
}) => {
  if (snapPointsMode === "fit") {
    return 0;
  }
  if (snapPointsMode === "constant") {
    const maxSize2 = Number(snapPoints[0]);
    const currentSize2 = Number(snapPoints[position] ?? 0);
    const offscreenSize2 = maxSize2 - currentSize2;
    return offscreenSize2;
  }
  if (snapPointsMode === "percent") {
    const maxPercentOpened = Number(snapPoints[0]) / 100;
    const percentOpened = Number(snapPoints[position] ?? 0) / 100;
    const percentHidden = 1 - maxPercentOpened - percentOpened;
    const offscreenSize2 = percentHidden * screenSize;
    return offscreenSize2;
  }
  const maxSnapPoint = snapPoints[0];
  const maxSize = maxSnapPoint === "fit" ? frameSize : typeof maxSnapPoint === "string" ? Number(maxSnapPoint.slice(0, -1)) / 100 * screenSize : maxSnapPoint;
  const currentSnapPoint = snapPoints[position] ?? 0;
  const currentSize = currentSnapPoint === "fit" ? frameSize : typeof currentSnapPoint === "string" ? Number(currentSnapPoint.slice(0, -1)) / 100 * screenSize : currentSnapPoint;
  const offscreenSize = maxSize - currentSize;
  if (Number.isNaN(offscreenSize)) {
    return 0;
  }
  return offscreenSize;
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  useSheetOffscreenSize
});
//# sourceMappingURL=useSheetOffscreenSize.js.map
