"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var useSheetSnapPoints_exports = {};
__export(useSheetSnapPoints_exports, {
  useSheetSnapPoints: () => useSheetSnapPoints
});
module.exports = __toCommonJS(useSheetSnapPoints_exports);
var import_react = require("react");
const useSheetSnapPoints = ({
  position,
  setPosition,
  dismissOnSnapToBottom,
  snapPoints,
  setPositionImmediate,
  open,
  frameSize
}) => {
  if (process.env.NODE_ENV === "development") {
    if (snapPoints.some((p) => p < 0 || p > 100)) {
      console.warn(
        "\u26A0\uFE0F Invalid snapPoint given, snapPoints must be between 0 and 100, equal to percent height of frame"
      );
    }
  }
  if (open && dismissOnSnapToBottom && position === snapPoints.length - 1) {
    setPositionImmediate(0);
  }
  const shouldSetPositionOpen = open && position < 0;
  (0, import_react.useEffect)(() => {
    if (shouldSetPositionOpen) {
      setPosition(0);
    }
  }, [setPosition, shouldSetPositionOpen]);
  const maxSnapPoint = snapPoints.reduce((prev, cur) => Math.max(prev, cur));
  const screenSize = frameSize / (maxSnapPoint / 100);
  const positions = (0, import_react.useMemo)(
    () => snapPoints.map((point) => getPercentSize(point, screenSize)),
    [frameSize, snapPoints]
  );
  return {
    positions,
    maxSnapPoint,
    screenSize
  };
};
function getPercentSize(point, screenSize) {
  if (!screenSize)
    return 0;
  if (point === void 0) {
    console.warn("No snapPoint");
    return 0;
  }
  const pct = point / 100;
  const next = Math.round(screenSize - pct * screenSize);
  return next;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  useSheetSnapPoints
});
//# sourceMappingURL=useSheetSnapPoints.js.map
