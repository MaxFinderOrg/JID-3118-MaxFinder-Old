"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var SheetScrollView_exports = {};
__export(SheetScrollView_exports, {
  SheetScrollView: () => SheetScrollView
});
module.exports = __toCommonJS(SheetScrollView_exports);
var import_jsx_runtime = require("react/jsx-runtime");
var import_core = require("@tamagui/core");
var import_scroll_view = require("@tamagui/scroll-view");
var import_react = require("react");
var import_SheetContext = require("./SheetContext");
const SHEET_SCROLL_VIEW_NAME = "SheetScrollView";
const SheetScrollView = (0, import_react.forwardRef)(
  ({ __scopeSheet, children, ...props }, ref) => {
    const context = (0, import_SheetContext.useSheetContext)(SHEET_SCROLL_VIEW_NAME, __scopeSheet);
    const { scrollBridge } = context;
    const scrollRef = (0, import_react.useRef)(null);
    const state = (0, import_react.useRef)({
      lastPageY: 0,
      dragAt: 0,
      dys: [],
      // store a few recent dys to get velocity on release
      isScrolling: false,
      isDragging: false
    });
    const release = () => {
      if (!state.current.isDragging) {
        return;
      }
      state.current.isDragging = false;
      scrollBridge.scrollStartY = -1;
      state.current.isScrolling = false;
      let vy = 0;
      if (state.current.dys.length) {
        const recentDys = state.current.dys.slice(-10);
        const dist = recentDys.length ? recentDys.reduce((a, b) => a + b, 0) : 0;
        const avgDy = dist / recentDys.length;
        vy = avgDy * 0.04;
      }
      state.current.dys = [];
      scrollBridge.release({
        dragAt: state.current.dragAt,
        vy
      });
    };
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      import_scroll_view.ScrollView,
      {
        ref: (0, import_core.composeRefs)(scrollRef, ref),
        flex: 1,
        scrollEventThrottle: 8,
        onScroll: (e) => {
          const { y } = e.nativeEvent.contentOffset;
          scrollBridge.y = y;
          if (y > 0) {
            scrollBridge.scrollStartY = -1;
          }
        },
        onStartShouldSetResponder: () => {
          scrollBridge.scrollStartY = -1;
          state.current.isDragging = true;
          return true;
        },
        onMoveShouldSetResponder: () => false,
        onResponderRelease: release,
        className: "_ovs-contain",
        ...props,
        children: (0, import_react.useMemo)(() => children, [children])
      }
    );
  }
);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  SheetScrollView
});
//# sourceMappingURL=SheetScrollView.js.map
