"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var Label_exports = {};
__export(Label_exports, {
  Label: () => Label,
  LabelFrame: () => LabelFrame,
  useLabelContext: () => useLabelContext
});
module.exports = __toCommonJS(Label_exports);
var import_jsx_runtime = require("react/jsx-runtime");
var import_compose_refs = require("@tamagui/compose-refs");
var import_create_context = require("@tamagui/create-context");
var import_focusable = require("@tamagui/focusable");
var import_get_button_sized = require("@tamagui/get-button-sized");
var import_get_font_sized = require("@tamagui/get-font-sized");
var import_text = require("@tamagui/text");
var import_web = require("@tamagui/web");
var React = __toESM(require("react"));
const NAME = "Label";
const [LabelProvider, useLabelContextImpl] = (0, import_create_context.createContext)(NAME, {
  id: void 0,
  controlRef: { current: null }
});
const LabelFrame = (0, import_web.styled)(import_text.SizableText, {
  name: "Label",
  tag: "label",
  variants: {
    unstyled: {
      false: {
        size: "$true",
        color: "$color",
        backgroundColor: "transparent",
        display: "flex",
        alignItems: "center",
        userSelect: "none",
        cursor: "default",
        pressStyle: {
          color: "$colorPress"
        }
      }
    },
    size: {
      "...size": (val, extras) => {
        const buttonStyle = (0, import_get_button_sized.getButtonSized)(val, extras);
        const buttonHeight = buttonStyle == null ? void 0 : buttonStyle.height;
        const fontStyle = (0, import_get_font_sized.getFontSized)(val, extras);
        return {
          ...fontStyle,
          lineHeight: buttonHeight ? extras.tokens.size[buttonHeight] : void 0
        };
      }
    }
  },
  defaultVariants: {
    unstyled: false
  }
});
const LabelComponent = React.forwardRef(
  (props, forwardedRef) => {
    const { htmlFor, id: idProp, ...labelProps } = props;
    const controlRef = React.useRef(null);
    const ref = React.useRef(null);
    const composedRefs = (0, import_compose_refs.useComposedRefs)(forwardedRef, ref);
    const backupId = React.useId();
    const id = idProp ?? backupId;
    if (import_web.isWeb) {
      React.useEffect(() => {
        if (htmlFor) {
          const element = document.getElementById(htmlFor);
          const label = ref.current;
          if (label && element) {
            const getAriaLabel = () => element.getAttribute("aria-labelledby");
            const ariaLabelledBy = [id, getAriaLabel()].filter(Boolean).join(" ");
            element.setAttribute("aria-labelledby", ariaLabelledBy);
            controlRef.current = element;
            return () => {
              var _a;
              if (!id)
                return;
              const ariaLabelledBy2 = (_a = getAriaLabel()) == null ? void 0 : _a.replace(id, "");
              if (ariaLabelledBy2 === "") {
                element.removeAttribute("aria-labelledby");
              } else if (ariaLabelledBy2) {
                element.setAttribute("aria-labelledby", ariaLabelledBy2);
              }
            };
          }
        }
      }, [id, htmlFor]);
    }
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(LabelProvider, { id, controlRef, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      LabelFrame,
      {
        id,
        htmlFor,
        ...labelProps,
        ref: composedRefs,
        onMouseDown: (event) => {
          var _a;
          (_a = props.onMouseDown) == null ? void 0 : _a.call(props, event);
          if (!event.defaultPrevented && event.detail > 1) {
            event.preventDefault();
          }
        },
        onPress: (event) => {
          var _a;
          (_a = props.onPress) == null ? void 0 : _a.call(props, event);
          if (import_web.isWeb) {
            if (htmlFor || !controlRef.current || event.defaultPrevented)
              return;
            const isClickingControl = controlRef.current.contains(
              event.target
            );
            const isUserClick = event.isTrusted === true;
            if (!isClickingControl && isUserClick) {
              controlRef.current.click();
              controlRef.current.focus();
            }
          } else {
            if (props.htmlFor) {
              (0, import_focusable.focusFocusable)(props.htmlFor);
            }
          }
        }
      }
    ) });
  }
);
LabelComponent.displayName = NAME;
const Label = LabelFrame.extractable((0, import_web.themeable)(LabelComponent), {
  neverFlatten: true
});
const useLabelContext = (element) => {
  const context = useLabelContextImpl("LabelConsumer");
  const { controlRef } = context;
  React.useEffect(() => {
    if (element)
      controlRef.current = element;
  }, [element, controlRef]);
  return context.id;
};
const Root = Label;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Label,
  LabelFrame,
  useLabelContext
});
//# sourceMappingURL=Label.js.map
