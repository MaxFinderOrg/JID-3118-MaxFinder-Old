import { jsx } from "react/jsx-runtime";
import {
  getConfig,
  getExpandedShorthands,
  getTokens,
  getVariableValue,
  isTamaguiElement,
  mergeProps,
  spacedChildren,
  styled,
  useProps,
  withStaticProperties
} from "@tamagui/core";
import { createContextScope } from "@tamagui/create-context";
import { ThemeableStack } from "@tamagui/stacks";
import { useControllableState } from "@tamagui/use-controllable-state";
import React, { Children, forwardRef, isValidElement } from "react";
import { ScrollView } from "react-native";
import { useIndex, useIndexedChildren } from "reforest";
const GROUP_NAME = "Group";
const [createGroupContext, createGroupScope] = createContextScope(GROUP_NAME);
const [GroupProvider, useGroupContext] = createGroupContext(GROUP_NAME);
const GroupFrame = styled(ThemeableStack, {
  name: "GroupFrame",
  variants: {
    unstyled: {
      false: {
        size: "$true",
        y: 0
      }
    },
    size: (val, { tokens }) => {
      const borderRadius = tokens.radius[val] ?? val ?? tokens.radius["$true"];
      return {
        borderRadius
      };
    }
  },
  defaultVariants: {
    unstyled: false
  }
});
function createGroup(verticalDefault) {
  return withStaticProperties(
    forwardRef((props, ref) => {
      const activeProps = useProps(props);
      const {
        __scopeGroup,
        children: childrenProp,
        space,
        size = "$true",
        spaceDirection,
        separator,
        scrollable,
        axis = verticalDefault ? "vertical" : "horizontal",
        orientation = axis,
        disabled: disabledProp,
        disablePassBorderRadius: disablePassBorderRadiusProp,
        borderRadius,
        forceUseItem,
        ...restProps
      } = getExpandedShorthands(activeProps);
      const vertical = orientation === "vertical";
      const [itemChildrenCount, setItemChildrenCount] = useControllableState({
        defaultProp: forceUseItem ? 1 : 0
      });
      const isUsingItems = itemChildrenCount > 0;
      const radius = borderRadius ?? (size ? getVariableValue(getTokens().radius[size]) - 1 : void 0);
      const hasRadius = radius !== void 0;
      const disablePassBorderRadius = disablePassBorderRadiusProp ?? !hasRadius;
      const childrenArray = Children.toArray(childrenProp);
      const children = isUsingItems ? Children.toArray(childrenProp).filter(isValidElement) : childrenArray.map((child, i) => {
        if (!isValidElement(child)) {
          return child;
        }
        const disabled = child.props.disabled ?? disabledProp;
        const isFirst = i === 0;
        const isLast = i === childrenArray.length - 1;
        const radiusStyles = disablePassBorderRadius === true ? null : getBorderRadius({
          isFirst,
          isLast,
          radius,
          vertical,
          disable: disablePassBorderRadius
        });
        const props2 = {
          disabled,
          ...isTamaguiElement(child) ? radiusStyles : { style: radiusStyles }
        };
        return cloneElementWithPropOrder(child, props2);
      });
      const indexedChildren = useIndexedChildren(
        spacedChildren({
          direction: spaceDirection,
          separator,
          // @ts-ignore
          space,
          children
        })
      );
      const onItemMount = React.useCallback(
        () => setItemChildrenCount((prev) => prev + 1),
        []
      );
      const onItemUnmount = React.useCallback(
        () => setItemChildrenCount((prev) => prev - 1),
        []
      );
      return /* @__PURE__ */ jsx(
        GroupProvider,
        {
          disablePassBorderRadius,
          vertical: orientation === "vertical",
          radius,
          disabled: disabledProp,
          onItemMount,
          onItemUnmount,
          scope: __scopeGroup,
          children: /* @__PURE__ */ jsx(
            GroupFrame,
            {
              ref,
              size,
              flexDirection: orientation === "horizontal" ? "row" : "column",
              borderRadius,
              ...restProps,
              children: wrapScroll({ ...activeProps, orientation }, indexedChildren)
            }
          )
        }
      );
    }),
    {
      Item: GroupItem
    }
  );
}
const GroupItem = (props) => {
  var _a;
  const { __scopeGroup, children, forcePlacement } = props;
  const groupItemProps = useGroupItem(
    { disabled: isValidElement(children) ? children.props.disabled : void 0 },
    forcePlacement,
    __scopeGroup
  );
  if (!isValidElement(children)) {
    return children;
  }
  if (isTamaguiElement(children)) {
    return React.cloneElement(children, groupItemProps);
  }
  return React.cloneElement(children, {
    style: {
      ...(_a = children.props) == null ? void 0 : _a["style"],
      ...groupItemProps
    }
  });
};
const useGroupItem = (childrenProps, forcePlacement, __scopeGroup) => {
  const treeIndex = useIndex();
  const context = useGroupContext("GroupItem", __scopeGroup);
  React.useEffect(() => {
    context.onItemMount();
    return () => {
      context.onItemUnmount();
    };
  }, []);
  if (!treeIndex) {
    throw Error("<Group.Item/> should only be used within a <Group/>");
  }
  const isFirst = forcePlacement === "first" || forcePlacement !== "last" && treeIndex.index === 0;
  const isLast = forcePlacement === "last" || forcePlacement !== "first" && treeIndex.index === treeIndex.maxIndex;
  const disabled = childrenProps.disabled ?? context.disabled;
  let propsToPass = {
    disabled
  };
  if (context.disablePassBorderRadius !== true) {
    const borderRadius = getBorderRadius({
      radius: context.radius,
      isFirst,
      isLast,
      vertical: context.vertical,
      disable: context.disablePassBorderRadius
    });
    return { ...propsToPass, ...borderRadius };
  }
  return propsToPass;
};
const Group = createGroup(true);
const YGroup = Group;
const XGroup = createGroup(false);
const wrapScroll = ({ scrollable, orientation, showScrollIndicator = false }, children) => {
  if (scrollable)
    return /* @__PURE__ */ jsx(
      ScrollView,
      {
        ...orientation === "vertical" && {
          showsVerticalScrollIndicator: showScrollIndicator
        },
        ...orientation === "horizontal" && {
          horizontal: true,
          showsHorizontalScrollIndicator: showScrollIndicator
        },
        children
      }
    );
  return children;
};
const getBorderRadius = ({
  isFirst,
  isLast,
  radius,
  vertical,
  disable
}) => {
  return {
    borderTopLeftRadius: isFirst && disable !== "top" && disable !== "start" ? radius : 0,
    borderTopRightRadius: disable !== "top" && disable !== "end" && (vertical && isFirst || !vertical && isLast) ? radius : 0,
    borderBottomLeftRadius: disable !== "bottom" && disable !== "start" && (vertical && isLast || !vertical && isFirst) ? radius : 0,
    borderBottomRightRadius: isLast && disable !== "bottom" && disable !== "end" ? radius : 0
  };
};
const cloneElementWithPropOrder = (child, props) => {
  const next = mergeProps(child.props, props, getConfig().shorthands);
  return React.cloneElement({ ...child, props: null }, next);
};
export {
  Group,
  GroupFrame,
  XGroup,
  YGroup,
  useGroupItem
};
//# sourceMappingURL=Group.js.map
