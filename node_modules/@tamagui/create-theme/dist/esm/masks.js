import { objectEntries, objectFromEntries } from "./helpers";
import { isMinusZero } from "./isMinusZero";
const createMask = (createMask2) => typeof createMask2 === "function" ? { name: createMask2.name || "unnamed", mask: createMask2 } : createMask2;
const skipMask = {
  name: "skip-mask",
  mask: (template, opts) => {
    const { skip } = opts;
    const result = Object.fromEntries(
      Object.entries(template).filter(([k]) => !skip || !(k in skip)).map(([k, v]) => [k, applyOverrides(k, v, opts)])
    );
    return result;
  }
};
function applyOverrides(key, value, opts) {
  if (!opts.override)
    return value;
  const override = opts.override[key];
  if (typeof override === "undefined")
    return value;
  if (typeof override === "string")
    return value;
  if (opts.overrideStrategy === "swap") {
    return override;
  }
  return value;
}
const createIdentityMask = () => ({
  name: "identity-mask",
  mask: (template) => template
});
const createInverseMask = () => {
  const mask = {
    name: "inverse-mask",
    mask: (template, opts) => {
      const inversed = objectFromEntries(
        objectEntries(template).map(([k, v]) => [k, -v])
      );
      return skipMask.mask(inversed, opts);
    }
  };
  return mask;
};
const createShiftMask = ({ inverse } = {}, defaultOptions) => {
  const mask = {
    name: "shift-mask",
    mask: (template, opts) => {
      const {
        override,
        overrideStrategy = "shift",
        max: maxIn,
        palette,
        min = 0,
        strength = 1
      } = { ...defaultOptions, ...opts };
      const values = Object.entries(template);
      const max = maxIn ?? (palette ? Object.values(palette).length - 1 : Infinity);
      const out = {};
      for (const [key, value] of values) {
        if (typeof value === "string")
          continue;
        if (typeof (override == null ? void 0 : override[key]) === "number") {
          const overrideVal = override[key];
          out[key] = overrideStrategy === "shift" ? value + overrideVal : overrideVal;
          continue;
        } else if (typeof (override == null ? void 0 : override[key]) === "string") {
          out[key] = override[key];
          continue;
        }
        const isPositive = value === 0 ? !isMinusZero(value) : value >= 0;
        const direction = isPositive ? 1 : -1;
        const invert = inverse ? -1 : 1;
        const next = value + strength * direction * invert;
        const clamped = isPositive ? Math.max(min, Math.min(max, next)) : Math.min(-min, Math.max(-max, next));
        out[key] = clamped;
      }
      const skipped = skipMask.mask(out, opts);
      return skipped;
    }
  };
  return mask;
};
const createWeakenMask = (defaultOptions) => ({
  name: "soften-mask",
  mask: createShiftMask({}, defaultOptions).mask
});
const createSoftenMask = createWeakenMask;
const createStrengthenMask = (defaultOptions) => ({
  name: "strengthen-mask",
  mask: createShiftMask({ inverse: true }, defaultOptions).mask
});
export {
  createIdentityMask,
  createInverseMask,
  createMask,
  createShiftMask,
  createSoftenMask,
  createStrengthenMask,
  createWeakenMask,
  skipMask
};
//# sourceMappingURL=masks.js.map
