"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var createTheme_exports = {};
__export(createTheme_exports, {
  addChildren: () => addChildren,
  createTheme: () => createTheme
});
module.exports = __toCommonJS(createTheme_exports);
var import_isMinusZero = require("./isMinusZero");
var import_themeInfo = require("./themeInfo");
const identityCache = /* @__PURE__ */ new Map();
function createTheme(palette, definition, options, name, skipCache = false) {
  const cacheKey = skipCache ? "" : JSON.stringify([name, palette, definition, options]);
  if (!skipCache) {
    if (identityCache.has(cacheKey)) {
      return identityCache.get(cacheKey);
    }
  }
  const theme = {
    ...Object.fromEntries(
      Object.entries(definition).map(([key, offset]) => {
        return [key, getValue(palette, offset)];
      })
    ),
    ...options == null ? void 0 : options.nonInheritedValues
  };
  if (cacheKey) {
    (0, import_themeInfo.setThemeInfo)(theme, { palette, definition, options, name });
    identityCache.set(cacheKey, theme);
  }
  return theme;
}
const getValue = (palette, value) => {
  if (typeof value === "string")
    return value;
  const max = palette.length - 1;
  const isPositive = value === 0 ? !(0, import_isMinusZero.isMinusZero)(value) : value >= 0;
  const next = isPositive ? value : max + value;
  const index = Math.min(Math.max(0, next), max);
  return palette[index];
};
function addChildren(themes, getChildren) {
  const out = { ...themes };
  for (const key in themes) {
    const subThemes = getChildren(key, themes[key]);
    for (const sKey in subThemes) {
      out[`${key}_${sKey}`] = subThemes[sKey];
    }
  }
  return out;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  addChildren,
  createTheme
});
//# sourceMappingURL=createTheme.js.map
