"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var combineMasks_exports = {};
__export(combineMasks_exports, {
  combineMasks: () => combineMasks
});
module.exports = __toCommonJS(combineMasks_exports);
var import_applyMask = require("./applyMask");
var import_themeInfo = require("./themeInfo");
const combineMasks = (...masks) => {
  const mask = {
    name: "combine-mask",
    mask: (template, opts) => {
      let current = (0, import_themeInfo.getThemeInfo)(template, opts.parentName);
      let theme;
      for (const mask2 of masks) {
        if (!current)
          if (process.env.NODE_ENV === "development") {
            throw new Error(
              `After applying mask, nothing returned: ${current}, for template: ${template} and mask: ${mask2.toString()}, given opts ${JSON.stringify(
                opts,
                null,
                2
              )}`
            );
          } else {
            throw `\u274C`;
          }
        const next = (0, import_applyMask.applyMaskStateless)(current, mask2, opts);
        current = next;
        theme = next.theme;
      }
      return theme;
    }
  };
  return mask;
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  combineMasks
});
//# sourceMappingURL=combineMasks.js.map
