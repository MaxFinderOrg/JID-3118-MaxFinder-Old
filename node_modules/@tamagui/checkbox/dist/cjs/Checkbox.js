"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var Checkbox_exports = {};
__export(Checkbox_exports, {
  BubbleInput: () => BubbleInput,
  Checkbox: () => Checkbox2,
  CheckboxFrame: () => CheckboxFrame,
  CheckboxStyledContext: () => CheckboxStyledContext,
  createCheckboxScope: () => createCheckboxScope,
  getState: () => getState,
  isIndeterminate: () => isIndeterminate
});
module.exports = __toCommonJS(Checkbox_exports);
var import_jsx_runtime = require("react/jsx-runtime");
var import_core = require("@tamagui/core");
var import_create_context = require("@tamagui/create-context");
var import_focusable = require("@tamagui/focusable");
var import_font_size = require("@tamagui/font-size");
var import_get_token = require("@tamagui/get-token");
var import_helpers_tamagui = require("@tamagui/helpers-tamagui");
var import_label = require("@tamagui/label");
var import_stacks = require("@tamagui/stacks");
var import_use_controllable_state = require("@tamagui/use-controllable-state");
var import_use_previous = require("@tamagui/use-previous");
var React = __toESM(require("react"));
const CheckboxStyledContext = (0, import_core.createStyledContext)({
  size: "$true",
  scaleIcon: 1
});
function isIndeterminate(checked) {
  return checked === "indeterminate";
}
function getState(checked) {
  return isIndeterminate(checked) ? "indeterminate" : checked ? "checked" : "unchecked";
}
const BubbleInput = (props) => {
  const { checked, bubbles = true, control, isHidden, ...inputProps } = props;
  const ref = React.useRef(null);
  const prevChecked = (0, import_use_previous.usePrevious)(checked);
  React.useEffect(() => {
    const input = ref.current;
    const inputProto = window.HTMLInputElement.prototype;
    const descriptor = Object.getOwnPropertyDescriptor(
      inputProto,
      "checked"
    );
    const setChecked = descriptor.set;
    if (prevChecked !== checked && setChecked) {
      const event = new Event("click", { bubbles });
      input.indeterminate = isIndeterminate(checked);
      setChecked.call(input, isIndeterminate(checked) ? false : checked);
      input.dispatchEvent(event);
    }
  }, [prevChecked, checked, bubbles]);
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
    "input",
    {
      type: "checkbox",
      defaultChecked: isIndeterminate(checked) ? false : checked,
      ...inputProps,
      tabIndex: -1,
      ref,
      "aria-hidden": isHidden,
      style: {
        ...isHidden ? {
          // ...controlSize,
          position: "absolute",
          pointerEvents: "none",
          opacity: 0,
          margin: 0
        } : {
          appearance: "auto",
          accentColor: "var(--color6)"
        },
        ...props.style
      }
    }
  );
};
const INDICATOR_NAME = "CheckboxIndicator";
const CheckboxIndicatorFrame = (0, import_core.styled)(import_stacks.ThemeableStack, {
  // use Checkbox for easier themes
  name: INDICATOR_NAME,
  context: CheckboxStyledContext
});
const CheckboxIndicator = CheckboxIndicatorFrame.extractable(
  React.forwardRef(
    (props, forwardedRef) => {
      const {
        __scopeCheckbox,
        children: childrenProp,
        forceMount,
        disablePassStyles,
        ...indicatorProps
      } = props;
      if (process.env.NODE_ENV === "development" && !childrenProp) {
        console.warn(
          `Warning: You created a Checkbox.Indicator without passing an child prop for it to use as an icon.`
        );
      }
      const context = useCheckboxContext(INDICATOR_NAME, __scopeCheckbox);
      const styledContext = React.useContext(CheckboxStyledContext);
      const iconSize = (typeof styledContext.size === "number" ? styledContext.size * 0.65 : (0, import_font_size.getFontSize)(styledContext.size)) * styledContext.scaleIcon;
      const theme = (0, import_core.useTheme)();
      const getThemedIcon = (0, import_helpers_tamagui.useGetThemedIcon)({ size: iconSize, color: theme.color });
      const childrens = React.Children.toArray(childrenProp);
      const children = childrens.map((child) => {
        if (disablePassStyles || !React.isValidElement(child)) {
          return child;
        }
        return getThemedIcon(child);
      });
      if (forceMount || isIndeterminate(context.state) || context.state === true)
        return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          CheckboxIndicatorFrame,
          {
            "data-state": getState(context.state),
            "data-disabled": context.disabled ? "" : void 0,
            pointerEvents: "none",
            ...indicatorProps,
            ref: forwardedRef,
            children
          }
        );
      return null;
    }
  )
);
CheckboxIndicator.displayName = INDICATOR_NAME;
const CHECKBOX_NAME = "Checkbox";
const CheckboxFrame = (0, import_core.styled)(import_stacks.ThemeableStack, {
  name: CHECKBOX_NAME,
  tag: "button",
  context: CheckboxStyledContext,
  variants: {
    unstyled: {
      false: {
        size: "$true",
        backgroundColor: "$background",
        alignItems: "center",
        justifyContent: "center",
        pressTheme: true,
        focusable: true,
        borderWidth: 1,
        borderColor: "$borderColor",
        hoverStyle: {
          borderColor: "$borderColorHover"
        },
        focusStyle: {
          borderColor: "$borderColorFocus"
        }
      }
    },
    size: {
      "...size": (val, { tokens }) => {
        const radiusToken = (0, import_core.getVariableValue)((0, import_get_token.getSize)(val)) / 8;
        return {
          borderRadius: radiusToken
        };
      }
    }
  },
  defaultVariants: {
    unstyled: false
  }
});
const [createCheckboxContext, createCheckboxScope] = (0, import_create_context.createContextScope)(CHECKBOX_NAME);
const [CheckboxProvider, useCheckboxContext] = createCheckboxContext(CHECKBOX_NAME);
const CheckboxComponent = CheckboxFrame.extractable(
  React.forwardRef(function Checkbox(props, forwardedRef) {
    const {
      __scopeCheckbox,
      labelledBy: ariaLabelledby,
      name,
      checked: checkedProp,
      defaultChecked,
      required,
      scaleSize = 0.45,
      sizeAdjust = 0,
      disabled,
      value = "on",
      onCheckedChange,
      native,
      scaleIcon,
      ...checkboxProps
    } = props;
    const [button, setButton] = React.useState(null);
    const composedRefs = (0, import_core.useComposedRefs)(forwardedRef, (node) => setButton(node));
    const hasConsumerStoppedPropagationRef = React.useRef(false);
    const propsActive = (0, import_core.useProps)(props);
    const isFormControl = import_core.isWeb ? button ? Boolean(button.closest("form")) : true : false;
    const [checked = false, setChecked] = (0, import_use_controllable_state.useControllableState)({
      prop: checkedProp,
      defaultProp: defaultChecked,
      onChange: onCheckedChange
    });
    const styledContext = React.useContext(CheckboxStyledContext);
    const adjustedSize = (0, import_core.getVariableValue)(
      (0, import_get_token.getSize)(propsActive.size ?? (styledContext == null ? void 0 : styledContext.size) ?? "$true", {
        shift: sizeAdjust
      })
    );
    const size = scaleSize ? Math.round(adjustedSize * scaleSize) : adjustedSize;
    const labelId = (0, import_label.useLabelContext)(button);
    const labelledBy = ariaLabelledby || labelId;
    if (process.env.TAMAGUI_TARGET === "native") {
      React.useEffect(() => {
        if (!props.id)
          return;
        return (0, import_focusable.registerFocusable)(props.id, {
          focusAndSelect: () => {
            setChecked((x) => !x);
          },
          focus: () => {
          }
        });
      }, [props.id, setChecked]);
    }
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(CheckboxProvider, { scope: __scopeCheckbox, state: checked, disabled, children: import_core.isWeb && native ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      BubbleInput,
      {
        control: button,
        bubbles: !hasConsumerStoppedPropagationRef.current,
        name,
        value,
        checked,
        required,
        disabled,
        id: props.id
      }
    ) : /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
        CheckboxFrame,
        {
          width: size,
          height: size,
          tag: "button",
          role: "checkbox",
          "aria-labelledby": labelledBy,
          "aria-checked": isIndeterminate(checked) ? "mixed" : checked,
          "aria-required": required,
          "data-state": getState(checked),
          "data-disabled": disabled ? "" : void 0,
          disabled,
          ...checkboxProps,
          ref: composedRefs,
          ...import_core.isWeb && {
            type: "button",
            value,
            onKeyDown: (0, import_core.composeEventHandlers)(
              props.onKeyDown,
              (event) => {
                if (event.key === "Enter")
                  event.preventDefault();
              }
            )
          },
          onPress: (0, import_core.composeEventHandlers)(props.onPress, (event) => {
            setChecked(
              (prevChecked) => isIndeterminate(prevChecked) ? true : !prevChecked
            );
            if (isFormControl) {
              hasConsumerStoppedPropagationRef.current = event.isPropagationStopped();
              if (!hasConsumerStoppedPropagationRef.current)
                event.stopPropagation();
            }
          }),
          children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
            CheckboxStyledContext.Provider,
            {
              size: propsActive.size ?? (styledContext == null ? void 0 : styledContext.size) ?? "$true",
              scaleIcon: scaleIcon ?? (styledContext == null ? void 0 : styledContext.scaleIcon) ?? 1,
              children: propsActive.children
            }
          )
        }
      ),
      import_core.isWeb && isFormControl ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
        BubbleInput,
        {
          isHidden: true,
          control: button,
          bubbles: !hasConsumerStoppedPropagationRef.current,
          name,
          value,
          checked,
          required,
          disabled
        }
      ) : null
    ] }) });
  })
);
const Checkbox2 = (0, import_core.withStaticProperties)(CheckboxComponent, {
  Indicator: CheckboxIndicator,
  Props: CheckboxStyledContext.Provider
});
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  BubbleInput,
  Checkbox,
  CheckboxFrame,
  CheckboxStyledContext,
  createCheckboxScope,
  getState,
  isIndeterminate
});
//# sourceMappingURL=Checkbox.js.map
