import { useIsomorphicLayoutEffect } from "@tamagui/constants";
import { getBoundingClientRect } from "../helpers/getBoundingClientRect";
import { getRect } from "../helpers/getRect";
const LayoutHandlers = /* @__PURE__ */ new WeakMap();
let resizeObserver = null;
if (typeof window !== "undefined" && "ResizeObserver" in window) {
  resizeObserver = new ResizeObserver((entries) => {
    for (const { target } of entries) {
      const onLayout = LayoutHandlers.get(target);
      if (typeof onLayout !== "function")
        return;
      measureLayout(target, null, (x, y, width, height, left, top) => {
        onLayout({
          nativeEvent: {
            layout: { x, y, width, height, left, top },
            target
          },
          timeStamp: Date.now()
        });
      });
    }
  });
}
const measureLayout = (node, relativeTo, callback) => {
  const relativeNode = relativeTo || (node == null ? void 0 : node.parentNode);
  if (relativeNode instanceof HTMLElement) {
    setTimeout(() => {
      const relativeRect = getBoundingClientRect(relativeNode);
      const { height, left, top, width } = getRect(node);
      const x = left - relativeRect.left;
      const y = top - relativeRect.top;
      callback(x, y, width, height, left, top);
    }, 0);
  }
};
function useElementLayout(ref, onLayout) {
  useIsomorphicLayoutEffect(() => {
    if (!resizeObserver || !onLayout)
      return;
    const node = ref.current;
    if (!node)
      return;
    LayoutHandlers.set(node, onLayout);
    resizeObserver.observe(node);
    return () => {
      resizeObserver == null ? void 0 : resizeObserver.unobserve(node);
    };
  }, [ref, onLayout]);
}
export {
  measureLayout,
  useElementLayout
};
//# sourceMappingURL=useElementLayout.js.map
