"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var src_exports = {};
__export(src_exports, {
  debounce: () => debounce,
  useDebounce: () => useDebounce,
  useDebounceValue: () => useDebounceValue
});
module.exports = __toCommonJS(src_exports);
var import_react = require("react");
function debounce(func, wait, leading) {
  let timeout;
  let isCancelled = false;
  function debounced() {
    isCancelled = false;
    const context = this;
    const args = arguments;
    if (leading && !timeout) {
      func.apply(context, args);
    }
    clearTimeout(timeout);
    timeout = setTimeout(function() {
      timeout = null;
      if (!(leading || isCancelled)) {
        func.apply(context, args);
      }
      isCancelled = false;
    }, wait);
  }
  debounced.cancel = () => {
    isCancelled = true;
  };
  return debounced;
}
const defaultOpts = { leading: false };
function useDebounce(fn, wait, options = defaultOpts, mountArgs = []) {
  const dbEffect = (0, import_react.useRef)(null);
  (0, import_react.useEffect)(() => {
    return () => {
      var _a;
      (_a = dbEffect.current) == null ? void 0 : _a.cancel();
    };
  }, []);
  return (0, import_react.useMemo)(() => {
    dbEffect.current = debounce(fn, wait, options.leading);
    return dbEffect.current;
  }, [options.leading, ...mountArgs]);
}
function useDebounceValue(val, amt = 0) {
  const [state, setState] = (0, import_react.useState)(val);
  (0, import_react.useEffect)(() => {
    const tm = setTimeout(() => {
      setState((prev) => {
        if (prev === val)
          return prev;
        return val;
      });
    }, amt);
    return () => {
      clearTimeout(tm);
    };
  }, [val]);
  return state;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  debounce,
  useDebounce,
  useDebounceValue
});
//# sourceMappingURL=index.js.map
