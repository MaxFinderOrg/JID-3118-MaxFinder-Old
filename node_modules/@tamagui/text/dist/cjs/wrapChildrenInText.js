"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var wrapChildrenInText_exports = {};
__export(wrapChildrenInText_exports, {
  wrapChildrenInText: () => wrapChildrenInText
});
module.exports = __toCommonJS(wrapChildrenInText_exports);
var import_jsx_runtime = (
  // so "data-disable-theme" is a hack to fix themeInverse, don't ask me why
  require("react/jsx-runtime")
);
var import_react = __toESM(require("react"));
function wrapChildrenInText(TextComponent, propsIn, extraProps) {
  const {
    children,
    textProps,
    size,
    noTextWrap,
    color,
    fontFamily,
    fontSize,
    fontWeight,
    letterSpacing,
    textAlign,
    fontStyle,
    maxFontSizeMultiplier
  } = propsIn;
  if (noTextWrap || !children) {
    return [children];
  }
  const props = {
    ...extraProps
  };
  if (color)
    props.color = color;
  if (fontFamily)
    props.fontFamily = fontFamily;
  if (fontSize)
    props.fontSize = fontSize;
  if (fontWeight)
    props.fontWeight = fontWeight;
  if (letterSpacing)
    props.letterSpacing = letterSpacing;
  if (textAlign)
    props.textAlign = textAlign;
  if (size)
    props.size = size;
  if (fontStyle)
    props.fontStyle = fontStyle;
  if (maxFontSizeMultiplier)
    props.maxFontSizeMultiplier = maxFontSizeMultiplier;
  return import_react.default.Children.toArray(children).map((child, index) => {
    return typeof child === "string" ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)(TextComponent, { ...props, ...textProps, children: child }, index) : child;
  });
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  wrapChildrenInText
});
//# sourceMappingURL=wrapChildrenInText.js.map
