import { Fragment, jsx, jsxs } from "react/jsx-runtime";
import {
  composeEventHandlers,
  getVariableValue,
  isWeb,
  styled,
  useComposedRefs,
  withStaticProperties
} from "@tamagui/core";
import { createContextScope } from "@tamagui/create-context";
import { registerFocusable } from "@tamagui/focusable";
import { getSize } from "@tamagui/get-token";
import { useLabelContext } from "@tamagui/label";
import { ThemeableStack } from "@tamagui/stacks";
import { useControllableState } from "@tamagui/use-controllable-state";
import { usePrevious } from "@tamagui/use-previous";
import * as React from "react";
const RADIO_GROUP_NAME = "RadioGroup";
const ARROW_KEYS = ["ArrowUp", "ArrowDown", "ArrowLeft", "ArrowRight"];
const [createRadioGroupContext, createRadioGroupScope] = createContextScope(RADIO_GROUP_NAME);
const [RadioGroupProvider, useRadioGroupContext] = createRadioGroupContext(RADIO_GROUP_NAME);
const getState = (checked) => {
  return checked ? "checked" : "unchecked";
};
const RADIO_GROUP_INDICATOR_NAME = "RadioGroupIndicator";
const RadioIndicatorFrame = styled(ThemeableStack, {
  name: RADIO_GROUP_INDICATOR_NAME,
  variants: {
    unstyled: {
      false: {
        width: "33%",
        height: "33%",
        borderRadius: 1e3,
        backgroundColor: "$color",
        pressTheme: true
      }
    }
  },
  defaultVariants: {
    unstyled: false
  }
});
const RadioIndicator = RadioIndicatorFrame.extractable(
  React.forwardRef(
    (props, forwardedRef) => {
      const { __scopeRadioGroupItem, forceMount, disabled, ...indicatorProps } = props;
      const { checked } = useRadioGroupItemContext(
        RADIO_GROUP_INDICATOR_NAME,
        __scopeRadioGroupItem
      );
      if (forceMount || checked) {
        return /* @__PURE__ */ jsx(
          RadioIndicatorFrame,
          {
            "data-state": getState(checked),
            "data-disabled": disabled ? "" : void 0,
            ...indicatorProps,
            ref: forwardedRef
          }
        );
      }
      return null;
    }
  )
);
RadioIndicator.displayName = RADIO_GROUP_INDICATOR_NAME;
const RADIO_GROUP_ITEM_NAME = "RadioGroupItem";
const [RadioGroupItemProvider, useRadioGroupItemContext] = createRadioGroupContext(RADIO_GROUP_NAME);
const RadioGroupItemFrame = styled(ThemeableStack, {
  name: RADIO_GROUP_ITEM_NAME,
  tag: "button",
  variants: {
    unstyled: {
      false: {
        size: "$true",
        borderRadius: 1e3,
        backgroundColor: "$background",
        alignItems: "center",
        justifyContent: "center",
        borderWidth: 1,
        borderColor: "$borderColor",
        padding: 0,
        hoverStyle: {
          borderColor: "$borderColorHover",
          backgroundColor: "$backgroundHover"
        },
        focusStyle: {
          borderColor: "$borderColorHover",
          backgroundColor: "$backgroundHover"
        },
        pressStyle: {
          borderColor: "$borderColorFocus",
          backgroundColor: "$backgroundFocus"
        }
      }
    },
    size: {
      "...size": (value, { props }) => {
        const size = Math.floor(
          getVariableValue(getSize(value)) * (props["scaleSize"] ?? 0.5)
        );
        return {
          width: size,
          height: size
        };
      }
    }
  },
  defaultVariants: {
    unstyled: false
  }
});
const RadioGroupItem = RadioGroupItemFrame.extractable(
  React.forwardRef(
    (props, forwardedRef) => {
      const {
        __scopeRadioGroup,
        value,
        labelledBy: ariaLabelledby,
        disabled: itemDisabled,
        ...itemProps
      } = props;
      const {
        value: groupValue,
        disabled,
        required,
        onChange,
        name,
        native,
        accentColor
      } = useRadioGroupContext(RADIO_GROUP_ITEM_NAME, __scopeRadioGroup);
      const [button, setButton] = React.useState(null);
      const hasConsumerStoppedPropagationRef = React.useRef(false);
      const ref = React.useRef(null);
      const composedRefs = useComposedRefs(forwardedRef, (node) => setButton(node), ref);
      const isArrowKeyPressedRef = React.useRef(false);
      const isFormControl = isWeb ? button ? Boolean(button.closest("form")) : true : false;
      const checked = groupValue === value;
      const labelId = useLabelContext(button);
      const labelledBy = ariaLabelledby || labelId;
      React.useEffect(() => {
        if (isWeb) {
          const handleKeyDown = (event) => {
            if (ARROW_KEYS.includes(event.key)) {
              isArrowKeyPressedRef.current = true;
            }
          };
          const handleKeyUp = () => {
            isArrowKeyPressedRef.current = false;
          };
          document.addEventListener("keydown", handleKeyDown);
          document.addEventListener("keyup", handleKeyUp);
          return () => {
            document.removeEventListener("keydown", handleKeyDown);
            document.removeEventListener("keyup", handleKeyUp);
          };
        }
      }, []);
      if (process.env.TAMAGUI_TARGET === "native") {
        React.useEffect(() => {
          if (!props.id)
            return;
          return registerFocusable(props.id, {
            focusAndSelect: () => {
              onChange == null ? void 0 : onChange(value);
            },
            focus: () => {
            }
          });
        }, [props.id, value]);
      }
      const isDisabled = disabled || itemDisabled;
      return /* @__PURE__ */ jsx(RadioGroupItemProvider, { checked, scope: __scopeRadioGroup, children: isWeb && native ? /* @__PURE__ */ jsx(
        BubbleInput,
        {
          control: button,
          bubbles: !hasConsumerStoppedPropagationRef.current,
          name,
          value,
          checked,
          required,
          disabled: isDisabled,
          id: props.id,
          accentColor
        }
      ) : /* @__PURE__ */ jsxs(Fragment, { children: [
        /* @__PURE__ */ jsx(
          RadioGroupItemFrame,
          {
            "data-state": getState(checked),
            "data-disabled": isDisabled ? "" : void 0,
            role: "radio",
            "aria-labelledby": labelledBy,
            "aria-checked": checked,
            "aria-required": required,
            disabled: isDisabled,
            ref: composedRefs,
            ...isWeb && {
              type: "button",
              value
            },
            ...itemProps,
            onPress: composeEventHandlers(props.onPress, (event) => {
              if (!checked) {
                onChange == null ? void 0 : onChange(value);
              }
              if (isFormControl) {
                hasConsumerStoppedPropagationRef.current = event.isPropagationStopped();
                if (!hasConsumerStoppedPropagationRef.current)
                  event.stopPropagation();
              }
            }),
            ...isWeb && {
              onKeyDown: composeEventHandlers(
                props.onKeyDown,
                (event) => {
                  if (event.key === "Enter")
                    event.preventDefault();
                }
              ),
              onFocus: composeEventHandlers(itemProps.onFocus, () => {
                var _a;
                if (isArrowKeyPressedRef.current)
                  (_a = ref.current) == null ? void 0 : _a.click();
              })
            }
          }
        ),
        isFormControl && /* @__PURE__ */ jsx(
          BubbleInput,
          {
            isHidden: true,
            control: button,
            bubbles: !hasConsumerStoppedPropagationRef.current,
            name,
            value,
            checked,
            required,
            disabled: isDisabled
          }
        )
      ] }) });
    }
  )
);
const BubbleInput = (props) => {
  const { checked, bubbles = true, control, isHidden, accentColor, ...inputProps } = props;
  const ref = React.useRef(null);
  const prevChecked = usePrevious(checked);
  React.useEffect(() => {
    const input = ref.current;
    const inputProto = window.HTMLInputElement.prototype;
    const descriptor = Object.getOwnPropertyDescriptor(
      inputProto,
      "checked"
    );
    const setChecked = descriptor.set;
    if (prevChecked !== checked && setChecked) {
      const event = new Event("click", { bubbles });
      setChecked.call(input, checked);
      input.dispatchEvent(event);
    }
  }, [prevChecked, checked, bubbles]);
  return /* @__PURE__ */ jsx(
    "input",
    {
      type: "radio",
      defaultChecked: checked,
      ...inputProps,
      tabIndex: -1,
      ref,
      "aria-hidden": isHidden,
      style: {
        ...isHidden ? {
          // ...controlSize,
          position: "absolute",
          pointerEvents: "none",
          opacity: 0,
          margin: 0
        } : {
          appearance: "auto",
          accentColor
        },
        ...props.style
      }
    }
  );
};
const RadioGroupFrame = styled(ThemeableStack, {
  name: RADIO_GROUP_NAME,
  variants: {
    orientation: {
      horizontal: {
        flexDirection: "row",
        spaceDirection: "horizontal"
      },
      vertical: {
        flexDirection: "column",
        spaceDirection: "vertical"
      }
    }
  }
});
const RadioGroup = withStaticProperties(
  RadioGroupFrame.extractable(
    React.forwardRef(
      (props, forwardedRef) => {
        const {
          __scopeRadioGroup,
          value: valueProp,
          defaultValue,
          onValueChange,
          disabled = false,
          required = false,
          name,
          orientation,
          native,
          accentColor,
          ...radioGroupProps
        } = props;
        const [value, setValue] = useControllableState({
          prop: valueProp,
          defaultProp: defaultValue,
          onChange: onValueChange
        });
        return /* @__PURE__ */ jsx(
          RadioGroupProvider,
          {
            scope: __scopeRadioGroup,
            value,
            required,
            onChange: setValue,
            disabled,
            name,
            native,
            accentColor,
            children: /* @__PURE__ */ jsx(
              RadioGroupFrame,
              {
                "aria-valuetext": value,
                role: "radiogroup",
                "aria-orientation": orientation,
                ref: forwardedRef,
                orientation,
                "data-disabled": disabled ? "" : void 0,
                ...radioGroupProps
              }
            )
          }
        );
      }
    )
  ),
  {
    Indicator: RadioIndicator,
    Item: RadioGroupItem
  }
);
RadioGroup.displayName = RADIO_GROUP_NAME;
export {
  RadioGroup,
  createRadioGroupScope
};
//# sourceMappingURL=RadioGroup.js.map
