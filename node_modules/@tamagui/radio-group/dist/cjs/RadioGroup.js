"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var RadioGroup_exports = {};
__export(RadioGroup_exports, {
  RadioGroup: () => RadioGroup,
  createRadioGroupScope: () => createRadioGroupScope
});
module.exports = __toCommonJS(RadioGroup_exports);
var import_jsx_runtime = require("react/jsx-runtime");
var import_core = require("@tamagui/core");
var import_create_context = require("@tamagui/create-context");
var import_focusable = require("@tamagui/focusable");
var import_get_token = require("@tamagui/get-token");
var import_label = require("@tamagui/label");
var import_stacks = require("@tamagui/stacks");
var import_use_controllable_state = require("@tamagui/use-controllable-state");
var import_use_previous = require("@tamagui/use-previous");
var React = __toESM(require("react"));
const RADIO_GROUP_NAME = "RadioGroup";
const ARROW_KEYS = ["ArrowUp", "ArrowDown", "ArrowLeft", "ArrowRight"];
const [createRadioGroupContext, createRadioGroupScope] = (0, import_create_context.createContextScope)(RADIO_GROUP_NAME);
const [RadioGroupProvider, useRadioGroupContext] = createRadioGroupContext(RADIO_GROUP_NAME);
const getState = (checked) => {
  return checked ? "checked" : "unchecked";
};
const RADIO_GROUP_INDICATOR_NAME = "RadioGroupIndicator";
const RadioIndicatorFrame = (0, import_core.styled)(import_stacks.ThemeableStack, {
  name: RADIO_GROUP_INDICATOR_NAME,
  variants: {
    unstyled: {
      false: {
        width: "33%",
        height: "33%",
        borderRadius: 1e3,
        backgroundColor: "$color",
        pressTheme: true
      }
    }
  },
  defaultVariants: {
    unstyled: false
  }
});
const RadioIndicator = RadioIndicatorFrame.extractable(
  React.forwardRef(
    (props, forwardedRef) => {
      const { __scopeRadioGroupItem, forceMount, disabled, ...indicatorProps } = props;
      const { checked } = useRadioGroupItemContext(
        RADIO_GROUP_INDICATOR_NAME,
        __scopeRadioGroupItem
      );
      if (forceMount || checked) {
        return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          RadioIndicatorFrame,
          {
            "data-state": getState(checked),
            "data-disabled": disabled ? "" : void 0,
            ...indicatorProps,
            ref: forwardedRef
          }
        );
      }
      return null;
    }
  )
);
RadioIndicator.displayName = RADIO_GROUP_INDICATOR_NAME;
const RADIO_GROUP_ITEM_NAME = "RadioGroupItem";
const [RadioGroupItemProvider, useRadioGroupItemContext] = createRadioGroupContext(RADIO_GROUP_NAME);
const RadioGroupItemFrame = (0, import_core.styled)(import_stacks.ThemeableStack, {
  name: RADIO_GROUP_ITEM_NAME,
  tag: "button",
  variants: {
    unstyled: {
      false: {
        size: "$true",
        borderRadius: 1e3,
        backgroundColor: "$background",
        alignItems: "center",
        justifyContent: "center",
        borderWidth: 1,
        borderColor: "$borderColor",
        padding: 0,
        hoverStyle: {
          borderColor: "$borderColorHover",
          backgroundColor: "$backgroundHover"
        },
        focusStyle: {
          borderColor: "$borderColorHover",
          backgroundColor: "$backgroundHover"
        },
        pressStyle: {
          borderColor: "$borderColorFocus",
          backgroundColor: "$backgroundFocus"
        }
      }
    },
    size: {
      "...size": (value, { props }) => {
        const size = Math.floor(
          (0, import_core.getVariableValue)((0, import_get_token.getSize)(value)) * (props["scaleSize"] ?? 0.5)
        );
        return {
          width: size,
          height: size
        };
      }
    }
  },
  defaultVariants: {
    unstyled: false
  }
});
const RadioGroupItem = RadioGroupItemFrame.extractable(
  React.forwardRef(
    (props, forwardedRef) => {
      const {
        __scopeRadioGroup,
        value,
        labelledBy: ariaLabelledby,
        disabled: itemDisabled,
        ...itemProps
      } = props;
      const {
        value: groupValue,
        disabled,
        required,
        onChange,
        name,
        native,
        accentColor
      } = useRadioGroupContext(RADIO_GROUP_ITEM_NAME, __scopeRadioGroup);
      const [button, setButton] = React.useState(null);
      const hasConsumerStoppedPropagationRef = React.useRef(false);
      const ref = React.useRef(null);
      const composedRefs = (0, import_core.useComposedRefs)(forwardedRef, (node) => setButton(node), ref);
      const isArrowKeyPressedRef = React.useRef(false);
      const isFormControl = import_core.isWeb ? button ? Boolean(button.closest("form")) : true : false;
      const checked = groupValue === value;
      const labelId = (0, import_label.useLabelContext)(button);
      const labelledBy = ariaLabelledby || labelId;
      React.useEffect(() => {
        if (import_core.isWeb) {
          const handleKeyDown = (event) => {
            if (ARROW_KEYS.includes(event.key)) {
              isArrowKeyPressedRef.current = true;
            }
          };
          const handleKeyUp = () => {
            isArrowKeyPressedRef.current = false;
          };
          document.addEventListener("keydown", handleKeyDown);
          document.addEventListener("keyup", handleKeyUp);
          return () => {
            document.removeEventListener("keydown", handleKeyDown);
            document.removeEventListener("keyup", handleKeyUp);
          };
        }
      }, []);
      if (process.env.TAMAGUI_TARGET === "native") {
        React.useEffect(() => {
          if (!props.id)
            return;
          return (0, import_focusable.registerFocusable)(props.id, {
            focusAndSelect: () => {
              onChange == null ? void 0 : onChange(value);
            },
            focus: () => {
            }
          });
        }, [props.id, value]);
      }
      const isDisabled = disabled || itemDisabled;
      return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(RadioGroupItemProvider, { checked, scope: __scopeRadioGroup, children: import_core.isWeb && native ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
        BubbleInput,
        {
          control: button,
          bubbles: !hasConsumerStoppedPropagationRef.current,
          name,
          value,
          checked,
          required,
          disabled: isDisabled,
          id: props.id,
          accentColor
        }
      ) : /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          RadioGroupItemFrame,
          {
            "data-state": getState(checked),
            "data-disabled": isDisabled ? "" : void 0,
            role: "radio",
            "aria-labelledby": labelledBy,
            "aria-checked": checked,
            "aria-required": required,
            disabled: isDisabled,
            ref: composedRefs,
            ...import_core.isWeb && {
              type: "button",
              value
            },
            ...itemProps,
            onPress: (0, import_core.composeEventHandlers)(props.onPress, (event) => {
              if (!checked) {
                onChange == null ? void 0 : onChange(value);
              }
              if (isFormControl) {
                hasConsumerStoppedPropagationRef.current = event.isPropagationStopped();
                if (!hasConsumerStoppedPropagationRef.current)
                  event.stopPropagation();
              }
            }),
            ...import_core.isWeb && {
              onKeyDown: (0, import_core.composeEventHandlers)(
                props.onKeyDown,
                (event) => {
                  if (event.key === "Enter")
                    event.preventDefault();
                }
              ),
              onFocus: (0, import_core.composeEventHandlers)(itemProps.onFocus, () => {
                var _a;
                if (isArrowKeyPressedRef.current)
                  (_a = ref.current) == null ? void 0 : _a.click();
              })
            }
          }
        ),
        isFormControl && /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          BubbleInput,
          {
            isHidden: true,
            control: button,
            bubbles: !hasConsumerStoppedPropagationRef.current,
            name,
            value,
            checked,
            required,
            disabled: isDisabled
          }
        )
      ] }) });
    }
  )
);
const BubbleInput = (props) => {
  const { checked, bubbles = true, control, isHidden, accentColor, ...inputProps } = props;
  const ref = React.useRef(null);
  const prevChecked = (0, import_use_previous.usePrevious)(checked);
  React.useEffect(() => {
    const input = ref.current;
    const inputProto = window.HTMLInputElement.prototype;
    const descriptor = Object.getOwnPropertyDescriptor(
      inputProto,
      "checked"
    );
    const setChecked = descriptor.set;
    if (prevChecked !== checked && setChecked) {
      const event = new Event("click", { bubbles });
      setChecked.call(input, checked);
      input.dispatchEvent(event);
    }
  }, [prevChecked, checked, bubbles]);
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
    "input",
    {
      type: "radio",
      defaultChecked: checked,
      ...inputProps,
      tabIndex: -1,
      ref,
      "aria-hidden": isHidden,
      style: {
        ...isHidden ? {
          // ...controlSize,
          position: "absolute",
          pointerEvents: "none",
          opacity: 0,
          margin: 0
        } : {
          appearance: "auto",
          accentColor
        },
        ...props.style
      }
    }
  );
};
const RadioGroupFrame = (0, import_core.styled)(import_stacks.ThemeableStack, {
  name: RADIO_GROUP_NAME,
  variants: {
    orientation: {
      horizontal: {
        flexDirection: "row",
        spaceDirection: "horizontal"
      },
      vertical: {
        flexDirection: "column",
        spaceDirection: "vertical"
      }
    }
  }
});
const RadioGroup = (0, import_core.withStaticProperties)(
  RadioGroupFrame.extractable(
    React.forwardRef(
      (props, forwardedRef) => {
        const {
          __scopeRadioGroup,
          value: valueProp,
          defaultValue,
          onValueChange,
          disabled = false,
          required = false,
          name,
          orientation,
          native,
          accentColor,
          ...radioGroupProps
        } = props;
        const [value, setValue] = (0, import_use_controllable_state.useControllableState)({
          prop: valueProp,
          defaultProp: defaultValue,
          onChange: onValueChange
        });
        return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          RadioGroupProvider,
          {
            scope: __scopeRadioGroup,
            value,
            required,
            onChange: setValue,
            disabled,
            name,
            native,
            accentColor,
            children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
              RadioGroupFrame,
              {
                "aria-valuetext": value,
                role: "radiogroup",
                "aria-orientation": orientation,
                ref: forwardedRef,
                orientation,
                "data-disabled": disabled ? "" : void 0,
                ...radioGroupProps
              }
            )
          }
        );
      }
    )
  ),
  {
    Indicator: RadioIndicator,
    Item: RadioGroupItem
  }
);
RadioGroup.displayName = RADIO_GROUP_NAME;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  RadioGroup,
  createRadioGroupScope
});
//# sourceMappingURL=RadioGroup.js.map
