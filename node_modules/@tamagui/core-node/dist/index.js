"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// ../react-native-use-responder-events/dist/cjs/utils.js
var require_utils = __commonJS({
  "../react-native-use-responder-events/dist/cjs/utils.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var utils_exports = {};
    __export2(utils_exports, {
      canUseDOM: () => canUseDOM,
      getBoundingClientRect: () => getBoundingClientRect2,
      getLowestCommonAncestor: () => getLowestCommonAncestor,
      getResponderPaths: () => getResponderPaths,
      hasTargetTouches: () => hasTargetTouches,
      hasValidSelection: () => hasValidSelection,
      isPrimaryPointerDown: () => isPrimaryPointerDown,
      isSelectionValid: () => isSelectionValid,
      setResponderId: () => setResponderId
    });
    module2.exports = __toCommonJS2(utils_exports);
    var keyName = "__reactResponderId";
    var canUseDOM = !!(typeof window !== "undefined" && window.document && window.document.createElement);
    var getBoundingClientRect2 = (node) => {
      if (!node)
        return;
      if (node.nodeType !== 1)
        return;
      if (node.getBoundingClientRect) {
        return node.getBoundingClientRect();
      }
    };
    function getEventPath(domEvent) {
      var _a;
      if (domEvent.type === "selectionchange") {
        const target = (_a = window.getSelection()) == null ? void 0 : _a.anchorNode;
        return composedPathFallback(target);
      } else {
        const path = domEvent.composedPath != null ? domEvent.composedPath() : composedPathFallback(domEvent.target);
        return path;
      }
    }
    function composedPathFallback(target) {
      const path = [];
      while (target != null && target !== document.body) {
        path.push(target);
        target = target.parentNode;
      }
      return path;
    }
    function getResponderId(node) {
      if (node != null) {
        return node[keyName];
      }
      return null;
    }
    function setResponderId(node, id) {
      if (node != null) {
        node[keyName] = id;
      }
    }
    function getResponderPaths(domEvent) {
      const idPath = [];
      const nodePath = [];
      const eventPath = getEventPath(domEvent);
      for (let i = 0; i < eventPath.length; i++) {
        const node = eventPath[i];
        const id = getResponderId(node);
        if (id != null) {
          idPath.push(id);
          nodePath.push(node);
        }
      }
      return { idPath, nodePath };
    }
    function getLowestCommonAncestor(pathA, pathB) {
      let pathALength = pathA.length;
      let pathBLength = pathB.length;
      if (
        // If either path is empty
        pathALength === 0 || pathBLength === 0 || // If the last elements aren't the same there can't be a common ancestor
        // that is connected to the responder system
        pathA[pathALength - 1] !== pathB[pathBLength - 1]
      ) {
        return null;
      }
      let itemA = pathA[0];
      let indexA = 0;
      let itemB = pathB[0];
      let indexB = 0;
      if (pathALength - pathBLength > 0) {
        indexA = pathALength - pathBLength;
        itemA = pathA[indexA];
        pathALength = pathBLength;
      }
      if (pathBLength - pathALength > 0) {
        indexB = pathBLength - pathALength;
        itemB = pathB[indexB];
        pathBLength = pathALength;
      }
      let depth = pathALength;
      while (depth--) {
        if (itemA === itemB) {
          return itemA;
        }
        itemA = pathA[indexA++];
        itemB = pathB[indexB++];
      }
      return null;
    }
    function hasTargetTouches(target, touches) {
      if (!touches || touches.length === 0) {
        return false;
      }
      for (let i = 0; i < touches.length; i++) {
        const node = touches[i].target;
        if (node != null) {
          if (target.contains(node)) {
            return true;
          }
        }
      }
      return false;
    }
    function hasValidSelection(domEvent) {
      if (domEvent.type === "selectionchange") {
        return isSelectionValid();
      }
      return domEvent.type === "select";
    }
    function isPrimaryPointerDown(domEvent) {
      const { altKey, button, buttons, ctrlKey, type } = domEvent;
      const isTouch = type === "touchstart" || type === "touchmove";
      const isPrimaryMouseDown = type === "mousedown" && (button === 0 || buttons === 1);
      const isPrimaryMouseMove = type === "mousemove" && buttons === 1;
      const noModifiers = altKey === false && ctrlKey === false;
      if (isTouch || isPrimaryMouseDown && noModifiers || isPrimaryMouseMove && noModifiers) {
        return true;
      }
      return false;
    }
    function isSelectionValid() {
      const selection = window.getSelection();
      if (!selection)
        return false;
      const string = selection.toString();
      const anchorNode = selection.anchorNode;
      const focusNode = selection.focusNode;
      const isTextNode = anchorNode && anchorNode.nodeType === window.Node.TEXT_NODE || focusNode && focusNode.nodeType === window.Node.TEXT_NODE;
      return string.length >= 1 && string !== "\n" && !!isTextNode;
    }
  }
});

// ../react-native-use-responder-events/dist/cjs/createResponderEvent.js
var require_createResponderEvent = __commonJS({
  "../react-native-use-responder-events/dist/cjs/createResponderEvent.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var createResponderEvent_exports = {};
    __export2(createResponderEvent_exports, {
      default: () => createResponderEvent
    });
    module2.exports = __toCommonJS2(createResponderEvent_exports);
    var import_utils = require_utils();
    var emptyFunction = () => {
    };
    var emptyObject = {};
    var emptyArray = [];
    function normalizeIdentifier(identifier) {
      return identifier > 20 ? identifier % 20 : identifier;
    }
    function createResponderEvent(domEvent, responderTouchHistoryStore) {
      let rect;
      let propagationWasStopped = false;
      let changedTouches;
      let touches;
      const domEventChangedTouches = domEvent.changedTouches;
      const domEventType = domEvent.type;
      const metaKey = domEvent.metaKey === true;
      const shiftKey = domEvent.shiftKey === true;
      const force = (domEventChangedTouches == null ? void 0 : domEventChangedTouches[0].force) || 0;
      const identifier = normalizeIdentifier((domEventChangedTouches == null ? void 0 : domEventChangedTouches[0].identifier) || 0);
      const clientX = (domEventChangedTouches == null ? void 0 : domEventChangedTouches[0].clientX) || domEvent.clientX;
      const clientY = (domEventChangedTouches == null ? void 0 : domEventChangedTouches[0].clientY) || domEvent.clientY;
      const pageX = (domEventChangedTouches == null ? void 0 : domEventChangedTouches[0].pageX) || domEvent.pageX;
      const pageY = (domEventChangedTouches == null ? void 0 : domEventChangedTouches[0].pageY) || domEvent.pageY;
      const preventDefault = typeof domEvent.preventDefault === "function" ? domEvent.preventDefault.bind(domEvent) : emptyFunction;
      const timestamp = domEvent.timeStamp;
      function normalizeTouches(touches2) {
        return Array.prototype.slice.call(touches2).map((touch) => {
          return {
            force: touch.force,
            identifier: normalizeIdentifier(touch.identifier),
            get locationX() {
              return locationX(touch.clientX);
            },
            get locationY() {
              return locationY(touch.clientY);
            },
            pageX: touch.pageX,
            pageY: touch.pageY,
            target: touch.target,
            timestamp
          };
        });
      }
      if (domEventChangedTouches != null) {
        changedTouches = normalizeTouches(domEventChangedTouches);
        touches = normalizeTouches(domEvent.touches);
      } else {
        const emulatedTouches = [
          {
            force,
            identifier,
            get locationX() {
              return locationX(clientX);
            },
            get locationY() {
              return locationY(clientY);
            },
            pageX,
            pageY,
            target: domEvent.target,
            timestamp
          }
        ];
        changedTouches = emulatedTouches;
        touches = domEventType === "mouseup" || domEventType === "dragstart" ? emptyArray : emulatedTouches;
      }
      const responderEvent = {
        bubbles: true,
        cancelable: true,
        // `currentTarget` is set before dispatch
        currentTarget: null,
        defaultPrevented: domEvent.defaultPrevented,
        dispatchConfig: emptyObject,
        eventPhase: domEvent.eventPhase,
        isDefaultPrevented() {
          return domEvent.defaultPrevented;
        },
        isPropagationStopped() {
          return propagationWasStopped;
        },
        isTrusted: domEvent.isTrusted,
        nativeEvent: {
          altKey: false,
          ctrlKey: false,
          metaKey,
          shiftKey,
          changedTouches,
          force,
          identifier,
          get locationX() {
            return locationX(clientX);
          },
          get locationY() {
            return locationY(clientY);
          },
          pageX,
          pageY,
          target: domEvent.target,
          timestamp,
          touches,
          type: domEventType
        },
        persist: emptyFunction,
        preventDefault,
        stopPropagation() {
          propagationWasStopped = true;
        },
        target: domEvent.target,
        timeStamp: timestamp,
        touchHistory: responderTouchHistoryStore.touchHistory
      };
      function locationX(x) {
        rect = rect || (0, import_utils.getBoundingClientRect)(responderEvent.currentTarget);
        if (rect) {
          return x - rect.left;
        }
      }
      function locationY(y) {
        rect = rect || (0, import_utils.getBoundingClientRect)(responderEvent.currentTarget);
        if (rect) {
          return y - rect.top;
        }
      }
      return responderEvent;
    }
  }
});

// ../react-native-use-responder-events/dist/cjs/types.js
var require_types = __commonJS({
  "../react-native-use-responder-events/dist/cjs/types.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var types_exports = {};
    __export2(types_exports, {
      BLUR: () => BLUR,
      CONTEXT_MENU: () => CONTEXT_MENU,
      FOCUS_OUT: () => FOCUS_OUT,
      MOUSE_CANCEL: () => MOUSE_CANCEL,
      MOUSE_DOWN: () => MOUSE_DOWN,
      MOUSE_MOVE: () => MOUSE_MOVE,
      MOUSE_UP: () => MOUSE_UP,
      SCROLL: () => SCROLL,
      SELECT: () => SELECT,
      SELECTION_CHANGE: () => SELECTION_CHANGE,
      TOUCH_CANCEL: () => TOUCH_CANCEL,
      TOUCH_END: () => TOUCH_END,
      TOUCH_MOVE: () => TOUCH_MOVE,
      TOUCH_START: () => TOUCH_START,
      isCancelish: () => isCancelish,
      isEndish: () => isEndish,
      isMoveish: () => isMoveish,
      isScroll: () => isScroll,
      isSelectionChange: () => isSelectionChange,
      isStartish: () => isStartish
    });
    module2.exports = __toCommonJS2(types_exports);
    var BLUR = "blur";
    var CONTEXT_MENU = "contextmenu";
    var FOCUS_OUT = "focusout";
    var MOUSE_DOWN = "mousedown";
    var MOUSE_MOVE = "mousemove";
    var MOUSE_UP = "mouseup";
    var MOUSE_CANCEL = "dragstart";
    var TOUCH_START = "touchstart";
    var TOUCH_MOVE = "touchmove";
    var TOUCH_END = "touchend";
    var TOUCH_CANCEL = "touchcancel";
    var SCROLL = "scroll";
    var SELECT = "select";
    var SELECTION_CHANGE = "selectionchange";
    function isStartish(eventType) {
      return eventType === TOUCH_START || eventType === MOUSE_DOWN;
    }
    function isMoveish(eventType) {
      return eventType === TOUCH_MOVE || eventType === MOUSE_MOVE;
    }
    function isEndish(eventType) {
      return eventType === TOUCH_END || eventType === MOUSE_UP || isCancelish(eventType);
    }
    function isCancelish(eventType) {
      return eventType === TOUCH_CANCEL || eventType === MOUSE_CANCEL;
    }
    function isScroll(eventType) {
      return eventType === SCROLL;
    }
    function isSelectionChange(eventType) {
      return eventType === SELECT || eventType === SELECTION_CHANGE;
    }
  }
});

// ../react-native-use-responder-events/dist/cjs/ResponderTouchHistoryStore.js
var require_ResponderTouchHistoryStore = __commonJS({
  "../react-native-use-responder-events/dist/cjs/ResponderTouchHistoryStore.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var ResponderTouchHistoryStore_exports = {};
    __export2(ResponderTouchHistoryStore_exports, {
      ResponderTouchHistoryStore: () => ResponderTouchHistoryStore
    });
    module2.exports = __toCommonJS2(ResponderTouchHistoryStore_exports);
    var import_types = require_types();
    var MAX_TOUCH_BANK = 20;
    function timestampForTouch(touch) {
      return touch["timeStamp"] || touch.timestamp;
    }
    function createTouchRecord(touch) {
      return {
        touchActive: true,
        startPageX: touch.pageX,
        startPageY: touch.pageY,
        startTimeStamp: timestampForTouch(touch),
        currentPageX: touch.pageX,
        currentPageY: touch.pageY,
        currentTimeStamp: timestampForTouch(touch),
        previousPageX: touch.pageX,
        previousPageY: touch.pageY,
        previousTimeStamp: timestampForTouch(touch)
      };
    }
    function resetTouchRecord(touchRecord, touch) {
      touchRecord.touchActive = true;
      touchRecord.startPageX = touch.pageX;
      touchRecord.startPageY = touch.pageY;
      touchRecord.startTimeStamp = timestampForTouch(touch);
      touchRecord.currentPageX = touch.pageX;
      touchRecord.currentPageY = touch.pageY;
      touchRecord.currentTimeStamp = timestampForTouch(touch);
      touchRecord.previousPageX = touch.pageX;
      touchRecord.previousPageY = touch.pageY;
      touchRecord.previousTimeStamp = timestampForTouch(touch);
    }
    function getTouchIdentifier({ identifier }) {
      if (identifier == null) {
        console.error("Touch object is missing identifier.");
      }
      if (process.env.NODE_ENV === "development") {
        if (identifier > MAX_TOUCH_BANK) {
          console.error(
            "Touch identifier %s is greater than maximum supported %s which causes performance issues backfilling array locations for all of the indices.",
            identifier,
            MAX_TOUCH_BANK
          );
        }
      }
      return identifier;
    }
    function recordTouchStart(touch, touchHistory) {
      const identifier = getTouchIdentifier(touch);
      const touchRecord = touchHistory.touchBank[identifier];
      if (touchRecord) {
        resetTouchRecord(touchRecord, touch);
      } else {
        touchHistory.touchBank[identifier] = createTouchRecord(touch);
      }
      touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
    }
    function recordTouchMove(touch, touchHistory) {
      const touchRecord = touchHistory.touchBank[getTouchIdentifier(touch)];
      if (touchRecord) {
        touchRecord.touchActive = true;
        touchRecord.previousPageX = touchRecord.currentPageX;
        touchRecord.previousPageY = touchRecord.currentPageY;
        touchRecord.previousTimeStamp = touchRecord.currentTimeStamp;
        touchRecord.currentPageX = touch.pageX;
        touchRecord.currentPageY = touch.pageY;
        touchRecord.currentTimeStamp = timestampForTouch(touch);
        touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
      } else {
        console.warn(
          "Cannot record touch move without a touch start.\n",
          `Touch Move: ${printTouch(touch)}
`,
          `Touch Bank: ${printTouchBank(touchHistory)}`
        );
      }
    }
    function recordTouchEnd(touch, touchHistory) {
      const touchRecord = touchHistory.touchBank[getTouchIdentifier(touch)];
      if (touchRecord) {
        touchRecord.touchActive = false;
        touchRecord.previousPageX = touchRecord.currentPageX;
        touchRecord.previousPageY = touchRecord.currentPageY;
        touchRecord.previousTimeStamp = touchRecord.currentTimeStamp;
        touchRecord.currentPageX = touch.pageX;
        touchRecord.currentPageY = touch.pageY;
        touchRecord.currentTimeStamp = timestampForTouch(touch);
        touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
      } else {
        console.warn(
          "Cannot record touch end without a touch start.\n",
          `Touch End: ${printTouch(touch)}
`,
          `Touch Bank: ${printTouchBank(touchHistory)}`
        );
      }
    }
    function printTouch(touch) {
      return JSON.stringify({
        identifier: touch.identifier,
        pageX: touch.pageX,
        pageY: touch.pageY,
        timestamp: timestampForTouch(touch)
      });
    }
    function printTouchBank(touchHistory) {
      const { touchBank } = touchHistory;
      let printed = JSON.stringify(touchBank.slice(0, MAX_TOUCH_BANK));
      if (touchBank.length > MAX_TOUCH_BANK) {
        printed += ` (original size: ${touchBank.length})`;
      }
      return printed;
    }
    var ResponderTouchHistoryStore = class {
      constructor() {
        this._touchHistory = {
          touchBank: [],
          //Array<TouchRecord>
          numberActiveTouches: 0,
          // If there is only one active touch, we remember its location. This prevents
          // us having to loop through all of the touches all the time in the most
          // common case.
          indexOfSingleActiveTouch: -1,
          mostRecentTimeStamp: 0
        };
      }
      recordTouchTrack(topLevelType, nativeEvent) {
        const touchHistory = this._touchHistory;
        if ((0, import_types.isMoveish)(topLevelType)) {
          nativeEvent.changedTouches.forEach((touch) => recordTouchMove(touch, touchHistory));
        } else if ((0, import_types.isStartish)(topLevelType)) {
          nativeEvent.changedTouches.forEach((touch) => recordTouchStart(touch, touchHistory));
          touchHistory.numberActiveTouches = nativeEvent.touches.length;
          if (touchHistory.numberActiveTouches === 1) {
            touchHistory.indexOfSingleActiveTouch = nativeEvent.touches[0].identifier;
          }
        } else if ((0, import_types.isEndish)(topLevelType)) {
          nativeEvent.changedTouches.forEach((touch) => recordTouchEnd(touch, touchHistory));
          touchHistory.numberActiveTouches = nativeEvent.touches.length;
          if (touchHistory.numberActiveTouches === 1) {
            const { touchBank } = touchHistory;
            for (let i = 0; i < touchBank.length; i++) {
              const touchTrackToCheck = touchBank[i];
              if (touchTrackToCheck == null ? void 0 : touchTrackToCheck.touchActive) {
                touchHistory.indexOfSingleActiveTouch = i;
                break;
              }
            }
            if (process.env.NODE_ENV === "development") {
              const activeRecord = touchBank[touchHistory.indexOfSingleActiveTouch];
              if (!(activeRecord == null ? void 0 : activeRecord.touchActive)) {
                console.error("Cannot find single active touch.");
              }
            }
          }
        }
      }
      get touchHistory() {
        return this._touchHistory;
      }
    };
  }
});

// ../react-native-use-responder-events/dist/cjs/ResponderSystem.js
var require_ResponderSystem = __commonJS({
  "../react-native-use-responder-events/dist/cjs/ResponderSystem.js"(exports, module2) {
    "use strict";
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var ResponderSystem_exports = {};
    __export2(ResponderSystem_exports, {
      addNode: () => addNode,
      attachListeners: () => attachListeners,
      getResponderNode: () => getResponderNode,
      removeNode: () => removeNode,
      terminateResponder: () => terminateResponder
    });
    module2.exports = __toCommonJS2(ResponderSystem_exports);
    var import_createResponderEvent = __toESM2(require_createResponderEvent());
    var import_ResponderTouchHistoryStore = require_ResponderTouchHistoryStore();
    var import_types = require_types();
    var import_utils = require_utils();
    var import_utils2 = require_utils();
    var emptyObject = {};
    var startRegistration = [
      "onStartShouldSetResponderCapture",
      "onStartShouldSetResponder",
      { bubbles: true }
    ];
    var moveRegistration = [
      "onMoveShouldSetResponderCapture",
      "onMoveShouldSetResponder",
      { bubbles: true }
    ];
    var scrollRegistration = [
      "onScrollShouldSetResponderCapture",
      "onScrollShouldSetResponder",
      { bubbles: false }
    ];
    var shouldSetResponderEvents = {
      touchstart: startRegistration,
      mousedown: startRegistration,
      touchmove: moveRegistration,
      mousemove: moveRegistration,
      scroll: scrollRegistration
    };
    var emptyResponder = { id: null, idPath: null, node: null };
    var responderListenersMap = /* @__PURE__ */ new Map();
    var isEmulatingMouseEvents = false;
    var trackedTouchCount = 0;
    var currentResponder = {
      id: null,
      node: null,
      idPath: null
    };
    var responderTouchHistoryStore = new import_ResponderTouchHistoryStore.ResponderTouchHistoryStore();
    function changeCurrentResponder(responder) {
      currentResponder = responder;
    }
    function getResponderConfig(id) {
      const config = responderListenersMap.get(id);
      return config != null ? config : emptyObject;
    }
    function eventListener(domEvent) {
      const eventType = domEvent.type;
      const eventTarget = domEvent.target;
      if (eventType === "touchstart") {
        isEmulatingMouseEvents = true;
      }
      if (eventType === "touchmove" || trackedTouchCount > 1) {
        isEmulatingMouseEvents = false;
      }
      if (
        // Ignore browser emulated mouse events
        eventType === "mousedown" && isEmulatingMouseEvents || eventType === "mousemove" && isEmulatingMouseEvents || // Ignore mousemove if a mousedown didn't occur first
        eventType === "mousemove" && trackedTouchCount < 1
      ) {
        return;
      }
      if (isEmulatingMouseEvents && eventType === "mouseup") {
        if (trackedTouchCount === 0) {
          isEmulatingMouseEvents = false;
        }
        return;
      }
      const isStartEvent = (0, import_types.isStartish)(eventType) && (0, import_utils2.isPrimaryPointerDown)(domEvent);
      const isMoveEvent = (0, import_types.isMoveish)(eventType);
      const isEndEvent = (0, import_types.isEndish)(eventType);
      const isScrollEvent = (0, import_types.isScroll)(eventType);
      const isSelectionChangeEvent = (0, import_types.isSelectionChange)(eventType);
      const responderEvent = (0, import_createResponderEvent.default)(domEvent, responderTouchHistoryStore);
      if (isStartEvent || isMoveEvent || isEndEvent) {
        if (domEvent.touches) {
          trackedTouchCount = domEvent.touches.length;
        } else {
          if (isStartEvent) {
            trackedTouchCount = 1;
          } else if (isEndEvent) {
            trackedTouchCount = 0;
          }
        }
        responderTouchHistoryStore.recordTouchTrack(
          eventType,
          responderEvent.nativeEvent
        );
      }
      let eventPaths = (0, import_utils2.getResponderPaths)(domEvent);
      let wasNegotiated = false;
      let wantsResponder;
      if (isStartEvent || isMoveEvent || isScrollEvent && trackedTouchCount > 0) {
        const currentResponderIdPath = currentResponder.idPath;
        const eventIdPath = eventPaths.idPath;
        if (currentResponderIdPath != null && eventIdPath != null) {
          const lowestCommonAncestor = (0, import_utils2.getLowestCommonAncestor)(
            currentResponderIdPath,
            eventIdPath
          );
          if (lowestCommonAncestor != null) {
            const indexOfLowestCommonAncestor = eventIdPath.indexOf(lowestCommonAncestor);
            const index = indexOfLowestCommonAncestor + (lowestCommonAncestor === currentResponder.id ? 1 : 0);
            eventPaths = {
              idPath: eventIdPath.slice(index),
              nodePath: eventPaths.nodePath.slice(index)
            };
          } else {
            eventPaths = null;
          }
        }
        if (eventPaths != null) {
          wantsResponder = findWantsResponder(eventPaths, domEvent, responderEvent);
          if (wantsResponder != null) {
            attemptTransfer(responderEvent, wantsResponder);
            wasNegotiated = true;
          }
        }
      }
      if (currentResponder.id != null && currentResponder.node != null) {
        const { id, node } = currentResponder;
        const {
          onResponderStart,
          onResponderMove,
          onResponderEnd,
          onResponderRelease,
          onResponderTerminate,
          onResponderTerminationRequest
        } = getResponderConfig(id);
        responderEvent.bubbles = false;
        responderEvent.cancelable = false;
        responderEvent.currentTarget = node;
        if (isStartEvent) {
          if (onResponderStart != null) {
            responderEvent.dispatchConfig.registrationName = "onResponderStart";
            onResponderStart(responderEvent);
          }
        } else if (isMoveEvent) {
          if (onResponderMove != null) {
            responderEvent.dispatchConfig.registrationName = "onResponderMove";
            onResponderMove(responderEvent);
          }
        } else {
          const isTerminateEvent = (0, import_types.isCancelish)(eventType) || // native context menu
          eventType === "contextmenu" || // window blur
          eventType === "blur" && eventTarget === window || // responder (or ancestors) blur
          eventType === "blur" && eventTarget.contains(node) && domEvent.relatedTarget !== node || // native scroll without using a pointer
          isScrollEvent && trackedTouchCount === 0 || // native scroll on node that is parent of the responder (allow siblings to scroll)
          isScrollEvent && eventTarget.contains(node) && eventTarget !== node || // native select/selectionchange on node
          isSelectionChangeEvent && (0, import_utils2.hasValidSelection)(domEvent);
          const isReleaseEvent = isEndEvent && !isTerminateEvent && !(0, import_utils2.hasTargetTouches)(node, domEvent.touches);
          if (isEndEvent) {
            if (onResponderEnd != null) {
              responderEvent.dispatchConfig.registrationName = "onResponderEnd";
              onResponderEnd(responderEvent);
            }
          }
          if (isReleaseEvent) {
            if (onResponderRelease != null) {
              responderEvent.dispatchConfig.registrationName = "onResponderRelease";
              onResponderRelease(responderEvent);
            }
            changeCurrentResponder(emptyResponder);
          }
          if (isTerminateEvent) {
            let shouldTerminate = true;
            if (eventType === "contextmenu" || eventType === "scroll" || eventType === "selectionchange") {
              if (wasNegotiated) {
                shouldTerminate = false;
              } else if (onResponderTerminationRequest != null) {
                responderEvent.dispatchConfig.registrationName = "onResponderTerminationRequest";
                if (onResponderTerminationRequest(responderEvent) === false) {
                  shouldTerminate = false;
                }
              }
            }
            if (shouldTerminate) {
              if (onResponderTerminate != null) {
                responderEvent.dispatchConfig.registrationName = "onResponderTerminate";
                onResponderTerminate(responderEvent);
              }
              changeCurrentResponder(emptyResponder);
              isEmulatingMouseEvents = false;
              trackedTouchCount = 0;
            }
          }
        }
      }
    }
    function findWantsResponder(eventPaths, domEvent, responderEvent) {
      const shouldSetCallbacks = shouldSetResponderEvents[domEvent.type];
      if (shouldSetCallbacks != null) {
        const { idPath, nodePath } = eventPaths;
        const shouldSetCallbackCaptureName = shouldSetCallbacks[0];
        const shouldSetCallbackBubbleName = shouldSetCallbacks[1];
        const { bubbles } = shouldSetCallbacks[2];
        const check = function(id, node, callbackName) {
          const config = getResponderConfig(id);
          const shouldSetCallback = config[callbackName];
          if (shouldSetCallback != null) {
            responderEvent.currentTarget = node;
            if (shouldSetCallback(responderEvent) === true) {
              const prunedIdPath = idPath.slice(idPath.indexOf(id));
              return { id, node, idPath: prunedIdPath };
            }
          }
        };
        for (let i = idPath.length - 1; i >= 0; i--) {
          const id = idPath[i];
          const node = nodePath[i];
          const result = check(id, node, shouldSetCallbackCaptureName);
          if (result != null) {
            return result;
          }
          if (responderEvent.isPropagationStopped() === true) {
            return;
          }
        }
        if (bubbles) {
          for (let i = 0; i < idPath.length; i++) {
            const id = idPath[i];
            const node = nodePath[i];
            const result = check(id, node, shouldSetCallbackBubbleName);
            if (result != null) {
              return result;
            }
            if (responderEvent.isPropagationStopped() === true) {
              return;
            }
          }
        } else {
          const id = idPath[0];
          const node = nodePath[0];
          const target = domEvent.target;
          if (target === node) {
            return check(id, node, shouldSetCallbackBubbleName);
          }
        }
      }
    }
    function attemptTransfer(responderEvent, wantsResponder) {
      const { id: currentId, node: currentNode } = currentResponder;
      const { id, node } = wantsResponder;
      const { onResponderGrant, onResponderReject } = getResponderConfig(id);
      responderEvent.bubbles = false;
      responderEvent.cancelable = false;
      responderEvent.currentTarget = node;
      if (currentId == null) {
        if (onResponderGrant != null) {
          responderEvent.currentTarget = node;
          responderEvent.dispatchConfig.registrationName = "onResponderGrant";
          onResponderGrant(responderEvent);
        }
        changeCurrentResponder(wantsResponder);
      } else {
        const { onResponderTerminate, onResponderTerminationRequest } = getResponderConfig(currentId);
        let allowTransfer = true;
        if (onResponderTerminationRequest != null) {
          responderEvent.currentTarget = currentNode;
          responderEvent.dispatchConfig.registrationName = "onResponderTerminationRequest";
          if (onResponderTerminationRequest(responderEvent) === false) {
            allowTransfer = false;
          }
        }
        if (allowTransfer) {
          if (onResponderTerminate != null) {
            responderEvent.currentTarget = currentNode;
            responderEvent.dispatchConfig.registrationName = "onResponderTerminate";
            onResponderTerminate(responderEvent);
          }
          if (onResponderGrant != null) {
            responderEvent.currentTarget = node;
            responderEvent.dispatchConfig.registrationName = "onResponderGrant";
            onResponderGrant(responderEvent);
          }
          changeCurrentResponder(wantsResponder);
        } else {
          if (onResponderReject != null) {
            responderEvent.currentTarget = node;
            responderEvent.dispatchConfig.registrationName = "onResponderReject";
            onResponderReject(responderEvent);
          }
        }
      }
    }
    var documentEventsCapturePhase = ["blur", "scroll"];
    var documentEventsBubblePhase = [
      // mouse
      "mousedown",
      "mousemove",
      "mouseup",
      "dragstart",
      // touch
      "touchstart",
      "touchmove",
      "touchend",
      "touchcancel",
      // other
      "contextmenu",
      "select",
      "selectionchange"
    ];
    var isTamaguiResponderActive = Symbol();
    function attachListeners() {
      if (import_utils.canUseDOM && !window[isTamaguiResponderActive]) {
        window.addEventListener("blur", eventListener);
        documentEventsBubblePhase.forEach((eventType) => {
          document.addEventListener(eventType, eventListener);
        });
        documentEventsCapturePhase.forEach((eventType) => {
          document.addEventListener(eventType, eventListener, true);
        });
        window[isTamaguiResponderActive] = true;
      }
    }
    function addNode(id, node, config) {
      (0, import_utils2.setResponderId)(node, id);
      responderListenersMap.set(id, config);
    }
    function removeNode(id) {
      if (currentResponder.id === id) {
        terminateResponder();
      }
      if (responderListenersMap.has(id)) {
        responderListenersMap.delete(id);
      }
    }
    function terminateResponder() {
      const { id, node } = currentResponder;
      if (id != null && node != null) {
        const { onResponderTerminate } = getResponderConfig(id);
        if (onResponderTerminate != null) {
          const event = (0, import_createResponderEvent.default)({}, responderTouchHistoryStore);
          event.currentTarget = node;
          onResponderTerminate(event);
        }
        changeCurrentResponder(emptyResponder);
      }
      isEmulatingMouseEvents = false;
      trackedTouchCount = 0;
    }
    function getResponderNode() {
      return currentResponder.node;
    }
  }
});

// ../react-native-use-responder-events/dist/cjs/useResponderEvents.js
var require_useResponderEvents = __commonJS({
  "../react-native-use-responder-events/dist/cjs/useResponderEvents.js"(exports, module2) {
    "use strict";
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __reExport2 = (target, mod, secondTarget) => (__copyProps2(target, mod, "default"), secondTarget && __copyProps2(secondTarget, mod, "default"));
    var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var useResponderEvents_exports = {};
    __export2(useResponderEvents_exports, {
      useResponderEvents: () => useResponderEvents2
    });
    module2.exports = __toCommonJS2(useResponderEvents_exports);
    var React = __toESM2(require("react"));
    var ResponderSystem = __toESM2(require_ResponderSystem());
    __reExport2(useResponderEvents_exports, require_utils(), module2.exports);
    var emptyObject = {};
    function useResponderEvents2(hostRef, config = emptyObject) {
      const id = React.useId();
      const isAttachedRef = React.useRef(false);
      React.useEffect(() => {
        ResponderSystem.attachListeners();
        return () => {
          ResponderSystem.removeNode(id);
        };
      }, [id]);
      React.useEffect(() => {
        const {
          onMoveShouldSetResponder,
          onMoveShouldSetResponderCapture,
          onScrollShouldSetResponder,
          onScrollShouldSetResponderCapture,
          onSelectionChangeShouldSetResponder,
          onSelectionChangeShouldSetResponderCapture,
          onStartShouldSetResponder,
          onStartShouldSetResponderCapture
        } = config;
        const requiresResponderSystem = onMoveShouldSetResponder != null || onMoveShouldSetResponderCapture != null || onScrollShouldSetResponder != null || onScrollShouldSetResponderCapture != null || onSelectionChangeShouldSetResponder != null || onSelectionChangeShouldSetResponderCapture != null || onStartShouldSetResponder != null || onStartShouldSetResponderCapture != null;
        const node = hostRef.current;
        if (requiresResponderSystem) {
          ResponderSystem.addNode(id, node, config);
          isAttachedRef.current = true;
        } else if (isAttachedRef.current) {
          ResponderSystem.removeNode(id);
          isAttachedRef.current = false;
        }
      }, [config, hostRef, id]);
      if (process.env.NODE_ENV === "development") {
        React.useDebugValue({
          isResponder: hostRef.current === ResponderSystem.getResponderNode()
        });
        React.useDebugValue(config);
      }
    }
  }
});

// ../react-native-use-responder-events/dist/cjs/index.js
var require_cjs = __commonJS({
  "../react-native-use-responder-events/dist/cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __reExport2 = (target, mod, secondTarget) => (__copyProps2(target, mod, "default"), secondTarget && __copyProps2(secondTarget, mod, "default"));
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports2 = {};
    module2.exports = __toCommonJS2(src_exports2);
    __reExport2(src_exports2, require_useResponderEvents(), module2.exports);
  }
});

// ../helpers/dist/cjs/clamp.js
var require_clamp = __commonJS({
  "../helpers/dist/cjs/clamp.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var clamp_exports = {};
    __export2(clamp_exports, {
      clamp: () => clamp
    });
    module2.exports = __toCommonJS2(clamp_exports);
    function clamp(value, [min, max]) {
      return Math.min(max, Math.max(min, value));
    }
  }
});

// ../helpers/dist/cjs/composeEventHandlers.js
var require_composeEventHandlers = __commonJS({
  "../helpers/dist/cjs/composeEventHandlers.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var composeEventHandlers_exports = {};
    __export2(composeEventHandlers_exports, {
      composeEventHandlers: () => composeEventHandlers2
    });
    module2.exports = __toCommonJS2(composeEventHandlers_exports);
    function composeEventHandlers2(og, next, { checkDefaultPrevented = true } = {}) {
      if (!og || !next) {
        return next || og || void 0;
      }
      return function(event) {
        og == null ? void 0 : og(event);
        if (!event || !(checkDefaultPrevented && "defaultPrevented" in event) || // @ts-ignore
        "defaultPrevented" in event && !event.defaultPrevented) {
          return next == null ? void 0 : next(event);
        }
      };
    }
  }
});

// ../helpers/dist/cjs/concatClassName.js
var require_concatClassName = __commonJS({
  "../helpers/dist/cjs/concatClassName.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var concatClassName_exports = {};
    __export2(concatClassName_exports, {
      concatClassName: () => concatClassName
    });
    module2.exports = __toCommonJS2(concatClassName_exports);
    function concatClassName(_cn) {
      const args = arguments;
      const usedPrefixes = [];
      let final = "";
      const len = args.length;
      let propObjects = null;
      for (let x = len; x >= 0; x--) {
        const cns = args[x];
        if (!cns)
          continue;
        if (!Array.isArray(cns) && typeof cns !== "string") {
          propObjects = propObjects || [];
          propObjects.push(cns);
          continue;
        }
        const names = Array.isArray(cns) ? cns : cns.split(" ");
        const numNames = names.length;
        for (let i = numNames - 1; i >= 0; i--) {
          const name = names[i];
          if (!name || name === " ")
            continue;
          if (name[0] !== "_") {
            final = name + " " + final;
            continue;
          }
          const splitIndex = name.indexOf("-");
          if (splitIndex < 1) {
            final = name + " " + final;
            continue;
          }
          const nextChar = name[splitIndex + 1];
          const isMediaQuery = nextChar === "_";
          const styleKey = name.slice(1, name.lastIndexOf("-"));
          const mediaKey = isMediaQuery ? name.slice(splitIndex + 2, splitIndex + 7) : null;
          const uid = mediaKey ? styleKey + mediaKey : styleKey;
          if (usedPrefixes.indexOf(uid) > -1) {
            continue;
          }
          usedPrefixes.push(uid);
          const propName = styleKey;
          if (propName && propObjects) {
            if (propObjects.some((po) => {
              if (mediaKey) {
                const propKey = pseudoInvert[mediaKey];
                return po && po[propKey] && propName in po[propKey] && po[propKey] !== null;
              }
              const res = po && propName in po && po[propName] !== null;
              return res;
            })) {
              continue;
            }
          }
          final = name + " " + final;
        }
      }
      return final;
    }
    var pseudoInvert = {
      hover: "hoverStyle",
      focus: "focusStyle",
      press: "pressStyle"
    };
  }
});

// ../constants/dist/cjs/index.js
var require_cjs2 = __commonJS({
  "../constants/dist/cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports2 = {};
    __export2(src_exports2, {
      currentPlatform: () => currentPlatform,
      isAndroid: () => isAndroid,
      isChrome: () => isChrome,
      isClient: () => isClient,
      isIos: () => isIos,
      isServer: () => isServer,
      isTouchable: () => isTouchable,
      isWeb: () => isWeb,
      isWebTouchable: () => isWebTouchable,
      isWindowDefined: () => isWindowDefined,
      useIsomorphicLayoutEffect: () => useIsomorphicLayoutEffect3
    });
    module2.exports = __toCommonJS2(src_exports2);
    var import_react = require("react");
    var isWeb = process.env.TAMAGUI_TARGET === "web";
    var isWindowDefined = typeof window !== "undefined";
    var isServer = isWeb && !isWindowDefined;
    var isClient = isWeb && isWindowDefined;
    var useIsomorphicLayoutEffect3 = isServer ? import_react.useEffect : import_react.useLayoutEffect;
    var isChrome = typeof navigator !== "undefined" && /Chrome/.test(navigator.userAgent || "");
    var isWebTouchable = isClient && ("ontouchstart" in window || navigator.maxTouchPoints > 0);
    var isTouchable = !isWeb || isWebTouchable;
    var isAndroid = false;
    var isIos = false;
    var currentPlatform = "web";
    if (!process.env.TAMAGUI_TARGET) {
      console.warn(`\u26A0\uFE0F Must set TAMAGUI_TARGET (set TAMAGUI_SHOW_TRACE=1 to see trace)`);
      if (process.env.TAMAGUI_SHOW_TRACE) {
        console.trace();
      }
    }
    if (process.env.NODE_ENV === "development") {
      if (isClient && process.env.TAMAGUI_TARGET !== "web" && process.env.TAMAGUI_IGNORE_TARGET !== "1") {
        console.warn(
          `Must set TAMAGUI_TARGET to "web" for web apps - if you have window defined outside of the browser, set TAMAGUI_IGNORE_TARGET=1 to hide this`
        );
      }
    }
  }
});

// ../helpers/dist/cjs/validStyleProps.js
var require_validStyleProps = __commonJS({
  "../helpers/dist/cjs/validStyleProps.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var validStyleProps_exports = {};
    __export2(validStyleProps_exports, {
      stylePropsAll: () => stylePropsAll,
      stylePropsFont: () => stylePropsFont,
      stylePropsText: () => stylePropsText,
      stylePropsTextOnly: () => stylePropsTextOnly,
      stylePropsTransform: () => stylePropsTransform,
      stylePropsUnitless: () => stylePropsUnitless,
      stylePropsView: () => stylePropsView,
      tokenCategories: () => tokenCategories,
      validPseudoKeys: () => validPseudoKeys,
      validStyles: () => validStyles,
      validStylesOnBaseProps: () => validStylesOnBaseProps
    });
    module2.exports = __toCommonJS2(validStyleProps_exports);
    var import_constants2 = require_cjs2();
    var placeHolderTextColors = {
      placeholderTextColor: true
    };
    var validStylesOnBaseProps = {
      ...placeHolderTextColors
    };
    var textColors = {
      color: true,
      ...placeHolderTextColors,
      textDecorationColor: true,
      textShadowColor: true
    };
    var tokenCategories = {
      radius: {
        borderRadius: true,
        borderTopLeftRadius: true,
        borderTopRightRadius: true,
        borderBottomLeftRadius: true,
        borderBottomRightRadius: true
      },
      size: {
        width: true,
        height: true,
        minWidth: true,
        minHeight: true,
        maxWidth: true,
        maxHeight: true
      },
      zIndex: {
        zIndex: true
      },
      color: {
        backgroundColor: true,
        borderColor: true,
        borderBottomColor: true,
        borderTopColor: true,
        borderLeftColor: true,
        borderRightColor: true,
        borderEndColor: true,
        borderStartColor: true,
        shadowColor: true,
        ...textColors,
        ...process.env.TAMAGUI_TARGET === "web" && {
          outlineColor: true
        }
      }
    };
    var stylePropsUnitless = {
      WebkitLineClamp: true,
      animationIterationCount: true,
      aspectRatio: true,
      borderImageOutset: true,
      borderImageSlice: true,
      borderImageWidth: true,
      columnCount: true,
      flex: true,
      flexGrow: true,
      flexOrder: true,
      flexPositive: true,
      flexShrink: true,
      flexNegative: true,
      fontWeight: true,
      gridRow: true,
      gridRowEnd: true,
      gridRowGap: true,
      gridRowStart: true,
      gridColumn: true,
      gridColumnEnd: true,
      gridColumnGap: true,
      gridColumnStart: true,
      lineClamp: true,
      opacity: true,
      order: true,
      orphans: true,
      tabSize: true,
      widows: true,
      zIndex: true,
      zoom: true,
      scale: true,
      scaleX: true,
      scaleY: true,
      scaleZ: true,
      shadowOpacity: true
    };
    var stylePropsTransform = {
      x: true,
      y: true,
      scale: true,
      perspective: true,
      scaleX: true,
      scaleY: true,
      skewX: true,
      skewY: true,
      matrix: true,
      rotate: true,
      rotateY: true,
      rotateX: true,
      rotateZ: true
    };
    var stylePropsView = {
      backfaceVisibility: true,
      borderBottomEndRadius: true,
      borderBottomStartRadius: true,
      borderBottomWidth: true,
      borderLeftWidth: true,
      borderRightWidth: true,
      borderStyle: true,
      borderTopEndRadius: true,
      borderTopStartRadius: true,
      borderTopWidth: true,
      borderWidth: true,
      transform: true,
      alignContent: true,
      alignItems: true,
      alignSelf: true,
      borderEndWidth: true,
      borderStartWidth: true,
      bottom: true,
      display: true,
      end: true,
      flexBasis: true,
      flexDirection: true,
      flexWrap: true,
      gap: true,
      columnGap: true,
      rowGap: true,
      justifyContent: true,
      left: true,
      margin: true,
      marginBottom: true,
      marginEnd: true,
      marginHorizontal: true,
      marginLeft: true,
      marginRight: true,
      marginStart: true,
      marginTop: true,
      marginVertical: true,
      overflow: true,
      padding: true,
      paddingBottom: true,
      paddingEnd: true,
      paddingHorizontal: true,
      paddingLeft: true,
      paddingRight: true,
      paddingStart: true,
      paddingTop: true,
      paddingVertical: true,
      position: true,
      right: true,
      start: true,
      top: true,
      direction: true,
      shadowOffset: true,
      shadowRadius: true,
      ...tokenCategories.color,
      ...tokenCategories.radius,
      ...tokenCategories.size,
      ...tokenCategories.radius,
      ...validStylesOnBaseProps,
      ...stylePropsTransform,
      ...stylePropsUnitless,
      // allow a few web only ones
      ...process.env.TAMAGUI_TARGET === "web" && {
        // RN doesn't support specific border styles per-edge
        borderBottomStyle: true,
        borderTopStyle: true,
        borderLeftStyle: true,
        borderRightStyle: true,
        overflowX: true,
        overflowY: true,
        userSelect: true,
        cursor: true,
        contain: true,
        pointerEvents: true,
        boxSizing: true,
        boxShadow: true,
        outlineStyle: true,
        outlineOffset: true,
        outlineWidth: true
      },
      ...import_constants2.isAndroid ? { elevationAndroid: true } : {}
    };
    var stylePropsFont = {
      fontFamily: true,
      fontSize: true,
      fontStyle: true,
      fontWeight: true,
      letterSpacing: true,
      lineHeight: true,
      textTransform: true
    };
    var stylePropsTextOnly = {
      ...stylePropsFont,
      textAlign: true,
      textDecorationLine: true,
      textDecorationStyle: true,
      ...textColors,
      textShadowOffset: true,
      textShadowRadius: true,
      // allow some web only ones
      ...process.env.TAMAGUI_TARGET === "web" && {
        whiteSpace: true,
        wordWrap: true,
        textOverflow: true,
        textDecorationDistance: true,
        userSelect: true,
        selectable: true,
        cursor: true,
        WebkitLineClamp: true,
        WebkitBoxOrient: true
      }
    };
    var stylePropsText = {
      ...stylePropsView,
      ...stylePropsTextOnly
    };
    var stylePropsAll = stylePropsText;
    var validPseudoKeys = {
      enterStyle: true,
      exitStyle: true,
      hoverStyle: true,
      pressStyle: true,
      focusStyle: true
    };
    var validStyles = {
      ...validPseudoKeys,
      ...stylePropsView
    };
  }
});

// ../helpers/dist/cjs/types.js
var require_types2 = __commonJS({
  "../helpers/dist/cjs/types.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var types_exports = {};
    module2.exports = __toCommonJS2(types_exports);
  }
});

// ../simple-hash/dist/cjs/index.js
var require_cjs3 = __commonJS({
  "../simple-hash/dist/cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports2 = {};
    __export2(src_exports2, {
      simpleHash: () => simpleHash
    });
    module2.exports = __toCommonJS2(src_exports2);
    var cache = /* @__PURE__ */ new Map();
    var simpleHash = (str, hashMin = 10) => {
      if (cache.has(str)) {
        return cache.get(str);
      }
      let hash = 0;
      let valids = "";
      const len = str.length;
      for (let i = 0; i < len; i++) {
        const char = str.charCodeAt(i);
        if (hashMin !== "strict") {
          if (char === 46) {
            valids += "d0t";
          }
          if (isValidCSSCharCode(char) && len <= hashMin) {
            valids += str[i];
            continue;
          }
        }
        hash = hashChar(hash, str[i]);
      }
      const res = valids + (hash ? Math.abs(hash) : "");
      if (cache.size > 1e4) {
        cache.clear();
      }
      cache.set(str, res);
      return res;
    };
    var hashChar = (hash, c) => Math.imul(31, hash) + c.charCodeAt(0) | 0;
    function isValidCSSCharCode(code) {
      return (
        // A-Z
        code >= 65 && code <= 90 || // a-z
        code >= 97 && code <= 122 || // _
        code === 95 || // -
        code === 45 || // 0-9
        code >= 48 && code <= 57
      );
    }
  }
});

// ../helpers/dist/cjs/index.js
var require_cjs4 = __commonJS({
  "../helpers/dist/cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __reExport2 = (target, mod, secondTarget) => (__copyProps2(target, mod, "default"), secondTarget && __copyProps2(secondTarget, mod, "default"));
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports2 = {};
    module2.exports = __toCommonJS2(src_exports2);
    __reExport2(src_exports2, require_clamp(), module2.exports);
    __reExport2(src_exports2, require_composeEventHandlers(), module2.exports);
    __reExport2(src_exports2, require_concatClassName(), module2.exports);
    __reExport2(src_exports2, require_validStyleProps(), module2.exports);
    __reExport2(src_exports2, require_types2(), module2.exports);
    __reExport2(src_exports2, require_cjs3(), module2.exports);
  }
});

// ../web/dist/cjs/config.js
var require_config = __commonJS({
  "../web/dist/cjs/config.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var config_exports = {};
    __export2(config_exports, {
      configListeners: () => configListeners,
      getConfig: () => getConfig2,
      getFont: () => getFont,
      getThemes: () => getThemes2,
      getToken: () => getToken2,
      getTokenObject: () => getTokenObject,
      getTokenValue: () => getTokenValue2,
      getTokens: () => getTokens2,
      onConfiguredOnce: () => onConfiguredOnce,
      setConfig: () => setConfig,
      setConfigFont: () => setConfigFont,
      setTokens: () => setTokens,
      updateConfig: () => updateConfig2,
      useTokens: () => useTokens
    });
    module2.exports = __toCommonJS2(config_exports);
    var import_constants2 = require_cjs2();
    var conf;
    var setConfig = (next) => {
      conf = next;
      configListeners.forEach((cb) => cb(next));
    };
    var setConfigFont = (name, font, fontParsed) => {
      if (process.env.NODE_ENV === "development") {
        if (!conf)
          throw new Error(`Haven't called createTamagui yet`);
      }
      conf.fonts[name] = font;
      conf.fontsParsed[`$${name}`] = fontParsed;
    };
    var getConfig2 = () => {
      if (!conf) {
        throw new Error(
          process.env.NODE_ENV !== "production" ? `Missing tamagui config, you either have a duplicate config, or haven't set it up. Be sure createTamagui is called before rendering. Also, make sure all of your tamagui dependencies are on the same version (\`tamagui\`, \`@tamagui/package-name\`, etc.)` : "Err0"
        );
      }
      return conf;
    };
    var tokensMerged;
    function setTokens(_) {
      tokensMerged = _;
    }
    var getTokens2 = ({
      prefixed
    } = {}) => {
      if (process.env.NODE_ENV === "development") {
        if (!conf)
          throw new Error(`Haven't called createTamagui yet`);
      }
      const { tokens, tokensParsed } = conf;
      if (prefixed === false)
        return tokens;
      if (prefixed === true)
        return tokensParsed;
      return tokensMerged;
    };
    var getTokenObject = (value, group) => {
      var _a, _b;
      return conf.specificTokens[value] ?? (group ? (_a = tokensMerged[group]) == null ? void 0 : _a[value] : (_b = tokensMerged[Object.keys(tokensMerged).find((cat) => tokensMerged[cat][value]) || ""]) == null ? void 0 : _b[value]);
    };
    var getToken2 = (value, group, useVariable = import_constants2.isWeb) => {
      const token = getTokenObject(value, group);
      return useVariable ? token == null ? void 0 : token.variable : token == null ? void 0 : token.val;
    };
    var getTokenValue2 = (value, group) => {
      return getToken2(value, group, false);
    };
    var useTokens = getTokens2;
    var getThemes2 = () => conf.themes;
    var configListeners = /* @__PURE__ */ new Set();
    var onConfiguredOnce = (cb) => {
      if (conf) {
        cb(conf);
      } else {
        configListeners.add(cb);
      }
    };
    var updateConfig2 = (key, value) => {
      Object.assign(conf[key], value);
    };
    var getFont = (name) => {
      var _a;
      const conf2 = getConfig2();
      return conf2.fontsParsed[name] ?? ((_a = Object.entries(conf2.fontsParsed).find(
        ([k]) => {
          var _a2, _b;
          return ((_b = (_a2 = conf2.fontsParsed[k]) == null ? void 0 : _a2.family) == null ? void 0 : _b["val"]) === name;
        }
      )) == null ? void 0 : _a[1]);
    };
  }
});

// ../web/dist/cjs/createVariable.js
var require_createVariable = __commonJS({
  "../web/dist/cjs/createVariable.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var createVariable_exports = {};
    __export2(createVariable_exports, {
      createCSSVariable: () => createCSSVariable,
      createVariable: () => createVariable,
      didGetVariableValue: () => didGetVariableValue,
      getVariable: () => getVariable,
      getVariableName: () => getVariableName,
      getVariableValue: () => getVariableValue,
      getVariableVariable: () => getVariableVariable,
      isVariable: () => isVariable,
      setDidGetVariableValue: () => setDidGetVariableValue,
      variableToString: () => variableToString
    });
    module2.exports = __toCommonJS2(createVariable_exports);
    var import_constants2 = require_cjs2();
    var import_helpers = require_cjs4();
    var import_config = require_config();
    var IS_VAR = "isVar";
    var createVariable = (props, skipHash = false) => {
      if (!skipHash && isVariable(props))
        return props;
      const { key, name, val } = props;
      return {
        [IS_VAR]: true,
        key,
        name: skipHash ? "" : (0, import_helpers.simpleHash)(name, 40),
        val,
        variable: import_constants2.isWeb ? skipHash ? `var(--${name})` : createCSSVariable(name) : ""
      };
    };
    function variableToString(vrble, getValue = false) {
      if (isVariable(vrble)) {
        if (!getValue && import_constants2.isWeb && vrble.variable) {
          return vrble.variable;
        }
        return `${vrble.val}`;
      }
      return `${vrble || ""}`;
    }
    function isVariable(v) {
      return v && typeof v === "object" && IS_VAR in v;
    }
    function getVariable(nameOrVariable) {
      setDidGetVariableValue(true);
      if (isVariable(nameOrVariable)) {
        return variableToString(nameOrVariable);
      }
      const tokens = (0, import_config.getConfig)().tokensParsed;
      return variableToString(tokens[nameOrVariable] ?? nameOrVariable);
    }
    var accessed = false;
    var setDidGetVariableValue = (val) => accessed = val;
    var didGetVariableValue = () => accessed;
    function getVariableValue(v) {
      if (isVariable(v)) {
        setDidGetVariableValue(true);
        return v.val;
      }
      return v;
    }
    function getVariableName(v) {
      if (isVariable(v))
        return v.name;
      return v;
    }
    function getVariableVariable(v) {
      if (isVariable(v))
        return v.variable;
      return v;
    }
    var createCSSVariable = (nameProp, includeVar = true) => {
      if (process.env.NODE_ENV === "development") {
        if (!nameProp || typeof nameProp !== "string") {
          throw new Error(`createCSSVariable expected string, got: ${nameProp}`);
        }
      }
      const name = (0, import_helpers.simpleHash)(nameProp, 60);
      return includeVar ? `var(--${name})` : name;
    };
  }
});

// ../web/dist/cjs/helpers/insertStyleRule.js
var require_insertStyleRule = __commonJS({
  "../web/dist/cjs/helpers/insertStyleRule.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var insertStyleRule_exports = {};
    __export2(insertStyleRule_exports, {
      getAllRules: () => getAllRules,
      getAllSelectors: () => getAllSelectors,
      getAllTransforms: () => getAllTransforms,
      insertStyleRules: () => insertStyleRules,
      insertedTransforms: () => insertedTransforms,
      listenForSheetChanges: () => listenForSheetChanges,
      scanAllSheets: () => scanAllSheets,
      shouldInsertStyleRules: () => shouldInsertStyleRules,
      updateRules: () => updateRules
    });
    module2.exports = __toCommonJS2(insertStyleRule_exports);
    var import_constants2 = require_cjs2();
    var import_createVariable = require_createVariable();
    var scannedCache = /* @__PURE__ */ new WeakMap();
    var totalSelectorsInserted = /* @__PURE__ */ new Map();
    var allSelectors = {};
    var allRules = {};
    var insertedTransforms = {};
    var getAllSelectors = () => allSelectors;
    var getAllRules = () => Object.values(allRules);
    var getAllTransforms = () => insertedTransforms;
    function addTransform(identifier, css, rule) {
      const s = css.indexOf("transform:");
      if (s === -1) {
        if (process.env.NODE_ENV === "development") {
          console.error(`\u274C Invalid transform, likely used deg/% improperly ${identifier}`);
        }
        return;
      }
      const startI = s + "transform:".length;
      const endI = css.indexOf(";");
      const value = css.slice(startI, endI);
      if (!insertedTransforms[identifier]) {
        insertedTransforms[identifier] = value;
        return true;
      }
    }
    function listenForSheetChanges() {
      if (!import_constants2.isClient)
        return;
      const mo = new MutationObserver((entries) => {
        for (const entry of entries) {
          if (entry instanceof HTMLStyleElement && entry.sheet || entry instanceof HTMLLinkElement && entry.href.endsWith(".css")) {
            scanAllSheets();
            break;
          }
        }
      });
      mo.observe(document.head, {
        childList: true
      });
    }
    var lastScannedSheets = null;
    function scanAllSheets(collectThemes = false, tokens) {
      if (process.env.NODE_ENV === "test")
        return;
      if (!import_constants2.isClient)
        return;
      let themes;
      const sheets = document.styleSheets || [];
      const prev = lastScannedSheets;
      const current = new Set(sheets);
      if (document.styleSheets) {
        for (const sheet2 of current) {
          if (sheet2) {
            const out = updateSheetStyles(sheet2, false, collectThemes, tokens);
            if (out) {
              themes = out;
            }
          }
        }
        lastScannedSheets = current;
      }
      if (prev) {
        for (const sheet2 of prev) {
          if (sheet2 && !current.has(sheet2)) {
            updateSheetStyles(sheet2, true);
          }
        }
      }
      return themes;
    }
    function track(id, remove = false) {
      const next = (totalSelectorsInserted.get(id) || 0) + (remove ? -1 : 1);
      totalSelectorsInserted.set(id, next);
      return next;
    }
    var bailAfterEnv = process.env.TAMAGUI_BAIL_AFTER_SCANNING_X_CSS_RULES;
    var bailAfter = bailAfterEnv ? +bailAfterEnv : 250;
    function updateSheetStyles(sheet2, remove = false, collectThemes = false, tokens) {
      var _a, _b;
      let rules;
      try {
        rules = sheet2.cssRules;
        if (!rules) {
          return;
        }
      } catch {
        return;
      }
      const firstSelector = (_a = getTamaguiSelector(rules[0], collectThemes)) == null ? void 0 : _a[0];
      const lastSelector = (_b = getTamaguiSelector(rules[rules.length - 1], collectThemes)) == null ? void 0 : _b[0];
      const cacheKey = `${rules.length}${firstSelector}${lastSelector}`;
      const lastScanned = scannedCache.get(sheet2);
      if (!remove) {
        if (lastScanned === cacheKey) {
          return;
        }
      }
      const len = rules.length;
      let fails = 0;
      let dedupedThemes;
      for (let i = 0; i < len; i++) {
        const rule = rules[i];
        if (!(rule instanceof CSSStyleRule))
          continue;
        const response = getTamaguiSelector(rule, collectThemes);
        if (response) {
          fails = 0;
        } else {
          fails++;
          if (fails > bailAfter) {
            return;
          }
          continue;
        }
        const [identifier, cssRule, isTheme] = response;
        if (isTheme) {
          const deduped = addThemesFromCSS(cssRule, tokens);
          if (deduped) {
            dedupedThemes || (dedupedThemes = []);
            dedupedThemes.push(deduped);
          }
          continue;
        }
        const total = track(identifier, remove);
        if (remove) {
          if (total === 0) {
            delete allSelectors[identifier];
          }
        } else if (!(identifier in allSelectors)) {
          const isTransform = identifier.startsWith("_transform");
          const shouldInsert = isTransform ? addTransform(identifier, cssRule.cssText, cssRule) : true;
          if (shouldInsert) {
            allSelectors[identifier] = cssRule.cssText;
          }
        }
      }
      scannedCache.set(sheet2, cacheKey);
      return dedupedThemes;
    }
    var colorVarToVal;
    var rootComputedStyle = null;
    function addThemesFromCSS(cssStyleRule, tokens) {
      const selectors = cssStyleRule.selectorText.split(",");
      if (!selectors.length)
        return;
      if (tokens && !colorVarToVal) {
        colorVarToVal = {};
        for (const key in tokens.color) {
          const token = tokens.color[key];
          colorVarToVal[token.name] = token.val;
        }
      }
      const rulesWithBraces = (cssStyleRule.cssText || "").slice(cssStyleRule.selectorText.length + 2, -1).trim();
      const rules = rulesWithBraces.split(";");
      const values = {};
      for (const rule of rules) {
        const sepI = rule.indexOf(":");
        if (sepI === -1)
          continue;
        const key = rule.slice(rule.indexOf("--") + 2, sepI);
        const val = rule.slice(sepI + 2);
        let value;
        if (val[3] === "(") {
          const varName = val.slice(6, -1);
          const tokenVal = colorVarToVal[varName];
          if (tokenVal) {
            value = tokenVal;
          } else {
            rootComputedStyle || (rootComputedStyle = getComputedStyle(document.body));
            value = rootComputedStyle.getPropertyValue("--" + varName);
          }
        } else {
          value = val;
        }
        values[key] = (0, import_createVariable.createVariable)(
          {
            key,
            name: key,
            val: value
          },
          true
        );
      }
      const dedupedEntry = {
        names: [],
        theme: values
      };
      for (const selector of selectors) {
        let scheme = selector.includes("t_dark") ? "dark" : selector.includes("t_light") ? "light" : "";
        let name = selector.slice(selector.lastIndexOf(".t_") + 3);
        if (name.startsWith(scheme)) {
          name = name.slice(scheme.length + 1);
        }
        if (scheme === name) {
          scheme = "";
        }
        const themeName = `${scheme}${scheme && name ? "_" : ""}${name}`;
        if (dedupedEntry.names.includes(themeName)) {
          continue;
        }
        dedupedEntry.names.push(themeName);
      }
      return dedupedEntry;
    }
    function getTamaguiSelector(rule, collectThemes = false) {
      if (rule instanceof CSSStyleRule) {
        const text = rule.selectorText;
        if (text[0] === ":" && text[1] === "r") {
          if (text.startsWith(":root ._")) {
            return [getIdentifierFromTamaguiSelector(text), rule];
          }
          if (collectThemes) {
            if (text.startsWith(":root.t_") || text.startsWith(":root .t_")) {
              return [
                text.slice(0, 20),
                // just used as uid
                rule,
                true
              ];
            }
          }
        }
      } else if (rule instanceof CSSMediaRule) {
        if (rule.cssRules.length > 1)
          return;
        return getTamaguiSelector(rule.cssRules[0]);
      }
    }
    var getIdentifierFromTamaguiSelector = (selector) => {
      let res = selector.slice(7);
      if (selector.includes(":")) {
        return res.replace(/:[a-z]+$/, "");
      }
      return res;
    };
    var sheet = import_constants2.isClient ? document.head.appendChild(document.createElement("style")).sheet : null;
    function updateRules(identifier, rules) {
      if (identifier in allRules) {
        return false;
      }
      allRules[identifier] = rules.join(" ");
      if (identifier.startsWith("_transform")) {
        return addTransform(identifier, rules[0]);
      }
      return true;
    }
    function insertStyleRules(rulesToInsert) {
      if (!rulesToInsert.length || !sheet) {
        return;
      }
      for (const { identifier, rules } of rulesToInsert) {
        if (!shouldInsertStyleRules(identifier)) {
          continue;
        }
        allSelectors[identifier] = rules.join("\n");
        track(identifier);
        updateRules(identifier, rules);
        for (const rule of rules) {
          if (process.env.NODE_ENV === "production") {
            sheet.insertRule(rule, sheet.cssRules.length);
          } else {
            try {
              sheet.insertRule(rule, sheet.cssRules.length);
            } catch (err) {
              console.groupCollapsed(
                `Error inserting rule into CSSStyleSheet: ${String(err)}`
              );
              console.log({ rule, rulesToInsert });
              console.trace();
              console.groupEnd();
            }
          }
        }
      }
    }
    function shouldInsertStyleRules(identifier) {
      if (process.env.IS_STATIC === "is_static") {
        return true;
      }
      const total = totalSelectorsInserted.get(identifier);
      if (process.env.NODE_ENV === "development") {
        if (totalSelectorsInserted.size > +(process.env.TAMAGUI_STYLE_INSERTION_WARNING_LIMIT || 5e4)) {
          console.warn(
            `Warning: inserting many CSS rules, you may be animating something and generating many CSS insertions, which can degrade performance. Instead, try using the "disableClassName" property on elements that change styles often. To disable this warning set TAMAGUI_STYLE_INSERTION_WARNING_LIMIT from 50000 to something higher`
          );
        }
      }
      return total === void 0 || total < 2;
    }
  }
});

// ../web/dist/cjs/helpers/createProxy.js
var require_createProxy = __commonJS({
  "../web/dist/cjs/helpers/createProxy.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var createProxy_exports = {};
    __export2(createProxy_exports, {
      createProxy: () => createProxy
    });
    module2.exports = __toCommonJS2(createProxy_exports);
    function createProxy(target, handler) {
      if (process.env.NODE_ENV === "development") {
        if (typeof target !== "object" || !target) {
          console.warn(
            "Invalid object given for proxy:",
            target,
            `
  
  This can be due to a missing theme or configuration given to Tamagui.`,
            new Error().stack
          );
        }
      }
      return new Proxy(target || {}, handler);
    }
  }
});

// ../web/dist/cjs/helpers/matchMedia.js
var require_matchMedia = __commonJS({
  "../web/dist/cjs/helpers/matchMedia.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var matchMedia_exports = {};
    __export2(matchMedia_exports, {
      matchMedia: () => matchMedia,
      setupMatchMedia: () => setupMatchMedia
    });
    module2.exports = __toCommonJS2(matchMedia_exports);
    var matchMedia = typeof window !== "undefined" && window.matchMedia || matchMediaFallback;
    function matchMediaFallback(_) {
      return {
        match: (a, b) => false,
        addListener() {
        },
        removeListener() {
        },
        matches: false
      };
    }
    function setupMatchMedia(_) {
    }
  }
});

// ../web/dist/cjs/helpers/pseudoDescriptors.js
var require_pseudoDescriptors = __commonJS({
  "../web/dist/cjs/helpers/pseudoDescriptors.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var pseudoDescriptors_exports = {};
    __export2(pseudoDescriptors_exports, {
      pseudoDescriptors: () => pseudoDescriptors,
      pseudoDescriptorsBase: () => pseudoDescriptorsBase,
      pseudoPriorities: () => pseudoPriorities
    });
    module2.exports = __toCommonJS2(pseudoDescriptors_exports);
    var pseudoDescriptorsBase = {
      // order of keys here important! in priority order
      hoverStyle: {
        name: "hover",
        priority: 1
      },
      pressStyle: {
        name: "active",
        stateKey: "press",
        priority: 2
      },
      focusStyle: {
        name: "focus",
        priority: 3
      }
    };
    var pseudoPriorities = {
      hover: 1,
      press: 2,
      focus: 3
    };
    var pseudoDescriptors = {
      ...pseudoDescriptorsBase,
      enterStyle: {
        name: "enter",
        stateKey: "unmounted",
        priority: 4
      },
      exitStyle: {
        name: "exit",
        priority: 5
      }
    };
  }
});

// ../web/dist/cjs/hooks/useMedia.js
var require_useMedia = __commonJS({
  "../web/dist/cjs/hooks/useMedia.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var useMedia_exports = {};
    __export2(useMedia_exports, {
      configureMedia: () => configureMedia2,
      getInitialMediaState: () => getInitialMediaState,
      getMedia: () => getMedia2,
      getMediaImportanceIfMoreImportant: () => getMediaImportanceIfMoreImportant,
      getMediaKeyImportance: () => getMediaKeyImportance,
      isMediaKey: () => isMediaKey,
      mediaKeyMatch: () => mediaKeyMatch,
      mediaKeyToQuery: () => mediaKeyToQuery,
      mediaKeys: () => mediaKeys,
      mediaObjectToString: () => mediaObjectToString2,
      mediaQueryConfig: () => mediaQueryConfig2,
      mediaState: () => mediaState2,
      mergeMediaByImportance: () => mergeMediaByImportance,
      setMediaShouldUpdate: () => setMediaShouldUpdate,
      setupMediaListeners: () => setupMediaListeners,
      useMedia: () => useMedia2,
      useMediaListeners: () => useMediaListeners,
      useMediaPropsActive: () => useMediaPropsActive2
    });
    module2.exports = __toCommonJS2(useMedia_exports);
    var import_constants2 = require_cjs2();
    var import_react = require("react");
    var import_config = require_config();
    var import_createProxy = require_createProxy();
    var import_matchMedia = require_matchMedia();
    var import_pseudoDescriptors = require_pseudoDescriptors();
    var mediaState2 = (
      // development only safeguard
      process.env.NODE_ENV === "development" ? (0, import_createProxy.createProxy)(
        {},
        {
          get(target, key) {
            if (typeof key === "string" && key[0] === "$" && // dont error on $$typeof
            key[1] !== "$") {
              throw new Error(`Access mediaState should not use "$": ${key}`);
            }
            return Reflect.get(target, key);
          }
        }
      ) : {}
    );
    var mediaQueryConfig2 = {};
    var getMedia2 = () => mediaState2;
    var mediaKeys = /* @__PURE__ */ new Set();
    var isMediaKey = (key) => mediaKeys.has(key) || key[0] === "$" && (key.startsWith("$platform-") || key.startsWith("$theme-") || key.startsWith("$group-"));
    var initState;
    var getInitialMediaState = () => {
      return ((0, import_config.getConfig)().disableSSR ? mediaState2 : initState) || {};
    };
    var defaultMediaImportance = Object.keys(import_pseudoDescriptors.pseudoDescriptors).length;
    var mediaKeysOrdered;
    var getMediaKeyImportance = (key) => {
      if (process.env.NODE_ENV === "development" && key[0] === "$") {
        throw new Error("use short key");
      }
      const conf = (0, import_config.getConfig)();
      if (conf.settings.mediaPropOrder) {
        return defaultMediaImportance;
      }
      return mediaKeysOrdered.indexOf(key) + 100;
    };
    var dispose = /* @__PURE__ */ new Set();
    var configureMedia2 = (config) => {
      const { media, mediaQueryDefaultActive } = config;
      if (!media)
        return;
      for (const key in media) {
        mediaState2[key] = (mediaQueryDefaultActive == null ? void 0 : mediaQueryDefaultActive[key]) || false;
        mediaKeys.add(`$${key}`);
      }
      Object.assign(mediaQueryConfig2, media);
      initState = { ...mediaState2 };
      updateCurrentState();
      mediaKeysOrdered = Object.keys(media);
      if (config.disableSSR) {
        setupMediaListeners();
      }
    };
    function unlisten() {
      dispose.forEach((cb) => cb());
      dispose.clear();
    }
    var configuredKey = "";
    function setupMediaListeners() {
      const nextKey = JSON.stringify(mediaQueryConfig2);
      if (nextKey === configuredKey)
        return;
      configuredKey = nextKey;
      unlisten();
      for (const key in mediaQueryConfig2) {
        let update2 = function() {
          const next = !!getMatch().matches;
          if (next === mediaState2[key])
            return;
          mediaState2 = { ...mediaState2, [key]: next };
          updateCurrentState();
        };
        var update = update2;
        const str = mediaObjectToString2(mediaQueryConfig2[key], key);
        const getMatch = () => (0, import_matchMedia.matchMedia)(str);
        const match = getMatch();
        if (!match) {
          throw new Error("\u26A0\uFE0F No match");
        }
        match.addListener(update2);
        dispose.add(() => {
          match.removeListener(update2);
        });
        update2();
      }
    }
    function useMediaListeners(config) {
      if (config.disableSSR)
        return;
      (0, import_constants2.useIsomorphicLayoutEffect)(() => {
        setupMediaListeners();
      }, []);
    }
    var listeners = /* @__PURE__ */ new Set();
    var flushing = false;
    function updateCurrentState() {
      if (flushing)
        return;
      flushing = true;
      Promise.resolve().then(() => {
        flushing = false;
        listeners.forEach((cb) => cb(mediaState2));
      });
    }
    var shouldUpdate = /* @__PURE__ */ new WeakMap();
    function setMediaShouldUpdate(ref, props) {
      return shouldUpdate.set(ref, props);
    }
    function subscribe(subscriber) {
      listeners.add(subscriber);
      return () => listeners.delete(subscriber);
    }
    function useMedia2(uid) {
      const internal = (0, import_react.useRef)();
      const state = (0, import_react.useSyncExternalStore)(
        subscribe,
        () => {
          if (!internal.current) {
            return initState;
          }
          const { touched, prev } = internal.current;
          const componentState = uid ? shouldUpdate.get(uid) : void 0;
          if (componentState && componentState.enabled === false) {
            return prev;
          }
          const testKeys = (componentState == null ? void 0 : componentState.keys) ?? ((!componentState || componentState.enabled) && touched ? [...touched] : null);
          const hasntUpdated = !testKeys || (testKeys == null ? void 0 : testKeys.every((key) => mediaState2[key] === prev[key]));
          if (hasntUpdated) {
            return prev;
          }
          internal.current.prev = mediaState2;
          return mediaState2;
        },
        () => initState
      );
      return new Proxy(state, {
        get(_, key) {
          var _a;
          if (typeof key === "string") {
            internal.current || (internal.current = { prev: initState });
            (_a = internal.current).touched || (_a.touched = /* @__PURE__ */ new Set());
            internal.current.touched.add(key);
          }
          return Reflect.get(state, key);
        }
      });
    }
    function useMediaPropsActive2(props, opts) {
      const media = useMedia2();
      const shouldExpandShorthands = opts == null ? void 0 : opts.expandShorthands;
      return (0, import_react.useMemo)(() => {
        const config = (0, import_config.getConfig)();
        const next = {};
        const importancesUsed = {};
        const propNames = Object.keys(props);
        const len = propNames.length;
        for (let i = 0; i < len; i++) {
          let key = propNames[i];
          const val = props[key];
          if (key[0] === "$") {
            const mediaKey = key.slice(1);
            if (!media[mediaKey])
              continue;
            if (val && typeof val === "object") {
              const subKeys = Object.keys(val);
              for (let j = subKeys.length; j--; j >= 0) {
                let subKey = subKeys[j];
                const value = val[subKey];
                if (shouldExpandShorthands) {
                  subKey = config.shorthands[subKey] || subKey;
                }
                mergeMediaByImportance(next, mediaKey, subKey, value, importancesUsed, true);
              }
            }
          } else {
            if (shouldExpandShorthands) {
              key = config.shorthands[key] || key;
            }
            mergeMediaByImportance(next, "", key, val, importancesUsed, true);
          }
        }
        return next;
      }, [media, props]);
    }
    var getMediaImportanceIfMoreImportant = (mediaKey, key, importancesUsed, isSizeMedia) => {
      const conf = (0, import_config.getConfig)();
      const importance = isSizeMedia && !conf.settings.mediaPropOrder ? getMediaKeyImportance(mediaKey) : defaultMediaImportance;
      return !importancesUsed[key] || importance > importancesUsed[key] ? importance : null;
    };
    function mergeMediaByImportance(onto, mediaKey, key, value, importancesUsed, isSizeMedia, importanceBump) {
      let importance = getMediaImportanceIfMoreImportant(
        mediaKey,
        key,
        importancesUsed,
        isSizeMedia
      );
      if (importanceBump) {
        importance = (importance || 0) + importanceBump;
      }
      if (importance === null) {
        return false;
      }
      importancesUsed[key] = importance;
      onto[key] = value;
      return true;
    }
    function camelToHyphen(str) {
      return str.replace(/[A-Z]/g, (m) => `-${m.toLowerCase()}`).toLowerCase();
    }
    var cache = /* @__PURE__ */ new WeakMap();
    var cachedMediaKeyToQuery = {};
    function mediaObjectToString2(query, key) {
      if (typeof query === "string") {
        return query;
      }
      if (cache.has(query)) {
        return cache.get(query);
      }
      const res = Object.entries(query).map(([feature, value]) => {
        feature = camelToHyphen(feature);
        if (typeof value === "string") {
          return `(${feature}: ${value})`;
        }
        if (typeof value === "number" && /[height|width]$/.test(feature)) {
          value = `${value}px`;
        }
        return `(${feature}: ${value})`;
      }).join(" and ");
      if (key) {
        cachedMediaKeyToQuery[key] = res;
      }
      cache.set(query, res);
      return res;
    }
    function mediaKeyToQuery(key) {
      return cachedMediaKeyToQuery[key] || mediaObjectToString2(mediaQueryConfig2[key], key);
    }
    function mediaKeyMatch(key, dimensions) {
      const mediaQueries = mediaQueryConfig2[key];
      const result = Object.keys(mediaQueries).every((query) => {
        const expectedVal = +mediaQueries[query];
        const isMax = query.startsWith("max");
        const isWidth = query.endsWith("Width");
        const givenVal = dimensions[isWidth ? "width" : "height"];
        return isMax ? givenVal < expectedVal : givenVal > expectedVal;
      });
      return result;
    }
  }
});

// ../web/dist/cjs/Tamagui.js
var require_Tamagui = __commonJS({
  "../web/dist/cjs/Tamagui.js"(exports, module2) {
    "use strict";
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var Tamagui_exports = {};
    __export2(Tamagui_exports, {
      Tamagui: () => Tamagui,
      getValueFromIdentifier: () => getValueFromIdentifier,
      setIdentifierValue: () => setIdentifierValue
    });
    module2.exports = __toCommonJS2(Tamagui_exports);
    var Helpers = __toESM2(require_cjs4());
    var import_config = require_config();
    var import_insertStyleRule = require_insertStyleRule();
    var import_useMedia = require_useMedia();
    var TamaguiManager = class {
      constructor() {
        this.Helpers = Helpers;
      }
      get mediaState() {
        return { ...import_useMedia.mediaState };
      }
      get config() {
        return (0, import_config.getConfig)();
      }
      get insertedRules() {
        return (0, import_insertStyleRule.getAllRules)();
      }
      get allSelectors() {
        return (0, import_insertStyleRule.getAllSelectors)();
      }
      get allTransforms() {
        return (0, import_insertStyleRule.getAllTransforms)();
      }
      get identifierToValue() {
        return identifierToValue;
      }
    };
    var Tamagui = new TamaguiManager();
    var identifierToValue = /* @__PURE__ */ new Map();
    var getValueFromIdentifier = (identifier) => {
      return identifierToValue.get(identifier);
    };
    var setIdentifierValue = (identifier, value) => {
      identifierToValue.set(identifier, value);
    };
  }
});

// ../compose-refs/dist/cjs/compose-refs.js
var require_compose_refs = __commonJS({
  "../compose-refs/dist/cjs/compose-refs.js"(exports, module2) {
    "use strict";
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var compose_refs_exports = {};
    __export2(compose_refs_exports, {
      composeRefs: () => composeRefs,
      useComposedRefs: () => useComposedRefs
    });
    module2.exports = __toCommonJS2(compose_refs_exports);
    var React = __toESM2(require("react"));
    function setRef(ref, value) {
      if (typeof ref === "function") {
        ref(value);
      } else if (ref) {
        ;
        ref.current = value;
      }
    }
    function composeRefs(...refs) {
      return (node) => refs.forEach((ref) => setRef(ref, node));
    }
    function useComposedRefs(...refs) {
      return React.useCallback(composeRefs(...refs), refs);
    }
  }
});

// ../compose-refs/dist/cjs/index.js
var require_cjs5 = __commonJS({
  "../compose-refs/dist/cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __reExport2 = (target, mod, secondTarget) => (__copyProps2(target, mod, "default"), secondTarget && __copyProps2(secondTarget, mod, "default"));
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports2 = {};
    module2.exports = __toCommonJS2(src_exports2);
    __reExport2(src_exports2, require_compose_refs(), module2.exports);
  }
});

// ../use-did-finish-ssr/dist/cjs/index.js
var require_cjs6 = __commonJS({
  "../use-did-finish-ssr/dist/cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports2 = {};
    __export2(src_exports2, {
      useClientValue: () => useClientValue,
      useDidFinishSSR: () => useDidFinishSSR
    });
    module2.exports = __toCommonJS2(src_exports2);
    var import_react = require("react");
    var emptyFn = () => {
    };
    var emptyFnFn = () => emptyFn;
    function useDidFinishSSR(value) {
      if (process.env.TAMAGUI_TARGET === "native") {
        return value ?? true;
      }
      return (0, import_react.useSyncExternalStore)(
        emptyFnFn,
        () => value == void 0 ? true : value,
        () => false
      );
    }
    function useClientValue(value) {
      const done = useDidFinishSSR();
      return !done ? void 0 : typeof value === "function" ? value() : value;
    }
  }
});

// ../web/dist/cjs/constants/constants.js
var require_constants = __commonJS({
  "../web/dist/cjs/constants/constants.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var constants_exports = {};
    __export2(constants_exports, {
      THEME_CLASSNAME_PREFIX: () => THEME_CLASSNAME_PREFIX,
      THEME_NAME_SEPARATOR: () => THEME_NAME_SEPARATOR,
      stackDefaultStyles: () => stackDefaultStyles
    });
    module2.exports = __toCommonJS2(constants_exports);
    var THEME_NAME_SEPARATOR = "_";
    var THEME_CLASSNAME_PREFIX = "t_";
    var stackDefaultStyles = {
      alignItems: "stretch"
    };
    if (process.env.TAMAGUI_TARGET === "web") {
      Object.assign(stackDefaultStyles, {
        display: "flex",
        flexDirection: "column",
        flexBasis: "auto",
        boxSizing: "border-box",
        position: "relative",
        minHeight: 0,
        minWidth: 0,
        flexShrink: 0
      });
    }
  }
});

// ../web/dist/cjs/helpers/objectIdentityKey.js
var require_objectIdentityKey = __commonJS({
  "../web/dist/cjs/helpers/objectIdentityKey.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var objectIdentityKey_exports = {};
    __export2(objectIdentityKey_exports, {
      objectIdentityKey: () => objectIdentityKey
    });
    module2.exports = __toCommonJS2(objectIdentityKey_exports);
    function objectIdentityKey(obj) {
      let k = "";
      for (const key in obj) {
        k += key;
        const arg = obj[key];
        let type = typeof arg;
        if (!arg || type !== "object") {
          k += type + arg;
        } else if (cache.has(arg)) {
          k += cache.get(arg);
        } else {
          let v = Math.random();
          cache.set(arg, v);
          k += v;
        }
      }
      return k;
    }
    var cache = /* @__PURE__ */ new WeakMap();
  }
});

// ../web/dist/cjs/helpers/createStyledContext.js
var require_createStyledContext = __commonJS({
  "../web/dist/cjs/helpers/createStyledContext.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var createStyledContext_exports = {};
    __export2(createStyledContext_exports, {
      createStyledContext: () => createStyledContext
    });
    module2.exports = __toCommonJS2(createStyledContext_exports);
    var import_jsx_runtime = require("react/jsx-runtime");
    var import_react = require("react");
    var import_objectIdentityKey = require_objectIdentityKey();
    function createStyledContext(props) {
      const OGContext = (0, import_react.createContext)(props);
      const OGProvider = OGContext.Provider;
      const Context = OGContext;
      const Provider = ({
        children,
        ...values
      }) => {
        const value = (0, import_react.useMemo)(() => {
          return {
            ...props,
            ...values
          };
        }, [(0, import_objectIdentityKey.objectIdentityKey)(values)]);
        return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(OGProvider, { value, children });
      };
      Context.Provider = Provider;
      Context.props = props;
      Context.context = OGContext;
      return Context;
    }
  }
});

// ../web/dist/cjs/contexts/ComponentContext.js
var require_ComponentContext = __commonJS({
  "../web/dist/cjs/contexts/ComponentContext.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var ComponentContext_exports = {};
    __export2(ComponentContext_exports, {
      ComponentContext: () => ComponentContext
    });
    module2.exports = __toCommonJS2(ComponentContext_exports);
    var import_createStyledContext = require_createStyledContext();
    var listeners = /* @__PURE__ */ new Set();
    var ComponentContext = (0, import_createStyledContext.createStyledContext)({
      inText: false,
      language: null,
      animationDriver: null,
      groups: {
        emit: (name, state) => {
          listeners.forEach((l) => l(name, state));
        },
        subscribe(cb) {
          listeners.add(cb);
          return () => {
            listeners.delete(cb);
          };
        },
        state: {}
      }
    });
  }
});

// ../web/dist/cjs/helpers/createShallowSetState.js
var require_createShallowSetState = __commonJS({
  "../web/dist/cjs/helpers/createShallowSetState.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var createShallowSetState_exports = {};
    __export2(createShallowSetState_exports, {
      createShallowSetState: () => createShallowSetState,
      mergeIfNotShallowEqual: () => mergeIfNotShallowEqual
    });
    module2.exports = __toCommonJS2(createShallowSetState_exports);
    function createShallowSetState(setter) {
      return (next) => setter((prev) => mergeIfNotShallowEqual(prev, next));
    }
    function mergeIfNotShallowEqual(prev, next) {
      for (const key in next) {
        if (prev[key] !== next[key]) {
          return { ...prev, ...next };
        }
      }
      return prev;
    }
  }
});

// ../web/dist/cjs/constants/accessibilityDirectMap.js
var require_accessibilityDirectMap = __commonJS({
  "../web/dist/cjs/constants/accessibilityDirectMap.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var accessibilityDirectMap_exports = {};
    __export2(accessibilityDirectMap_exports, {
      accessibilityDirectMap: () => accessibilityDirectMap,
      accessibilityWebRoleToNativeRole: () => accessibilityWebRoleToNativeRole,
      nativeAccessibilityState: () => nativeAccessibilityState,
      nativeAccessibilityValue: () => nativeAccessibilityValue,
      webToNativeAccessibilityDirectMap: () => webToNativeAccessibilityDirectMap
    });
    module2.exports = __toCommonJS2(accessibilityDirectMap_exports);
    var accessibilityDirectMap = {};
    if (process.env.TAMAGUI_TARGET === "web") {
      const items = {
        Hidden: true,
        ActiveDescendant: true,
        Atomic: true,
        AutoComplete: true,
        Busy: true,
        Checked: true,
        ColumnCount: "colcount",
        ColumnIndex: "colindex",
        ColumnSpan: "colspan",
        Current: true,
        Details: true,
        ErrorMessage: true,
        Expanded: true,
        HasPopup: true,
        Invalid: true,
        Label: true,
        Level: true,
        Modal: true,
        Multiline: true,
        MultiSelectable: true,
        Orientation: true,
        Owns: true,
        Placeholder: true,
        PosInSet: true,
        Pressed: true,
        RoleDescription: true,
        RowCount: true,
        RowIndex: true,
        RowSpan: true,
        Selected: true,
        SetSize: true,
        Sort: true,
        ValueMax: true,
        ValueMin: true,
        ValueNow: true,
        ValueText: true
      };
      for (const key in items) {
        let val = items[key];
        if (val === true) {
          val = key.toLowerCase();
        }
        accessibilityDirectMap[`accessibility${key}`] = `aria-${val}`;
      }
    }
    var webToNativeAccessibilityDirectMap = null;
    var nativeAccessibilityValue = null;
    var nativeAccessibilityState = null;
    var accessibilityWebRoleToNativeRole = null;
  }
});

// ../web/dist/cjs/constants/isDevTools.js
var require_isDevTools = __commonJS({
  "../web/dist/cjs/constants/isDevTools.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var isDevTools_exports = {};
    __export2(isDevTools_exports, {
      isDevTools: () => isDevTools
    });
    module2.exports = __toCommonJS2(isDevTools_exports);
    var isDevTools = (() => {
      if (process.env.NODE_ENV === "development") {
        try {
          return new Function("try {return this===window;}catch(e){ return false;}")();
        } catch {
        }
      }
      return false;
    })();
  }
});

// ../web/dist/cjs/helpers/getGroupPropParts.js
var require_getGroupPropParts = __commonJS({
  "../web/dist/cjs/helpers/getGroupPropParts.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var getGroupPropParts_exports = {};
    __export2(getGroupPropParts_exports, {
      getGroupPropParts: () => getGroupPropParts
    });
    module2.exports = __toCommonJS2(getGroupPropParts_exports);
    var import_useMedia = require_useMedia();
    function getGroupPropParts(groupProp) {
      const mediaQueries = (0, import_useMedia.getMedia)();
      const [_, name, part3, part4] = groupProp.split("-");
      let pseudo;
      const media = part3 in mediaQueries ? part3 : void 0;
      if (!media) {
        pseudo = part3;
      } else {
        pseudo = part4;
      }
      return { name, pseudo, media };
    }
  }
});

// ../web/dist/cjs/helpers/createMediaStyle.js
var require_createMediaStyle = __commonJS({
  "../web/dist/cjs/helpers/createMediaStyle.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var createMediaStyle_exports = {};
    __export2(createMediaStyle_exports, {
      MEDIA_SEP: () => MEDIA_SEP,
      createMediaStyle: () => createMediaStyle
    });
    module2.exports = __toCommonJS2(createMediaStyle_exports);
    var import_config = require_config();
    var import_useMedia = require_useMedia();
    var import_getGroupPropParts = require_getGroupPropParts();
    var MEDIA_SEP = "_";
    var prefixes = null;
    var selectors = null;
    var groupPseudoToPseudoCSSMap = {
      press: "active"
    };
    var createMediaStyle = (styleObject, mediaKeyIn, mediaQueries, negate, priority) => {
      const { property, identifier, rules } = styleObject;
      const conf = (0, import_config.getConfig)();
      const enableMediaPropOrder = conf.settings.mediaPropOrder;
      const isThemeMedia = mediaKeyIn.startsWith("theme-");
      const isPlatformMedia = !isThemeMedia && mediaKeyIn.startsWith("platform-");
      const isGroup = !isThemeMedia && !isPlatformMedia && mediaKeyIn.startsWith("group-");
      const isNonWindowMedia = isThemeMedia || isPlatformMedia || isGroup;
      const negKey = negate ? "0" : "";
      const ogPrefix = identifier.slice(0, identifier.indexOf("-") + 1);
      const id = `${ogPrefix}${MEDIA_SEP}${mediaKeyIn.replace("-", "")}${negKey}${MEDIA_SEP}`;
      let styleRule = "";
      let groupMediaKey;
      let containerName;
      let nextIdentifier = identifier.replace(ogPrefix, id);
      let styleInner = rules.map((rule) => rule.replace(identifier, nextIdentifier)).join(";");
      if (isNonWindowMedia) {
        const precedenceImportancePrefix = new Array((priority || 0) + (isGroup ? 1 : 0)).fill(":root").join("");
        if (isThemeMedia || isGroup) {
          const groupInfo = (0, import_getGroupPropParts.getGroupPropParts)(mediaKeyIn);
          const mediaName = groupInfo == null ? void 0 : groupInfo.name;
          groupMediaKey = groupInfo == null ? void 0 : groupInfo.media;
          if (isGroup) {
            containerName = mediaName;
          }
          const name = (isGroup ? "group_" : "") + mediaName;
          const selectorStart = styleInner.indexOf(":root");
          const selectorEnd = styleInner.lastIndexOf("{");
          const selector = styleInner.slice(selectorStart, selectorEnd);
          const precedenceSpace = conf.themeClassNameOnRoot ? "" : " ";
          const pseudoSelectorName = groupInfo.pseudo ? groupPseudoToPseudoCSSMap[groupInfo.pseudo] || groupInfo.pseudo : void 0;
          const pseudoSelector = pseudoSelectorName ? `:${pseudoSelectorName}` : "";
          const presedencePrefix = `:root${precedenceImportancePrefix}${precedenceSpace}`;
          const mediaSelector = `.t_${name}${pseudoSelector}`;
          const nextSelector = `${presedencePrefix}${mediaSelector} ${selector.replace(
            ":root",
            ""
          )}`;
          styleRule = styleInner.replace(selector, nextSelector);
        } else {
          styleRule = `${precedenceImportancePrefix}${styleInner}`;
        }
      }
      if (!isNonWindowMedia || groupMediaKey) {
        if (!selectors) {
          const mediaKeys = Object.keys(mediaQueries);
          selectors = Object.fromEntries(
            mediaKeys.map((key) => [key, (0, import_useMedia.mediaObjectToString)(mediaQueries[key])])
          );
          if (!enableMediaPropOrder) {
            prefixes = Object.fromEntries(
              mediaKeys.map((k, index) => [k, new Array(index + 1).fill(":root").join("")])
            );
          }
        }
        const mediaKey = groupMediaKey || mediaKeyIn;
        const mediaSelector = selectors[mediaKey];
        const screenStr = negate ? "not all and" : "";
        const mediaQuery = `${screenStr} ${mediaSelector}`;
        const precedenceImportancePrefix = groupMediaKey ? "" : enableMediaPropOrder ? (
          // this new array should be cached
          new Array(priority).fill(":root").join("")
        ) : (
          // @ts-ignore
          prefixes[mediaKey]
        );
        const prefix = groupMediaKey ? `@container ${containerName}` : "@media";
        if (groupMediaKey) {
          styleInner = styleRule;
        }
        if (styleInner.includes(prefix)) {
          styleRule = styleInner.replace("{", ` and ${mediaQuery} {`);
        } else {
          styleRule = `${prefix} ${mediaQuery}{${precedenceImportancePrefix}${styleInner}}`;
        }
      }
      return {
        property,
        rules: [styleRule],
        identifier: nextIdentifier
      };
    };
  }
});

// ../web/dist/cjs/helpers/expandStyle.js
var require_expandStyle = __commonJS({
  "../web/dist/cjs/helpers/expandStyle.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all2) => {
      for (var name in all2)
        __defProp2(target, name, { get: all2[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var expandStyle_exports = {};
    __export2(expandStyle_exports, {
      expandStyle: () => expandStyle
    });
    module2.exports = __toCommonJS2(expandStyle_exports);
    var import_constants2 = require_cjs2();
    var _a;
    function expandStyle(key, value) {
      if (process.env.TAMAGUI_TARGET === "web") {
        if (key === "flex") {
          return [
            ["flexGrow", value],
            ["flexShrink", 1],
            ["flexBasis", "auto"]
          ];
        }
        switch (key) {
          case "textAlignVertical": {
            return [["verticalAlign", value === "center" ? "middle" : value]];
          }
          case "writingDirection": {
            return [["direction", value]];
          }
        }
      }
      if (process.env.TAMAGUI_TARGET === "native" && import_constants2.isAndroid && key === "elevationAndroid") {
        return [["elevation", value]];
      }
      if (key in EXPANSIONS) {
        return EXPANSIONS[key].map((key2) => {
          return [key2, value];
        });
      }
    }
    var all = ["Top", "Right", "Bottom", "Left"];
    var horiz = ["Right", "Left"];
    var vert = ["Top", "Bottom"];
    var xy = ["X", "Y"];
    var EXPANSIONS = {
      borderColor: ["TopColor", "RightColor", "BottomColor", "LeftColor"],
      borderRadius: [
        "TopLeftRadius",
        "TopRightRadius",
        "BottomRightRadius",
        "BottomLeftRadius"
      ],
      borderWidth: ["TopWidth", "RightWidth", "BottomWidth", "LeftWidth"],
      margin: all,
      marginHorizontal: horiz,
      marginVertical: vert,
      overscrollBehavior: xy,
      padding: all,
      paddingHorizontal: horiz,
      paddingVertical: vert,
      ...import_constants2.isWeb && {
        // react-native only supports borderStyle
        borderStyle: ["TopStyle", "RightStyle", "BottomStyle", "LeftStyle"],
        // react-native doesn't support X / Y
        overflow: xy
      }
    };
    for (const parent in EXPANSIONS) {
      const prefix = parent.slice(0, ((_a = /[A-Z]/.exec(parent)) == null ? void 0 : _a.index) ?? parent.length);
      EXPANSIONS[parent] = EXPANSIONS[parent].map((k) => `${prefix}${k}`);
    }
  }
});

// ../web/dist/cjs/helpers/defaultOffset.js
var require_defaultOffset = __commonJS({
  "../web/dist/cjs/helpers/defaultOffset.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var defaultOffset_exports = {};
    __export2(defaultOffset_exports, {
      defaultOffset: () => defaultOffset
    });
    module2.exports = __toCommonJS2(defaultOffset_exports);
    var defaultOffset = { height: 0, width: 0 };
  }
});

// ../../node_modules/@react-native/normalize-color/index.js
var require_normalize_color = __commonJS({
  "../../node_modules/@react-native/normalize-color/index.js"(exports, module2) {
    "use strict";
    function normalizeColor(color) {
      if (typeof color === "number") {
        if (color >>> 0 === color && color >= 0 && color <= 4294967295) {
          return color;
        }
        return null;
      }
      if (typeof color !== "string") {
        return null;
      }
      const matchers = getMatchers();
      let match;
      if (match = matchers.hex6.exec(color)) {
        return parseInt(match[1] + "ff", 16) >>> 0;
      }
      const colorFromKeyword = normalizeKeyword(color);
      if (colorFromKeyword != null) {
        return colorFromKeyword;
      }
      if (match = matchers.rgb.exec(color)) {
        return (parse255(match[1]) << 24 | // r
        parse255(match[2]) << 16 | // g
        parse255(match[3]) << 8 | // b
        255) >>> // a
        0;
      }
      if (match = matchers.rgba.exec(color)) {
        if (match[6] !== void 0) {
          return (parse255(match[6]) << 24 | // r
          parse255(match[7]) << 16 | // g
          parse255(match[8]) << 8 | // b
          parse1(match[9])) >>> // a
          0;
        }
        return (parse255(match[2]) << 24 | // r
        parse255(match[3]) << 16 | // g
        parse255(match[4]) << 8 | // b
        parse1(match[5])) >>> // a
        0;
      }
      if (match = matchers.hex3.exec(color)) {
        return parseInt(
          match[1] + match[1] + // r
          match[2] + match[2] + // g
          match[3] + match[3] + // b
          "ff",
          // a
          16
        ) >>> 0;
      }
      if (match = matchers.hex8.exec(color)) {
        return parseInt(match[1], 16) >>> 0;
      }
      if (match = matchers.hex4.exec(color)) {
        return parseInt(
          match[1] + match[1] + // r
          match[2] + match[2] + // g
          match[3] + match[3] + // b
          match[4] + match[4],
          // a
          16
        ) >>> 0;
      }
      if (match = matchers.hsl.exec(color)) {
        return (hslToRgb(
          parse360(match[1]),
          // h
          parsePercentage(match[2]),
          // s
          parsePercentage(match[3])
          // l
        ) | 255) >>> // a
        0;
      }
      if (match = matchers.hsla.exec(color)) {
        if (match[6] !== void 0) {
          return (hslToRgb(
            parse360(match[6]),
            // h
            parsePercentage(match[7]),
            // s
            parsePercentage(match[8])
            // l
          ) | parse1(match[9])) >>> // a
          0;
        }
        return (hslToRgb(
          parse360(match[2]),
          // h
          parsePercentage(match[3]),
          // s
          parsePercentage(match[4])
          // l
        ) | parse1(match[5])) >>> // a
        0;
      }
      if (match = matchers.hwb.exec(color)) {
        return (hwbToRgb(
          parse360(match[1]),
          // h
          parsePercentage(match[2]),
          // w
          parsePercentage(match[3])
          // b
        ) | 255) >>> // a
        0;
      }
      return null;
    }
    function hue2rgb(p, q, t) {
      if (t < 0) {
        t += 1;
      }
      if (t > 1) {
        t -= 1;
      }
      if (t < 1 / 6) {
        return p + (q - p) * 6 * t;
      }
      if (t < 1 / 2) {
        return q;
      }
      if (t < 2 / 3) {
        return p + (q - p) * (2 / 3 - t) * 6;
      }
      return p;
    }
    function hslToRgb(h, s, l) {
      const q = l < 0.5 ? l * (1 + s) : l + s - l * s;
      const p = 2 * l - q;
      const r = hue2rgb(p, q, h + 1 / 3);
      const g = hue2rgb(p, q, h);
      const b = hue2rgb(p, q, h - 1 / 3);
      return Math.round(r * 255) << 24 | Math.round(g * 255) << 16 | Math.round(b * 255) << 8;
    }
    function hwbToRgb(h, w, b) {
      if (w + b >= 1) {
        const gray = Math.round(w * 255 / (w + b));
        return gray << 24 | gray << 16 | gray << 8;
      }
      const red = hue2rgb(0, 1, h + 1 / 3) * (1 - w - b) + w;
      const green = hue2rgb(0, 1, h) * (1 - w - b) + w;
      const blue = hue2rgb(0, 1, h - 1 / 3) * (1 - w - b) + w;
      return Math.round(red * 255) << 24 | Math.round(green * 255) << 16 | Math.round(blue * 255) << 8;
    }
    var NUMBER = "[-+]?\\d*\\.?\\d+";
    var PERCENTAGE = NUMBER + "%";
    function call(...args) {
      return "\\(\\s*(" + args.join(")\\s*,?\\s*(") + ")\\s*\\)";
    }
    function callWithSlashSeparator(...args) {
      return "\\(\\s*(" + args.slice(0, args.length - 1).join(")\\s*,?\\s*(") + ")\\s*/\\s*(" + args[args.length - 1] + ")\\s*\\)";
    }
    function commaSeparatedCall(...args) {
      return "\\(\\s*(" + args.join(")\\s*,\\s*(") + ")\\s*\\)";
    }
    var cachedMatchers;
    function getMatchers() {
      if (cachedMatchers === void 0) {
        cachedMatchers = {
          rgb: new RegExp("rgb" + call(NUMBER, NUMBER, NUMBER)),
          rgba: new RegExp(
            "rgba(" + commaSeparatedCall(NUMBER, NUMBER, NUMBER, NUMBER) + "|" + callWithSlashSeparator(NUMBER, NUMBER, NUMBER, NUMBER) + ")"
          ),
          hsl: new RegExp("hsl" + call(NUMBER, PERCENTAGE, PERCENTAGE)),
          hsla: new RegExp(
            "hsla(" + commaSeparatedCall(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER) + "|" + callWithSlashSeparator(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER) + ")"
          ),
          hwb: new RegExp("hwb" + call(NUMBER, PERCENTAGE, PERCENTAGE)),
          hex3: /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
          hex4: /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
          hex6: /^#([0-9a-fA-F]{6})$/,
          hex8: /^#([0-9a-fA-F]{8})$/
        };
      }
      return cachedMatchers;
    }
    function parse255(str) {
      const int = parseInt(str, 10);
      if (int < 0) {
        return 0;
      }
      if (int > 255) {
        return 255;
      }
      return int;
    }
    function parse360(str) {
      const int = parseFloat(str);
      return (int % 360 + 360) % 360 / 360;
    }
    function parse1(str) {
      const num = parseFloat(str);
      if (num < 0) {
        return 0;
      }
      if (num > 1) {
        return 255;
      }
      return Math.round(num * 255);
    }
    function parsePercentage(str) {
      const int = parseFloat(str);
      if (int < 0) {
        return 0;
      }
      if (int > 100) {
        return 1;
      }
      return int / 100;
    }
    function normalizeKeyword(name) {
      switch (name) {
        case "transparent":
          return 0;
        case "aliceblue":
          return 4042850303;
        case "antiquewhite":
          return 4209760255;
        case "aqua":
          return 16777215;
        case "aquamarine":
          return 2147472639;
        case "azure":
          return 4043309055;
        case "beige":
          return 4126530815;
        case "bisque":
          return 4293182719;
        case "black":
          return 255;
        case "blanchedalmond":
          return 4293643775;
        case "blue":
          return 65535;
        case "blueviolet":
          return 2318131967;
        case "brown":
          return 2771004159;
        case "burlywood":
          return 3736635391;
        case "burntsienna":
          return 3934150143;
        case "cadetblue":
          return 1604231423;
        case "chartreuse":
          return 2147418367;
        case "chocolate":
          return 3530104575;
        case "coral":
          return 4286533887;
        case "cornflowerblue":
          return 1687547391;
        case "cornsilk":
          return 4294499583;
        case "crimson":
          return 3692313855;
        case "cyan":
          return 16777215;
        case "darkblue":
          return 35839;
        case "darkcyan":
          return 9145343;
        case "darkgoldenrod":
          return 3095792639;
        case "darkgray":
          return 2846468607;
        case "darkgreen":
          return 6553855;
        case "darkgrey":
          return 2846468607;
        case "darkkhaki":
          return 3182914559;
        case "darkmagenta":
          return 2332068863;
        case "darkolivegreen":
          return 1433087999;
        case "darkorange":
          return 4287365375;
        case "darkorchid":
          return 2570243327;
        case "darkred":
          return 2332033279;
        case "darksalmon":
          return 3918953215;
        case "darkseagreen":
          return 2411499519;
        case "darkslateblue":
          return 1211993087;
        case "darkslategray":
          return 793726975;
        case "darkslategrey":
          return 793726975;
        case "darkturquoise":
          return 13554175;
        case "darkviolet":
          return 2483082239;
        case "deeppink":
          return 4279538687;
        case "deepskyblue":
          return 12582911;
        case "dimgray":
          return 1768516095;
        case "dimgrey":
          return 1768516095;
        case "dodgerblue":
          return 512819199;
        case "firebrick":
          return 2988581631;
        case "floralwhite":
          return 4294635775;
        case "forestgreen":
          return 579543807;
        case "fuchsia":
          return 4278255615;
        case "gainsboro":
          return 3705462015;
        case "ghostwhite":
          return 4177068031;
        case "gold":
          return 4292280575;
        case "goldenrod":
          return 3668254975;
        case "gray":
          return 2155905279;
        case "green":
          return 8388863;
        case "greenyellow":
          return 2919182335;
        case "grey":
          return 2155905279;
        case "honeydew":
          return 4043305215;
        case "hotpink":
          return 4285117695;
        case "indianred":
          return 3445382399;
        case "indigo":
          return 1258324735;
        case "ivory":
          return 4294963455;
        case "khaki":
          return 4041641215;
        case "lavender":
          return 3873897215;
        case "lavenderblush":
          return 4293981695;
        case "lawngreen":
          return 2096890111;
        case "lemonchiffon":
          return 4294626815;
        case "lightblue":
          return 2916673279;
        case "lightcoral":
          return 4034953471;
        case "lightcyan":
          return 3774873599;
        case "lightgoldenrodyellow":
          return 4210742015;
        case "lightgray":
          return 3553874943;
        case "lightgreen":
          return 2431553791;
        case "lightgrey":
          return 3553874943;
        case "lightpink":
          return 4290167295;
        case "lightsalmon":
          return 4288707327;
        case "lightseagreen":
          return 548580095;
        case "lightskyblue":
          return 2278488831;
        case "lightslategray":
          return 2005441023;
        case "lightslategrey":
          return 2005441023;
        case "lightsteelblue":
          return 2965692159;
        case "lightyellow":
          return 4294959359;
        case "lime":
          return 16711935;
        case "limegreen":
          return 852308735;
        case "linen":
          return 4210091775;
        case "magenta":
          return 4278255615;
        case "maroon":
          return 2147483903;
        case "mediumaquamarine":
          return 1724754687;
        case "mediumblue":
          return 52735;
        case "mediumorchid":
          return 3126187007;
        case "mediumpurple":
          return 2473647103;
        case "mediumseagreen":
          return 1018393087;
        case "mediumslateblue":
          return 2070474495;
        case "mediumspringgreen":
          return 16423679;
        case "mediumturquoise":
          return 1221709055;
        case "mediumvioletred":
          return 3340076543;
        case "midnightblue":
          return 421097727;
        case "mintcream":
          return 4127193855;
        case "mistyrose":
          return 4293190143;
        case "moccasin":
          return 4293178879;
        case "navajowhite":
          return 4292783615;
        case "navy":
          return 33023;
        case "oldlace":
          return 4260751103;
        case "olive":
          return 2155872511;
        case "olivedrab":
          return 1804477439;
        case "orange":
          return 4289003775;
        case "orangered":
          return 4282712319;
        case "orchid":
          return 3664828159;
        case "palegoldenrod":
          return 4008225535;
        case "palegreen":
          return 2566625535;
        case "paleturquoise":
          return 2951671551;
        case "palevioletred":
          return 3681588223;
        case "papayawhip":
          return 4293907967;
        case "peachpuff":
          return 4292524543;
        case "peru":
          return 3448061951;
        case "pink":
          return 4290825215;
        case "plum":
          return 3718307327;
        case "powderblue":
          return 2967529215;
        case "purple":
          return 2147516671;
        case "rebeccapurple":
          return 1714657791;
        case "red":
          return 4278190335;
        case "rosybrown":
          return 3163525119;
        case "royalblue":
          return 1097458175;
        case "saddlebrown":
          return 2336560127;
        case "salmon":
          return 4202722047;
        case "sandybrown":
          return 4104413439;
        case "seagreen":
          return 780883967;
        case "seashell":
          return 4294307583;
        case "sienna":
          return 2689740287;
        case "silver":
          return 3233857791;
        case "skyblue":
          return 2278484991;
        case "slateblue":
          return 1784335871;
        case "slategray":
          return 1887473919;
        case "slategrey":
          return 1887473919;
        case "snow":
          return 4294638335;
        case "springgreen":
          return 16744447;
        case "steelblue":
          return 1182971135;
        case "tan":
          return 3535047935;
        case "teal":
          return 8421631;
        case "thistle":
          return 3636451583;
        case "tomato":
          return 4284696575;
        case "turquoise":
          return 1088475391;
        case "violet":
          return 4001558271;
        case "wheat":
          return 4125012991;
        case "white":
          return 4294967295;
        case "whitesmoke":
          return 4126537215;
        case "yellow":
          return 4294902015;
        case "yellowgreen":
          return 2597139199;
      }
      return null;
    }
    module2.exports = normalizeColor;
  }
});

// ../normalize-css-color/dist/cjs/index.js
var require_cjs7 = __commonJS({
  "../normalize-css-color/dist/cjs/index.js"(exports, module2) {
    "use strict";
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports2 = {};
    __export2(src_exports2, {
      default: () => src_default,
      normalizeCSSColor: () => normalizeCSSColor,
      rgba: () => rgba2
    });
    module2.exports = __toCommonJS2(src_exports2);
    var normalizeColor = __toESM2(require_normalize_color());
    var norm = normalizeColor.default || normalizeColor;
    var normalizeCSSColor = norm;
    function rgba2(colorInt) {
      var r = Math.round((colorInt & 4278190080) >>> 24);
      var g = Math.round((colorInt & 16711680) >>> 16);
      var b = Math.round((colorInt & 65280) >>> 8);
      var a = ((colorInt & 255) >>> 0) / 255;
      return {
        r,
        g,
        b,
        a
      };
    }
    var src_default = normalizeCSSColor;
  }
});

// ../web/dist/cjs/helpers/normalizeColor.js
var require_normalizeColor = __commonJS({
  "../web/dist/cjs/helpers/normalizeColor.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var normalizeColor_exports = {};
    __export2(normalizeColor_exports, {
      normalizeColor: () => normalizeColor,
      rgba: () => import_normalize_css_color2.rgba
    });
    module2.exports = __toCommonJS2(normalizeColor_exports);
    var import_constants2 = require_cjs2();
    var import_normalize_css_color = require_cjs7();
    var import_normalize_css_color2 = require_cjs7();
    var normalizeColor = (color, opacity) => {
      if (!color)
        return;
      if (color[0] === "$" || color[0] === "v" && color.startsWith("var(")) {
        return color;
      }
      if (import_constants2.isWeb && opacity === 1) {
        return color;
      }
      const colorProcessed = (0, import_normalize_css_color.normalizeCSSColor)(color);
      if (colorProcessed != null) {
        const { r, g, b, a } = (0, import_normalize_css_color.rgba)(colorProcessed);
        const o = opacity ?? a ?? 1;
        const alpha = o.toFixed(2);
        return `rgba(${r},${g},${b},${alpha})`;
      }
      if (process.env.NODE_ENV === "development") {
        console.warn(`Unknown color value: ${color}`);
      }
      if (process.env.TAMAGUI_TARGET === "native") {
        return;
      }
      return color;
    };
  }
});

// ../web/dist/cjs/helpers/normalizeValueWithProperty.js
var require_normalizeValueWithProperty = __commonJS({
  "../web/dist/cjs/helpers/normalizeValueWithProperty.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var normalizeValueWithProperty_exports = {};
    __export2(normalizeValueWithProperty_exports, {
      normalizeValueWithProperty: () => normalizeValueWithProperty,
      reverseMapClassNameToValue: () => reverseMapClassNameToValue
    });
    module2.exports = __toCommonJS2(normalizeValueWithProperty_exports);
    var import_constants2 = require_cjs2();
    var import_helpers = require_cjs4();
    var import_insertStyleRule = require_insertStyleRule();
    var stylePropsAllPlusTransforms = {
      ...import_helpers.stylePropsAll,
      translateX: true,
      translateY: true
    };
    function normalizeValueWithProperty(value, property) {
      if (!import_constants2.isWeb)
        return value;
      if (typeof value === "boolean") {
        return value;
      }
      if (property && property in import_helpers.stylePropsUnitless) {
        return value;
      }
      if (property && !(property in stylePropsAllPlusTransforms)) {
        return value;
      }
      let res = value;
      if (value && typeof value === "object")
        return value;
      if (typeof value === "number") {
        res = `${value}px`;
      } else if (property) {
        res = `${res}`;
      }
      return res;
    }
    var rcache = {};
    function reverseMapClassNameToValue(key, className) {
      const selectors = (0, import_insertStyleRule.getAllSelectors)();
      const cssRule = selectors[className];
      if (rcache[cssRule]) {
        return rcache[cssRule];
      }
      if (!cssRule) {
        if (process.env.NODE_ENV === "development") {
          console.warn(
            `No CSS rule found for ${key} looking for selector ".${className}", you may not be injecting extracted CSS`
          );
        }
        return;
      }
      const cssVal = cssRule.replace(/.*:/, "").replace(/;.*/, "").trim();
      let res;
      if (cssVal.startsWith("var(")) {
        res = cssVal;
      } else if (import_helpers.stylePropsUnitless[key]) {
        res = +cssVal;
      } else if (cssVal.endsWith("px")) {
        res = +cssVal.replace("px", "");
      } else {
        res = cssVal;
      }
      rcache[cssRule] = res;
      if (process.env.NODE_ENV === "development") {
        if (typeof res === "number" && isNaN(res)) {
          console.log("Tamagui invalid parsed value, NaN:", {
            res,
            cssVal,
            cssRule,
            key,
            className
          });
        }
      }
      return res;
    }
  }
});

// ../web/dist/cjs/helpers/normalizeShadow.js
var require_normalizeShadow = __commonJS({
  "../web/dist/cjs/helpers/normalizeShadow.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var normalizeShadow_exports = {};
    __export2(normalizeShadow_exports, {
      normalizeShadow: () => normalizeShadow
    });
    module2.exports = __toCommonJS2(normalizeShadow_exports);
    var import_defaultOffset = require_defaultOffset();
    var import_normalizeColor = require_normalizeColor();
    var import_normalizeValueWithProperty = require_normalizeValueWithProperty();
    function normalizeShadow({
      shadowColor,
      shadowOffset,
      shadowOpacity = 1,
      shadowRadius
    }) {
      const { height, width } = shadowOffset || import_defaultOffset.defaultOffset;
      return {
        shadowOffset: {
          width: (0, import_normalizeValueWithProperty.normalizeValueWithProperty)(width || 0),
          height: (0, import_normalizeValueWithProperty.normalizeValueWithProperty)(height || 0)
        },
        shadowRadius: (0, import_normalizeValueWithProperty.normalizeValueWithProperty)(shadowRadius || 0),
        shadowColor: (0, import_normalizeColor.normalizeColor)(shadowColor, shadowOpacity)
      };
    }
  }
});

// ../web/dist/cjs/helpers/expandStyles.js
var require_expandStyles = __commonJS({
  "../web/dist/cjs/helpers/expandStyles.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var expandStyles_exports = {};
    __export2(expandStyles_exports, {
      expandStylesAndRemoveNullishValues: () => expandStylesAndRemoveNullishValues,
      fixStyles: () => fixStyles
    });
    module2.exports = __toCommonJS2(expandStyles_exports);
    var import_constants2 = require_cjs2();
    var import_expandStyle = require_expandStyle();
    var import_normalizeShadow = require_normalizeShadow();
    var import_normalizeValueWithProperty = require_normalizeValueWithProperty();
    var import_pseudoDescriptors = require_pseudoDescriptors();
    function expandStylesAndRemoveNullishValues(style) {
      const res = {};
      for (let key in style) {
        const valIn = style[key];
        if (valIn == null)
          continue;
        if (key in import_pseudoDescriptors.pseudoDescriptors) {
          res[key] = expandStylesAndRemoveNullishValues(valIn);
          continue;
        }
        const val = (0, import_normalizeValueWithProperty.normalizeValueWithProperty)(valIn, key);
        const out = (0, import_expandStyle.expandStyle)(key, val);
        if (out) {
          Object.assign(res, Object.fromEntries(out));
        } else {
          res[key] = val;
        }
      }
      fixStyles(res);
      return res;
    }
    function fixStyles(style) {
      if (process.env.TAMAGUI_TARGET === "native") {
        if ("elevationAndroid" in style) {
          style["elevation"] = style.elevationAndroid;
          delete style.elevationAndroid;
        }
      }
      if (style.shadowRadius || style.shadowColor || style.shadowOpacity || style.shadowOffset) {
        Object.assign(style, (0, import_normalizeShadow.normalizeShadow)(style));
      }
      for (const key in borderDefaults) {
        if (key in style && !style[borderDefaults[key]]) {
          style[borderDefaults[key]] = "solid";
        }
      }
    }
    var nativeStyle = import_constants2.isWeb ? null : "borderStyle";
    var borderDefaults = {
      borderWidth: "borderStyle",
      borderBottomWidth: nativeStyle || "borderBottomStyle",
      borderTopWidth: nativeStyle || "borderTopStyle",
      borderLeftWidth: nativeStyle || "borderLeftStyle",
      borderRightWidth: nativeStyle || "borderRightStyle"
    };
  }
});

// ../web/dist/cjs/helpers/getStylesAtomic.js
var require_getStylesAtomic = __commonJS({
  "../web/dist/cjs/helpers/getStylesAtomic.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var getStylesAtomic_exports = {};
    __export2(getStylesAtomic_exports, {
      generateAtomicStyles: () => generateAtomicStyles,
      getStylesAtomic: () => getStylesAtomic,
      styleToCSS: () => styleToCSS
    });
    module2.exports = __toCommonJS2(getStylesAtomic_exports);
    var import_helpers = require_cjs4();
    var import_config = require_config();
    var import_defaultOffset = require_defaultOffset();
    var import_normalizeValueWithProperty = require_normalizeValueWithProperty();
    var import_pseudoDescriptors = require_pseudoDescriptors();
    function getStylesAtomic(stylesIn, debug) {
      let res = [];
      for (const pseudoName in import_pseudoDescriptors.pseudoDescriptorsBase) {
        const pseudoStyle = stylesIn[pseudoName];
        if (pseudoStyle) {
          res = [
            ...res,
            ...generateAtomicStyles(pseudoStyle, import_pseudoDescriptors.pseudoDescriptorsBase[pseudoName])
          ];
        }
      }
      res = [...res, ...generateAtomicStyles(stylesIn)];
      if (process.env.NODE_ENV === "development" && debug === "verbose") {
        console.log(` \u{1FAAE} getStylesAtomic`, { stylesIn, res });
      }
      return res;
    }
    var conf;
    var generateAtomicStyles = (style, pseudo) => {
      if (!style)
        return [];
      conf = conf || (0, import_config.getConfig)();
      styleToCSS(style);
      const out = [];
      for (const key in style) {
        if (key in import_pseudoDescriptors.pseudoDescriptors)
          continue;
        let val = style[key];
        if (val == null)
          continue;
        if (key === "transform" && Array.isArray(style.transform)) {
          val = val.map(
            // { scale: 2 } => 'scale(2)'
            // { translateX: 20 } => 'translateX(20px)'
            // { matrix: [1,2,3,4,5,6] } => 'matrix(1,2,3,4,5,6)'
            (transform) => {
              const type = Object.keys(transform)[0];
              const value2 = transform[type];
              if (type === "matrix" || type === "matrix3d") {
                return `${type}(${value2.join(",")})`;
              }
              return `${type}(${(0, import_normalizeValueWithProperty.normalizeValueWithProperty)(value2, type)})`;
            }
          ).join(" ");
        }
        const value = (0, import_normalizeValueWithProperty.normalizeValueWithProperty)(val, key);
        const hash = (0, import_helpers.simpleHash)(`${value}`);
        const pseudoPrefix = pseudo ? `0${pseudo.name}-` : "";
        const shortProp = conf.inverseShorthands[key] || key;
        const identifier = `_${shortProp}-${pseudoPrefix}${hash}`;
        const rules = createAtomicRules(identifier, key, value, pseudo);
        const styleObject = {
          property: key,
          pseudo: pseudo == null ? void 0 : pseudo.name,
          identifier,
          rules,
          value
        };
        out.push(styleObject);
      }
      return out;
    };
    function styleToCSS(style) {
      const { shadowOffset, shadowRadius, shadowColor } = style;
      if (style.shadowRadius) {
        const offset = shadowOffset || import_defaultOffset.defaultOffset;
        const width = (0, import_normalizeValueWithProperty.normalizeValueWithProperty)(offset.width);
        const height = (0, import_normalizeValueWithProperty.normalizeValueWithProperty)(offset.height);
        const radius = (0, import_normalizeValueWithProperty.normalizeValueWithProperty)(shadowRadius);
        const shadow = `${width} ${height} ${radius} ${shadowColor}`;
        style.boxShadow = style.boxShadow ? `${style.boxShadow}, ${shadow}` : shadow;
        delete style.shadowOffset;
        delete style.shadowRadius;
        delete style.shadowColor;
        delete style.shadowOpacity;
      }
      const { textShadowColor, textShadowOffset, textShadowRadius } = style;
      if (textShadowColor || textShadowOffset || textShadowRadius) {
        const { height, width } = textShadowOffset || import_defaultOffset.defaultOffset;
        const radius = textShadowRadius || 0;
        const color = (0, import_normalizeValueWithProperty.normalizeValueWithProperty)(textShadowColor, "textShadowColor");
        if (color && (height !== 0 || width !== 0 || radius !== 0)) {
          const blurRadius = (0, import_normalizeValueWithProperty.normalizeValueWithProperty)(radius);
          const offsetX = (0, import_normalizeValueWithProperty.normalizeValueWithProperty)(width);
          const offsetY = (0, import_normalizeValueWithProperty.normalizeValueWithProperty)(height);
          style.textShadow = `${offsetX} ${offsetY} ${blurRadius} ${color}`;
        }
        delete style.textShadowColor;
        delete style.textShadowOffset;
        delete style.textShadowRadius;
      }
    }
    function createDeclarationBlock(style, important = false) {
      let next = "";
      for (const [key, value] of style) {
        next += `${hyphenateStyleName(key)}:${value}${important ? " !important" : ""};`;
      }
      return `{${next}}`;
    }
    var hcache = {};
    var toHyphenLower = (match) => `-${match.toLowerCase()}`;
    var hyphenateStyleName = (key) => {
      if (key in hcache)
        return hcache[key];
      const val = key.replace(/[A-Z]/g, toHyphenLower);
      hcache[key] = val;
      return val;
    };
    var pseudoSelectorPrefixes = (() => {
      const res = {};
      for (const key in import_pseudoDescriptors.pseudoDescriptors) {
        const pseudo = import_pseudoDescriptors.pseudoDescriptors[key];
        res[pseudo.name] = `${[...Array(pseudo.priority)].map(() => ":root").join("")} `;
      }
      return res;
    })();
    function createAtomicRules(identifier, property, value, pseudo) {
      const selector = pseudo ? (
        // adding one more :root so we always override react native web styles :/
        `${pseudoSelectorPrefixes[pseudo.name]} .${identifier}:${pseudo.name}`
      ) : `:root .${identifier}`;
      const important = !!pseudo;
      let rules = [];
      switch (property) {
        case "placeholderTextColor": {
          const block = createDeclarationBlock(
            [
              ["color", value],
              ["opacity", 1]
            ],
            important
          );
          rules.push(`${selector}::placeholder${block}`);
          break;
        }
        case "backgroundClip":
        case "userSelect": {
          const propertyCapitalized = `${property[0].toUpperCase()}${property.slice(1)}`;
          const webkitProperty = `Webkit${propertyCapitalized}`;
          const block = createDeclarationBlock(
            [
              [property, value],
              [webkitProperty, value]
            ],
            important
          );
          rules.push(`${selector}${block}`);
          break;
        }
        case "pointerEvents": {
          let finalValue = value;
          if (value === "auto" || value === "box-only") {
            finalValue = "auto";
            if (value === "box-only") {
              rules.push(`${selector}>*${boxOnly}`);
            }
          } else if (value === "none" || value === "box-none") {
            finalValue = "none";
            if (value === "box-none") {
              rules.push(`${selector}>*${boxNone}`);
            }
          }
          const block = createDeclarationBlock([["pointerEvents", finalValue]], true);
          rules.push(`${selector}${block}`);
          break;
        }
        default: {
          const block = createDeclarationBlock([[property, value]], important);
          rules.push(`${selector}${block}`);
          break;
        }
      }
      if ((pseudo == null ? void 0 : pseudo.name) === "hover") {
        rules = rules.map((r) => `@media not all and (hover: none) { ${r} }`);
      }
      return rules;
    }
    var boxNone = createDeclarationBlock([["pointerEvents", "auto"]], true);
    var boxOnly = createDeclarationBlock([["pointerEvents", "none"]], true);
  }
});

// ../web/dist/cjs/helpers/getVariantExtras.js
var require_getVariantExtras = __commonJS({
  "../web/dist/cjs/helpers/getVariantExtras.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var getVariantExtras_exports = {};
    __export2(getVariantExtras_exports, {
      getFontsForLanguage: () => getFontsForLanguage,
      getVariantExtras: () => getVariantExtras
    });
    module2.exports = __toCommonJS2(getVariantExtras_exports);
    var import_createVariable = require_createVariable();
    var import_createProxy = require_createProxy();
    function getVariantExtras(styleState) {
      const { curProps, conf, context, theme } = styleState;
      let fonts = conf.fontsParsed;
      if (context == null ? void 0 : context.language) {
        fonts = getFontsForLanguage(conf.fontsParsed, context.language);
      }
      const fontFamily = (0, import_createVariable.getVariableValue)(
        styleState.fontFamily || styleState.curProps.fontFamily || styleState.conf.defaultFont
      );
      const next = {
        fonts,
        tokens: conf.tokensParsed,
        theme,
        fontFamily,
        font: fonts[fontFamily],
        // TODO do this in splitstlye
        // we avoid passing in default props for media queries because that would confuse things like SizableText.size:
        props: (0, import_createProxy.createProxy)(curProps, {
          // handles shorthands
          get(target, key) {
            const shorthand = conf.inverseShorthands[key];
            if (shorthand && Reflect.has(target, shorthand)) {
              return Reflect.get(target, shorthand);
            }
            if (Reflect.has(target, key)) {
              return Reflect.get(target, key);
            }
          }
        })
      };
      return next;
    }
    var fontLanguageCache = /* @__PURE__ */ new WeakMap();
    function getFontsForLanguage(fonts, language) {
      if (fontLanguageCache.has(language)) {
        return fontLanguageCache.get(language);
      }
      const next = {
        ...fonts,
        ...Object.fromEntries(
          Object.entries(language).map(([name, lang]) => {
            if (lang === "default") {
              return [];
            }
            const langKey = `$${name}_${lang}`;
            return [`$${name}`, fonts[langKey]];
          })
        )
      };
      fontLanguageCache.set(language, next);
      return next;
    }
  }
});

// ../web/dist/cjs/helpers/isObj.js
var require_isObj = __commonJS({
  "../web/dist/cjs/helpers/isObj.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var isObj_exports = {};
    __export2(isObj_exports, {
      isObj: () => isObj
    });
    module2.exports = __toCommonJS2(isObj_exports);
    var isObj = (x) => x && !Array.isArray(x) && typeof x === "object";
  }
});

// ../web/dist/cjs/helpers/propMapper.js
var require_propMapper = __commonJS({
  "../web/dist/cjs/helpers/propMapper.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var propMapper_exports = {};
    __export2(propMapper_exports, {
      getFontFamilyFromNameOrVariable: () => getFontFamilyFromNameOrVariable,
      getPropMappedFontFamily: () => getPropMappedFontFamily,
      propMapper: () => propMapper
    });
    module2.exports = __toCommonJS2(propMapper_exports);
    var import_constants2 = require_cjs2();
    var import_helpers = require_cjs4();
    var import_isDevTools = require_isDevTools();
    var import_createVariable = require_createVariable();
    var import_expandStyle = require_expandStyle();
    var import_expandStyles = require_expandStyles();
    var import_getVariantExtras = require_getVariantExtras();
    var import_isObj = require_isObj();
    var import_pseudoDescriptors = require_pseudoDescriptors();
    var propMapper = (key, value, styleStateIn, subPropsIn) => {
      if (!(process.env.TAMAGUI_TARGET === "native" && import_constants2.isAndroid)) {
        if (key === "elevationAndroid")
          return;
      }
      const subProps = styleStateIn.styleProps.fallbackProps || subPropsIn;
      const styleState = subProps ? new Proxy(styleStateIn, {
        get(_, k) {
          return k === "curProps" ? subProps : Reflect.get(_, k);
        }
      }) : styleStateIn;
      const { conf, styleProps, fontFamily, staticConfig } = styleState;
      const { variants } = staticConfig;
      if (process.env.NODE_ENV === "development" && fontFamily && fontFamily[0] === "$" && !(fontFamily in conf.fontsParsed)) {
        console.warn(
          `Warning: no fontFamily "${fontFamily}" found in config: ${Object.keys(conf.fontsParsed).join(
            ", "
          )}`
        );
      }
      if (variants && key in variants) {
        styleState.curProps[key] = value;
        const variantValue = resolveVariants(key, value, styleProps, styleState, "");
        if (variantValue) {
          return variantValue;
        }
      }
      let shouldReturn = false;
      if (key in conf.shorthands) {
        shouldReturn = true;
        key = conf.shorthands[key];
      }
      if (value) {
        if (value[0] === "$") {
          value = getToken2(key, value, styleProps, styleState);
        } else if ((0, import_createVariable.isVariable)(value)) {
          value = resolveVariableValue(value, styleProps);
        }
      }
      if (shouldReturn || value != null) {
        return (0, import_expandStyle.expandStyle)(key, value) || [[key, value]];
      }
    };
    var resolveVariants = (key, value, styleProps, styleState, parentVariantKey) => {
      const { staticConfig, conf, debug } = styleState;
      const { variants } = staticConfig;
      if (!variants)
        return;
      let variantValue = getVariantDefinition(variants[key], key, value, conf);
      if (process.env.NODE_ENV === "development" && debug === "verbose") {
        console.groupCollapsed(`\u2666\uFE0F\u2666\uFE0F\u2666\uFE0F resolve variant ${key}`);
        console.log({
          key,
          value,
          variantValue,
          variants,
          curProps: { ...styleState.curProps }
        });
        console.groupEnd();
      }
      if (!variantValue) {
        if (process.env.TAMAGUI_WARN_ON_MISSING_VARIANT === "1") {
          if (typeof value !== "boolean") {
            const name = staticConfig.componentName || "[UnnamedComponent]";
            console.warn(
              `No variant found: ${name} has variant "${key}", but no matching value "${value}"`
            );
          }
        }
        return;
      }
      if (typeof variantValue === "function") {
        const fn = variantValue;
        const extras = (0, import_getVariantExtras.getVariantExtras)(styleState);
        variantValue = fn(value, extras);
        if (process.env.NODE_ENV === "development" && debug === "verbose") {
          console.groupCollapsed("   expanded functional variant", key);
          console.log({ fn, variantValue, extras });
          console.groupEnd();
        }
      }
      let fontFamilyResult;
      if ((0, import_isObj.isObj)(variantValue)) {
        const fontFamilyUpdate = variantValue.fontFamily || variantValue[conf.inverseShorthands.fontFamily];
        if (fontFamilyUpdate) {
          fontFamilyResult = getFontFamilyFromNameOrVariable(fontFamilyUpdate, conf);
          styleState.fontFamily = fontFamilyResult;
          if (process.env.NODE_ENV === "development" && debug === "verbose") {
            console.log(`   updating font family`, fontFamilyResult);
          }
        }
        variantValue = resolveTokensAndVariants(
          key,
          variantValue,
          styleProps,
          styleState,
          parentVariantKey
        );
      }
      if (variantValue) {
        const expanded = (0, import_expandStyles.expandStylesAndRemoveNullishValues)(variantValue);
        const next = Object.entries(expanded);
        if (fontFamilyResult && fontFamilyResult[0] === "$") {
          fontFamilyCache.set(next, (0, import_createVariable.getVariableValue)(fontFamilyResult));
        }
        return next;
      }
    };
    function getFontFamilyFromNameOrVariable(input, conf) {
      if ((0, import_createVariable.isVariable)(input)) {
        const val = variableToFontNameCache.get(input);
        if (val)
          return val;
        for (const key in conf.fontsParsed) {
          const familyVariable = conf.fontsParsed[key].family;
          if ((0, import_createVariable.isVariable)(familyVariable)) {
            variableToFontNameCache.set(familyVariable, key);
            if (familyVariable === input) {
              return key;
            }
          }
        }
      } else if (typeof input === "string") {
        if (input[0] === "$") {
          return input;
        }
      }
    }
    var variableToFontNameCache = /* @__PURE__ */ new WeakMap();
    var fontFamilyCache = /* @__PURE__ */ new WeakMap();
    var getPropMappedFontFamily = (expanded) => {
      return expanded && fontFamilyCache.get(expanded);
    };
    var resolveTokensAndVariants = (key, value, styleProps, styleState, parentVariantKey) => {
      var _a;
      const { conf, staticConfig, debug, theme } = styleState;
      const { variants } = staticConfig;
      const res = {};
      if (process.env.NODE_ENV === "development" && debug === "verbose") {
        console.log(`   - resolveTokensAndVariants`, key, value);
      }
      for (const rKey in value) {
        const fKey = conf.shorthands[rKey] || rKey;
        const val = value[rKey];
        if (variants && fKey in variants) {
          styleState.curProps[fKey] = val;
          if (parentVariantKey && parentVariantKey === key) {
            res[fKey] = // SYNC WITH *1
            val[0] === "$" ? getToken2(fKey, val, styleProps, styleState) : val;
          } else {
            const variantOut = resolveVariants(fKey, val, styleProps, styleState, key);
            if (variantOut) {
              for (const [key2, val2] of variantOut) {
                if (val2 == null)
                  continue;
                if (key2 in import_pseudoDescriptors.pseudoDescriptors) {
                  res[key2] ?? (res[key2] = {});
                  Object.assign(res[key2], val2);
                } else {
                  res[key2] = val2;
                }
              }
            }
          }
          continue;
        }
        if ((0, import_createVariable.isVariable)(val)) {
          res[fKey] = resolveVariableValue(val, styleProps);
          continue;
        }
        if (typeof val === "string") {
          const fVal = (
            // SYNC WITH *1
            val[0] === "$" ? getToken2(fKey, val, styleProps, styleState) : val
          );
          res[fKey] = fVal;
          continue;
        }
        if ((0, import_isObj.isObj)(val)) {
          const subObject = resolveTokensAndVariants(fKey, val, styleProps, styleState, key);
          if (process.env.NODE_ENV === "development" && debug === "verbose") {
            console.log(`object`, fKey, subObject);
          }
          res[fKey] ?? (res[fKey] = {});
          Object.assign(res[fKey], subObject);
        } else {
          res[fKey] = val;
        }
        if (process.env.NODE_ENV === "development") {
          if (debug) {
            if (((_a = res[fKey]) == null ? void 0 : _a[0]) === "$") {
              console.warn(`\u26A0\uFE0F Missing token in theme ${theme.name}:`, fKey, res[fKey], theme);
            }
          }
        }
      }
      return res;
    };
    var tokenCats = ["size", "color", "radius", "space", "zIndex"].map((name) => ({
      name,
      spreadName: `...${name}`
    }));
    function getVariantDefinition(variant, key, value, conf) {
      if (typeof variant === "function") {
        return variant;
      }
      if (variant[value]) {
        return variant[value];
      }
      const { tokensParsed } = conf;
      for (const { name, spreadName } of tokenCats) {
        if (spreadName in variant && value in tokensParsed[name]) {
          return variant[spreadName];
        }
      }
      const fontSizeVariant = variant["...fontSize"];
      if (fontSizeVariant && conf.fontSizeTokens.has(value)) {
        return fontSizeVariant;
      }
      return variant[`:${typeof value}`] || variant["..."] || variant["...size"];
    }
    var fontShorthand = {
      fontSize: "size",
      fontWeight: "weight"
    };
    var getToken2 = (key, value, styleProps, styleState) => {
      var _a, _b;
      const { theme, conf, context, fontFamily } = styleState;
      const tokensParsed = conf.tokensParsed;
      let valOrVar;
      let hasSet = false;
      if (value in theme) {
        if (process.env.NODE_ENV === "development" && styleState.debug === "verbose") {
          console.log(` - getting theme value for ${key} from ${value}`);
        }
        valOrVar = theme[value];
        hasSet = true;
      } else {
        if (value in conf.specificTokens) {
          hasSet = true;
          valOrVar = conf.specificTokens[value];
        } else {
          switch (key) {
            case "fontFamily": {
              const fontsParsed = (context == null ? void 0 : context.language) ? (0, import_getVariantExtras.getFontsForLanguage)(conf.fontsParsed, context.language) : conf.fontsParsed;
              valOrVar = ((_a = fontsParsed[value]) == null ? void 0 : _a.family) || value;
              hasSet = true;
              break;
            }
            case "fontSize":
            case "lineHeight":
            case "letterSpacing":
            case "fontWeight": {
              const fam = fontFamily || styleState.conf.defaultFont;
              if (fam) {
                const fontsParsed = (context == null ? void 0 : context.language) ? (0, import_getVariantExtras.getFontsForLanguage)(conf.fontsParsed, context.language) : conf.fontsParsed;
                const font = fontsParsed[fam];
                valOrVar = ((_b = font == null ? void 0 : font[fontShorthand[key] || key]) == null ? void 0 : _b[value]) || value;
                hasSet = true;
              }
              break;
            }
          }
          for (const cat in import_helpers.tokenCategories) {
            if (key in import_helpers.tokenCategories[cat]) {
              const res = tokensParsed[cat][value];
              if (res != null) {
                valOrVar = res;
                hasSet = true;
              }
            }
          }
          if (!hasSet) {
            const spaceVar = tokensParsed.space[value];
            if (spaceVar != null) {
              valOrVar = spaceVar;
              hasSet = true;
            }
          }
        }
      }
      if (hasSet) {
        const out = resolveVariableValue(valOrVar, styleProps);
        return out;
      }
      if (process.env.NODE_ENV === "development" && import_isDevTools.isDevTools && styleState.debug === "verbose") {
        console.groupCollapsed("  \uFE52 propMap (val)", key, value);
        console.log({ valOrVar, theme, hasSet }, theme[key]);
        console.groupEnd();
      }
      return value;
    };
    function resolveVariableValue(valOrVar, { resolveVariablesAs }) {
      if ((0, import_createVariable.isVariable)(valOrVar)) {
        if (!import_constants2.isWeb || resolveVariablesAs === "value") {
          return valOrVar.val;
        }
        return valOrVar.variable;
      }
      return valOrVar;
    }
  }
});

// ../web/dist/cjs/helpers/getSplitStyles.js
var require_getSplitStyles = __commonJS({
  "../web/dist/cjs/helpers/getSplitStyles.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var getSplitStyles_exports = {};
    __export2(getSplitStyles_exports, {
      PROP_SPLIT: () => PROP_SPLIT,
      getSplitStyles: () => getSplitStyles,
      getSubStyle: () => getSubStyle,
      useSplitStyles: () => useSplitStyles
    });
    module2.exports = __toCommonJS2(getSplitStyles_exports);
    var import_constants2 = require_cjs2();
    var import_helpers = require_cjs4();
    var import_react = require("react");
    var import_config = require_config();
    var import_accessibilityDirectMap = require_accessibilityDirectMap();
    var import_isDevTools = require_isDevTools();
    var import_useMedia = require_useMedia();
    var import_createMediaStyle = require_createMediaStyle();
    var import_expandStyles = require_expandStyles();
    var import_getGroupPropParts = require_getGroupPropParts();
    var import_getStylesAtomic = require_getStylesAtomic();
    var import_insertStyleRule = require_insertStyleRule();
    var import_normalizeValueWithProperty = require_normalizeValueWithProperty();
    var import_propMapper = require_propMapper();
    var import_pseudoDescriptors = require_pseudoDescriptors();
    var fontFamilyKey = "fontFamily";
    var IS_STATIC = process.env.IS_STATIC === "is_static";
    var conf;
    var PROP_SPLIT = "-";
    var getSplitStyles = (props, staticConfig, theme, themeName, componentState, styleProps, parentSplitStyles, context, elementType, debug) => {
      var _a, _b, _c, _d, _e, _f, _g;
      conf = conf || (0, import_config.getConfig)();
      const { shorthands } = conf;
      const {
        isHOC,
        isText,
        variants,
        isReactNative,
        inlineProps,
        inlineWhenUnflattened,
        parentStaticConfig,
        acceptsClassName
      } = staticConfig;
      const validStyleProps = isText ? import_helpers.stylePropsText : import_helpers.validStyles;
      const viewProps = {};
      const mediaState2 = styleProps.mediaState || import_useMedia.mediaState;
      const usedKeys = {};
      const shouldDoClasses = acceptsClassName && import_constants2.isWeb && !styleProps.noClassNames;
      const rulesToInsert = [];
      const classNames = {};
      const transforms = {};
      let pseudos = null;
      let space = props.space;
      let hasMedia = false;
      let dynamicThemeAccess;
      let pseudoGroups;
      let mediaGroups;
      let style = {};
      let className = "";
      let mediaStylesSeen = 0;
      const styleState = {
        curProps: Object.assign({}, props),
        classNames,
        conf,
        props,
        styleProps,
        componentState,
        staticConfig,
        style,
        theme,
        usedKeys,
        viewProps,
        context,
        debug
      };
      if (process.env.NODE_ENV === "development" && debug && debug !== "profile" && import_constants2.isClient) {
        console.groupCollapsed("getSplitStyles (collapsed)");
        console.log({
          props,
          staticConfig,
          shouldDoClasses,
          styleProps,
          componentState,
          styleState,
          theme: { ...theme }
        });
        console.groupEnd();
      }
      if (process.env.TAMAGUI_TARGET === "web" && typeof props.className === "string") {
        for (const cn of props.className.split(" ")) {
          if (cn[0] === "_") {
            const [shorthand, mediaOrPseudo] = cn.slice(1).split("-");
            const isMedia = mediaOrPseudo[0] === "_";
            const isPseudo = mediaOrPseudo[0] === "0";
            const isMediaOrPseudo = isMedia || isPseudo;
            let fullKey = shorthands[shorthand];
            if (isMedia) {
              let mediaShortKey = mediaOrPseudo.slice(1);
              mediaShortKey = mediaShortKey.slice(0, mediaShortKey.indexOf("_"));
              fullKey += `${PROP_SPLIT}${mediaShortKey}`;
            } else if (isPseudo) {
              const pseudoShortKey = mediaOrPseudo.slice(1);
              fullKey += `${PROP_SPLIT}${pseudoShortKey}`;
            }
            usedKeys[fullKey] = 1;
            mergeClassName(transforms, classNames, fullKey, cn, isMediaOrPseudo);
          } else if (cn) {
            className += ` ${cn}`;
          }
        }
      }
      for (const keyOg in props) {
        let keyInit = keyOg;
        let valInit = props[keyOg];
        if (keyInit in shorthands) {
          keyInit = shorthands[keyInit];
        }
        if (keyInit === "className")
          continue;
        if (keyInit in usedKeys)
          continue;
        if (keyInit in skipProps && !isHOC) {
          if (keyInit === "group") {
            if (process.env.TAMAGUI_TARGET === "web") {
              const identifier = `t_group_${valInit}`;
              const containerCSS = {
                identifier,
                property: "container",
                rules: [
                  `.${identifier} { container-name: ${valInit}; container-type: inline-size; }`
                ]
              };
              addStyleToInsertRules(rulesToInsert, containerCSS);
            }
          }
          continue;
        }
        const valInitType = typeof valInit;
        styleState.curProps[keyInit] = valInit;
        if (process.env.TAMAGUI_TARGET === "web") {
          if (valInitType === "string" && valInit[0] === "_") {
            if (keyInit in validStyleProps || keyInit.includes("-")) {
              if (process.env.NODE_ENV === "development" && debug) {
                console.log(`Adding compiled style ${keyInit}: ${valInit}`);
              }
              if (shouldDoClasses) {
                classNames[keyInit] = valInit;
                delete style[keyInit];
              } else {
                style[keyInit] = (0, import_normalizeValueWithProperty.reverseMapClassNameToValue)(keyInit, valInit);
                delete className[keyInit];
              }
              continue;
            }
          }
        }
        if (process.env.TAMAGUI_TARGET === "native") {
          if (!import_constants2.isAndroid) {
            if (keyInit === "elevationAndroid")
              continue;
          }
          if (keyInit === "userSelect") {
            keyInit = "selectable";
            valInit = valInit === "none" ? false : true;
          } else if (keyInit === "role") {
            viewProps["accessibilityRole"] = import_accessibilityDirectMap.accessibilityWebRoleToNativeRole[valInit];
            continue;
          } else if (keyInit.startsWith("aria-")) {
            if (import_accessibilityDirectMap.webToNativeAccessibilityDirectMap[keyInit]) {
              const nativeA11yProp = import_accessibilityDirectMap.webToNativeAccessibilityDirectMap[keyInit];
              if (keyInit === "aria-hidden") {
                viewProps["aria-hidden"] = valInit;
              }
              viewProps[nativeA11yProp] = valInit;
              continue;
            } else if (import_accessibilityDirectMap.nativeAccessibilityValue[keyInit]) {
              let field = import_accessibilityDirectMap.nativeAccessibilityValue[keyInit];
              if (viewProps["accessibilityValue"]) {
                viewProps["accessibilityValue"][field] = valInit;
              } else {
                viewProps["accessibilityValue"] = {
                  [field]: valInit
                };
              }
            } else if (import_accessibilityDirectMap.nativeAccessibilityState[keyInit]) {
              let field = import_accessibilityDirectMap.nativeAccessibilityState[keyInit];
              if (viewProps["accessibilityState"]) {
                viewProps["accessibilityState"][field] = valInit;
              } else {
                viewProps["accessibilityState"] = {
                  [field]: valInit
                };
              }
            }
            continue;
          } else if (keyInit.startsWith("data-")) {
            continue;
          }
        }
        if (keyInit === "dataSet") {
          for (const keyInit2 in valInit) {
            viewProps[`data-${hyphenate(keyInit2)}`] = valInit[keyInit2];
          }
          continue;
        }
        if (keyInit[0] === "_" && keyInit.startsWith("_style")) {
          mergeStyleProp(styleState, valInit);
          continue;
        }
        if (process.env.TAMAGUI_TARGET === "web") {
          if (keyInit === "disabled" && valInit === true) {
            viewProps["aria-disabled"] = true;
            if (elementType === "button" || elementType === "form" || elementType === "input" || elementType === "select" || elementType === "textarea") {
              viewProps.disabled = true;
            }
            if (!(variants == null ? void 0 : variants.disabled)) {
              continue;
            }
          }
          if (keyInit === "testID") {
            viewProps[isReactNative ? keyInit : "data-testid"] = valInit;
            continue;
          }
          if (keyInit === "id" || keyInit === "nativeID") {
            if (isReactNative) {
              viewProps.nativeID = valInit;
            } else {
              viewProps.id = valInit;
            }
            continue;
          }
          let didUseKeyInit = false;
          if (isReactNative) {
            if (keyInit in import_accessibilityDirectMap.accessibilityDirectMap || keyInit.startsWith("accessibility")) {
              viewProps[keyInit] = valInit;
              continue;
            }
          } else {
            didUseKeyInit = true;
            if (keyInit in import_accessibilityDirectMap.accessibilityDirectMap) {
              viewProps[import_accessibilityDirectMap.accessibilityDirectMap[keyInit]] = valInit;
              continue;
            } else {
              switch (keyInit) {
                case "accessibilityRole": {
                  if (valInit === "none") {
                    viewProps.role = "presentation";
                  } else {
                    viewProps.role = accessibilityRoleToWebRole[valInit] || valInit;
                  }
                  continue;
                }
                case "accessibilityLabelledBy":
                case "accessibilityFlowTo":
                case "accessibilityControls":
                case "accessibilityDescribedBy": {
                  viewProps[`aria-${keyInit.replace("accessibility", "").toLowerCase()}`] = processIDRefList(valInit);
                  continue;
                }
                case "accessibilityKeyShortcuts": {
                  if (Array.isArray(valInit)) {
                    viewProps["aria-keyshortcuts"] = valInit.join(" ");
                  }
                  continue;
                }
                case "accessibilityLiveRegion": {
                  viewProps["aria-live"] = valInit === "none" ? "off" : valInit;
                  continue;
                }
                case "accessibilityReadOnly": {
                  viewProps["aria-readonly"] = valInit;
                  if (elementType === "input" || elementType === "select" || elementType === "textarea") {
                    viewProps.readOnly = true;
                  }
                  continue;
                }
                case "accessibilityRequired": {
                  viewProps["aria-required"] = valInit;
                  if (elementType === "input" || elementType === "select" || elementType === "textarea") {
                    viewProps.required = valInit;
                  }
                  continue;
                }
                default: {
                  didUseKeyInit = false;
                }
              }
            }
          }
          if (didUseKeyInit) {
            continue;
          }
          if (valInit && valInit[0] === "_") {
            const isValidClassName = keyInit in import_helpers.validStyles;
            const isMediaOrPseudo2 = !isValidClassName && keyInit.includes(PROP_SPLIT) && import_helpers.validStyles[keyInit.split(PROP_SPLIT)[0]];
            if (isValidClassName || isMediaOrPseudo2) {
              if (process.env.NODE_ENV === "development" && debug) {
                console.log("tamagui classname prop", keyInit, valInit);
              }
              if (shouldDoClasses) {
                mergeClassName(transforms, classNames, keyInit, valInit, isMediaOrPseudo2);
                delete style[keyInit];
              } else {
                style[keyInit] = (0, import_normalizeValueWithProperty.reverseMapClassNameToValue)(keyInit, valInit);
                delete className[keyInit];
              }
              continue;
            }
          }
        }
        const isValidStyleKeyInit = keyInit in validStyleProps;
        const isShorthand = keyInit in shorthands;
        let isVariant = !isValidStyleKeyInit && variants && keyInit in variants;
        const isStyleLikeKey = isShorthand || isValidStyleKeyInit || isVariant;
        let isPseudo = keyInit in import_helpers.validPseudoKeys;
        let isMedia = !isStyleLikeKey && !isPseudo && (0, import_useMedia.isMediaKey)(keyInit);
        let isMediaOrPseudo = isMedia || isPseudo;
        const isStyleProp = isMediaOrPseudo || isVariant || isValidStyleKeyInit || isShorthand;
        if (isStyleProp && props.asChild === "except-style") {
          continue;
        }
        const shouldPassProp = !isStyleProp || // is in parent variants
        isHOC && (parentStaticConfig == null ? void 0 : parentStaticConfig.variants) && keyInit in parentStaticConfig.variants || (inlineProps == null ? void 0 : inlineProps.has(keyInit));
        const isHOCShouldPassThrough = Boolean(
          isHOC && (isShorthand || isValidStyleKeyInit || isMediaOrPseudo || ((_a = parentStaticConfig == null ? void 0 : parentStaticConfig.variants) == null ? void 0 : _a[keyInit]) || keyInit in skipProps)
        );
        const shouldPassThrough = shouldPassProp || isHOCShouldPassThrough;
        if (process.env.NODE_ENV === "development" && debug === "verbose") {
          console.groupCollapsed(
            `\u{1F539}\u{1F539}\u{1F539}\u{1F539} ${keyOg}${keyInit !== keyOg ? ` (shorthand for ${keyInit})` : ""} ${shouldPassThrough ? "(pass)" : ""} \u{1F539}\u{1F539}\u{1F539}\u{1F539}`
          );
          console.log({ isVariant, valInit, shouldPassProp });
          if (import_constants2.isClient) {
            console.log({
              variants,
              variant: variants == null ? void 0 : variants[keyInit],
              isVariant,
              isHOCShouldPassThrough,
              curProps: { ...styleState.curProps },
              parentStaticConfig
            });
          }
          console.groupEnd();
        }
        if (shouldPassThrough) {
          passDownProp(viewProps, keyInit, valInit, isMediaOrPseudo);
          if (!isVariant) {
            continue;
          }
        }
        if (keyInit in skipProps)
          continue;
        if (isText) {
          if (valInit && (keyInit === fontFamilyKey || keyInit === shorthands[fontFamilyKey]) && valInit in conf.fontsParsed) {
            styleState.fontFamily = valInit;
          }
        }
        if (process.env.TAMAGUI_TARGET === "native" && isValidStyleKeyInit && !variants && (valInitType === "number" || valInitType === "string" && valInit[0] !== "$")) {
          style[keyInit] = valInit;
          continue;
        }
        const avoidPropMap = isMediaOrPseudo || !isVariant && !isValidStyleKeyInit;
        const expanded = avoidPropMap ? [[keyInit, valInit]] : (0, import_propMapper.propMapper)(keyInit, valInit, styleState);
        const next = (0, import_propMapper.getPropMappedFontFamily)(expanded);
        if (next) {
          styleState.fontFamily = next;
        }
        if (process.env.NODE_ENV === "development" && debug === "verbose") {
          console.groupCollapsed("  \u{1F4A0} expanded", keyInit, valInit);
          try {
            if (!import_constants2.isServer && import_isDevTools.isDevTools) {
              console.log({
                expanded,
                styleProps,
                componentState,
                isVariant,
                variant: variants == null ? void 0 : variants[keyInit],
                shouldPassProp,
                isHOCShouldPassThrough,
                theme,
                usedKeys: { ...usedKeys },
                curProps: { ...styleState.curProps }
              });
              console.log("expanded", expanded, "\nusedKeys", { ...usedKeys }, "\ncurrent", {
                ...style
              });
            }
          } catch {
          }
          console.groupEnd();
        }
        if (!expanded)
          continue;
        for (const [key, val] of expanded) {
          if (val == null)
            continue;
          if (key in usedKeys)
            continue;
          isPseudo = key in import_helpers.validPseudoKeys;
          isMedia = !isPseudo && !isValidStyleKeyInit && (0, import_useMedia.isMediaKey)(key);
          isMediaOrPseudo = isMedia || isPseudo;
          isVariant = variants && key in variants;
          if ((inlineProps == null ? void 0 : inlineProps.has(key)) || IS_STATIC && (inlineWhenUnflattened == null ? void 0 : inlineWhenUnflattened.has(key))) {
            viewProps[key] = props[key] ?? val;
          }
          const isHOCShouldPassThrough2 = isHOC && (isMediaOrPseudo || ((_b = parentStaticConfig == null ? void 0 : parentStaticConfig.variants) == null ? void 0 : _b[keyInit]));
          if (isHOCShouldPassThrough2) {
            passDownProp(viewProps, key, val, isMediaOrPseudo);
            if (process.env.NODE_ENV === "development" && debug === "verbose") {
              console.groupCollapsed(` - passing down prop ${key}`);
              console.log({ val, after: { ...viewProps[key] } });
              console.groupEnd();
            }
            continue;
          }
          if (isPseudo) {
            if (!val)
              continue;
            const pseudoStyleObject = getSubStyle(
              styleState,
              key,
              val,
              styleProps.noClassNames
            );
            const descriptor = import_pseudoDescriptors.pseudoDescriptors[key];
            const isEnter = key === "enterStyle";
            const isExit = key === "exitStyle";
            if (process.env.NODE_ENV === "development" && !styleProps.isAnimated && !componentState.unmounted && (isEnter || isExit)) {
              console.warn(
                `No animation prop given to component ${staticConfig.componentName || ""} with enterStyle / exitStyle, these styles will be ignore.`
              );
            }
            if (!descriptor || isExit && !styleProps.isExiting) {
              continue;
            }
            if (!shouldDoClasses || IS_STATIC) {
              pseudos || (pseudos = {});
              pseudos[key] || (pseudos[key] = {});
              if (IS_STATIC) {
                Object.assign(pseudos[key], pseudoStyleObject);
              }
            }
            if (shouldDoClasses && !isEnter && !isExit) {
              const pseudoStyles = (0, import_getStylesAtomic.generateAtomicStyles)(pseudoStyleObject, descriptor);
              if (process.env.NODE_ENV === "development" && debug === "verbose") {
                console.groupCollapsed("pseudo (classes)", key);
                console.log({ pseudoStyleObject, pseudoStyles });
                console.groupEnd();
              }
              for (const psuedoStyle of pseudoStyles) {
                const fullKey = `${psuedoStyle.property}${PROP_SPLIT}${descriptor.name}`;
                if (fullKey in usedKeys)
                  continue;
                addStyleToInsertRules(rulesToInsert, psuedoStyle);
                mergeClassName(
                  transforms,
                  classNames,
                  fullKey,
                  psuedoStyle.identifier,
                  isMediaOrPseudo,
                  true
                );
              }
            } else {
              const descriptorKey = descriptor.stateKey || descriptor.name;
              const pseudoState = componentState[descriptorKey];
              let isDisabled = isExit ? !styleProps.isExiting : !pseudoState;
              if (import_constants2.isWeb && !import_constants2.isClient && isEnter) {
                isDisabled = false;
              }
              if (process.env.NODE_ENV === "development" && debug === "verbose") {
                console.groupCollapsed("pseudo", key, { isDisabled });
                console.log(pseudoStyleObject, {
                  isDisabled,
                  descriptorKey,
                  descriptor,
                  pseudoState,
                  state: { ...componentState }
                });
                console.groupEnd();
              }
              const importance = descriptor.priority;
              for (const pkey in pseudoStyleObject) {
                const val2 = pseudoStyleObject[pkey];
                if (isDisabled) {
                  if (pkey in animatableDefaults && !(pkey in usedKeys)) {
                    const defaultVal = animatableDefaults[pkey];
                    mergeStyle(styleState, pkey, defaultVal);
                  }
                } else {
                  const curImportance = usedKeys[importance] || 0;
                  const shouldMerge = importance >= curImportance;
                  if (shouldMerge) {
                    pseudos || (pseudos = {});
                    pseudos[key] || (pseudos[key] = {});
                    pseudos[key][pkey] = val2;
                    mergeStyle(styleState, pkey, val2);
                    usedKeys[pkey] || (usedKeys[pkey] = 1);
                  }
                  if (process.env.NODE_ENV === "development" && debug === "verbose") {
                    console.log("    subKey", pkey, shouldMerge, {
                      importance,
                      curImportance,
                      pkey,
                      val: val2
                    });
                  }
                }
              }
              if (!isDisabled) {
                for (const key2 in val) {
                  const k = shorthands[key2] || key2;
                  usedKeys[k] = Math.max(importance, usedKeys[k] || 0);
                }
              }
            }
            continue;
          } else if (isMedia) {
            if (!val)
              continue;
            const isPlatformMedia = key.startsWith("$platform-");
            if (isPlatformMedia) {
              const platform = key.slice(10);
              if (
                // supports web, ios, android
                platform !== import_constants2.currentPlatform && // supports web, native
                platform !== process.env.TAMAGUI_TARGET
              ) {
                continue;
              }
            }
            hasMedia || (hasMedia = true);
            const mediaStyle = getSubStyle(
              styleState,
              key,
              val,
              // TODO try true like pseudo
              false
            );
            const mediaKeyShort = key.slice(1);
            if (process.env.NODE_ENV === "development" && debug === "verbose") {
              console.log(`  \u{1F4FA} ${key}`, { key, val, mediaStyle, props, shouldDoClasses, componentState });
            }
            const hasSpace = val["space"];
            if (hasSpace || !shouldDoClasses) {
              if (!Array.isArray(hasMedia)) {
                hasMedia = [];
              }
              hasMedia.push(mediaKeyShort);
            }
            if (shouldDoClasses) {
              if (hasSpace) {
                delete mediaStyle["space"];
                if (mediaState2[mediaKeyShort]) {
                  const importance = (0, import_useMedia.getMediaImportanceIfMoreImportant)(
                    mediaKeyShort,
                    "space",
                    usedKeys,
                    true
                  );
                  if (importance) {
                    space = val["space"];
                    usedKeys["space"] = importance;
                    if (process.env.NODE_ENV === "development" && debug === "verbose") {
                      console.log(
                        `Found more important space for current media ${mediaKeyShort}: ${val} (importance: ${importance})`
                      );
                    }
                  }
                }
              }
              const mediaStyles = (0, import_getStylesAtomic.getStylesAtomic)(mediaStyle, debug);
              const priority = mediaStylesSeen;
              mediaStylesSeen += 1;
              for (const style2 of mediaStyles) {
                const out = (0, import_createMediaStyle.createMediaStyle)(
                  style2,
                  mediaKeyShort,
                  import_useMedia.mediaQueryConfig,
                  false,
                  priority
                );
                const fullKey = `${style2.property}${PROP_SPLIT}${mediaKeyShort}`;
                if (fullKey in usedKeys)
                  continue;
                addStyleToInsertRules(rulesToInsert, out);
                mergeClassName(transforms, classNames, fullKey, out.identifier, true, true);
              }
            } else {
              const isThemeMedia = !isPlatformMedia && mediaKeyShort.startsWith("theme-");
              const isGroupMedia = !isPlatformMedia && !isThemeMedia && mediaKeyShort.startsWith("group-");
              if (!isThemeMedia && !isPlatformMedia && !isGroupMedia) {
                if (!mediaState2[mediaKeyShort]) {
                  continue;
                }
              }
              let importanceBump = 0;
              if (isThemeMedia) {
                dynamicThemeAccess = true;
                const mediaThemeName = mediaKeyShort.slice(6);
                if (!(themeName === mediaThemeName || themeName.startsWith(mediaThemeName))) {
                  continue;
                }
              } else if (isGroupMedia) {
                const groupInfo = (0, import_getGroupPropParts.getGroupPropParts)(mediaKeyShort);
                const groupName = groupInfo.name;
                const groupContext = context == null ? void 0 : context.groups.state[groupName];
                if (!groupContext) {
                  if (process.env.NODE_ENV === "development" && debug) {
                    console.warn(`No parent with group prop, skipping styles: ${groupName}`);
                  }
                  continue;
                }
                const groupPseudoKey = groupInfo.pseudo;
                const groupMediaKey = groupInfo.media;
                const componentGroupState = (_c = componentState.group) == null ? void 0 : _c[groupName];
                if (groupMediaKey) {
                  mediaGroups || (mediaGroups = /* @__PURE__ */ new Set());
                  mediaGroups.add(groupMediaKey);
                  const mediaState22 = componentGroupState == null ? void 0 : componentGroupState.media;
                  let isActive = mediaState22 == null ? void 0 : mediaState22[groupMediaKey];
                  if (!mediaState22 && groupContext.layout) {
                    isActive = (0, import_useMedia.mediaKeyMatch)(groupMediaKey, groupContext.layout);
                  }
                  if (!isActive)
                    continue;
                  importanceBump = 2;
                }
                if (groupPseudoKey) {
                  pseudoGroups || (pseudoGroups = /* @__PURE__ */ new Set());
                  pseudoGroups.add(groupName);
                  const componentGroupPseudoState = (componentGroupState || // fallback to context initially
                  context.groups.state[groupName]).pseudo;
                  const isActive = componentGroupPseudoState == null ? void 0 : componentGroupPseudoState[groupPseudoKey];
                  if (!isActive)
                    continue;
                  const priority = import_pseudoDescriptors.pseudoPriorities[groupPseudoKey];
                  importanceBump = priority;
                }
              }
              for (const subKey in mediaStyle) {
                if (subKey === "space") {
                  space = valInit.space;
                  continue;
                }
                (0, import_useMedia.mergeMediaByImportance)(
                  style,
                  mediaKeyShort,
                  subKey,
                  mediaStyle[subKey],
                  usedKeys,
                  mediaState2[mediaKeyShort],
                  importanceBump
                );
                if (key === fontFamilyKey) {
                  styleState.fontFamily = mediaStyle.fontFamily;
                }
              }
            }
            continue;
          }
          if (process.env.TAMAGUI_TARGET === "native") {
            if (key === "pointerEvents") {
              viewProps[key] = val;
              continue;
            }
          }
          if (
            // is HOC we can just pass through the styles as props
            // this fixes issues where style prop got merged with wrong priority
            !isHOC && (key in validStyleProps || process.env.TAMAGUI_TARGET === "native" && import_constants2.isAndroid && key === "elevation")
          ) {
            mergeStyle(styleState, key, val);
            continue;
          }
          if (!isVariant) {
            viewProps[key] = val;
          }
        }
        if (process.env.NODE_ENV === "development" && debug === "verbose") {
          console.groupCollapsed(` \u2714\uFE0F expand complete`, keyInit);
          try {
            console.log("style", { ...style });
            console.log("viewProps", { ...viewProps });
          } catch {
          }
          console.groupEnd();
        }
      }
      if (props.style) {
        mergeStyleProp(styleState, props.style);
      }
      (0, import_expandStyles.fixStyles)(style);
      if (import_constants2.isWeb && !staticConfig.isReactNative) {
        (0, import_getStylesAtomic.styleToCSS)(style);
      }
      if (styleState.transforms) {
        Object.entries(styleState.transforms).sort(([a], [b]) => a.localeCompare(b)).forEach(([key, val]) => {
          mergeTransform(style, key, val, true);
        });
      }
      if (parentSplitStyles) {
        if (process.env.TAMAGUI_TARGET === "web") {
          if (shouldDoClasses) {
            for (const key in parentSplitStyles.classNames) {
              const val = parentSplitStyles.classNames[key];
              if (key in style || key in classNames)
                continue;
              classNames[key] = val;
            }
          }
        }
        if (!shouldDoClasses) {
          for (const key in parentSplitStyles.style) {
            if (key in classNames || key in style)
              continue;
            style[key] = parentSplitStyles.style[key];
          }
        }
      }
      if (process.env.TAMAGUI_TARGET === "web") {
        if (shouldDoClasses) {
          let retainedStyles;
          let shouldRetain = false;
          if (style["$$css"]) {
          } else {
            const atomic = (0, import_getStylesAtomic.getStylesAtomic)(style);
            for (const atomicStyle of atomic) {
              const key = atomicStyle.property;
              const isAnimatedAndAnimateOnly = styleProps.isAnimated && styleProps.noClassNames && (!props.animateOnly || props.animateOnly.includes(key));
              const nonAnimatedAnimateOnly = !isAnimatedAndAnimateOnly && !styleProps.isAnimated && ((_d = props.animateOnly) == null ? void 0 : _d.includes(key));
              if (isAnimatedAndAnimateOnly) {
                retainedStyles || (retainedStyles = {});
                retainedStyles[key] = style[key];
              } else if (nonAnimatedAnimateOnly) {
                retainedStyles || (retainedStyles = {});
                retainedStyles[key] = atomicStyle.value;
                shouldRetain = true;
              } else {
                addStyleToInsertRules(rulesToInsert, atomicStyle);
                mergeClassName(
                  transforms,
                  classNames,
                  key,
                  atomicStyle.identifier,
                  false,
                  true
                );
              }
            }
            if (shouldRetain || !IS_STATIC && !styleProps.keepStyleSSR) {
              style = retainedStyles || {};
            }
          }
        }
        if (transforms) {
          for (const namespace in transforms) {
            if (!transforms[namespace]) {
              if (process.env.NODE_ENV === "development") {
                console.warn("Error no transform", transforms, namespace);
              }
              continue;
            }
            const [hash, val] = transforms[namespace];
            const identifier = `_transform${hash}`;
            if (import_constants2.isClient && !import_insertStyleRule.insertedTransforms[identifier]) {
              const rule = `.${identifier} { transform: ${val}; }`;
              addStyleToInsertRules(rulesToInsert, {
                identifier,
                rules: [rule],
                property: namespace
              });
            }
            classNames[namespace] = identifier;
          }
        }
        if (import_constants2.isWeb && !isReactNative) {
          if (viewProps.tabIndex == null) {
            const isFocusable = viewProps.focusable ?? viewProps.accessible;
            if (viewProps.focusable) {
              delete viewProps.focusable;
            }
            const role = viewProps.role;
            if (isFocusable === false) {
              viewProps.tabIndex = "-1";
            }
            if (
              // These native elements are focusable by default
              elementType === "a" || elementType === "button" || elementType === "input" || elementType === "select" || elementType === "textarea"
            ) {
              if (isFocusable === false || props.accessibilityDisabled === true) {
                viewProps.tabIndex = "-1";
              }
            } else if (
              // These roles are made focusable by default
              role === "button" || role === "checkbox" || role === "link" || role === "radio" || // @ts-expect-error (consistent with RNW)
              role === "textbox" || role === "switch"
            ) {
              if (isFocusable !== false) {
                viewProps.tabIndex = "0";
              }
            }
            if (isFocusable) {
              viewProps.tabIndex = "0";
              delete viewProps.focusable;
            }
          }
        }
      }
      const result = {
        space,
        hasMedia,
        fontFamily: styleState.fontFamily,
        viewProps,
        // @ts-expect-error
        style,
        pseudos,
        classNames,
        rulesToInsert,
        dynamicThemeAccess,
        pseudoGroups,
        mediaGroups
      };
      if (process.env.TAMAGUI_TARGET === "native") {
        if (style.fontFamily) {
          const faceInfo = (_e = (0, import_config.getFont)(style.fontFamily)) == null ? void 0 : _e.face;
          if (faceInfo) {
            const overrideFace = (_g = (_f = faceInfo[style.fontWeight]) == null ? void 0 : _f[style.fontStyle || "normal"]) == null ? void 0 : _g.val;
            if (overrideFace) {
              style.fontFamily = overrideFace;
              styleState.fontFamily = overrideFace;
              delete style.fontWeight;
              delete style.fontStyle;
            }
          }
          if (process.env.NODE_ENV === "development" && debug && debug !== "profile") {
            console.log(`Found fontFamily native: ${style.fontFamily}`, faceInfo);
          }
        }
      }
      if (className) {
        classNames.className = className;
      }
      if (process.env.NODE_ENV === "development" && debug === "verbose") {
        if (import_isDevTools.isDevTools) {
          console.groupCollapsed("  \u{1F539} ===>");
          try {
            const logs = {
              ...result,
              componentState,
              transforms,
              viewProps,
              viewPropsOrder: Object.keys(viewProps),
              rulesToInsert,
              parentSplitStyles
            };
            for (const key in logs) {
              console.log(key, logs[key]);
            }
          } catch {
          }
          console.groupEnd();
        }
      }
      return result;
    };
    function mergeClassName(transforms, classNames, key, val, isMediaOrPseudo = false, isInsertingNow = false) {
      if (process.env.TAMAGUI_TARGET === "web") {
        if (!val)
          return;
        if (!isInsertingNow && val[0] === "_" && val.startsWith("_transform-")) {
          const ns = isMediaOrPseudo ? key : "transform";
          let transform = import_insertStyleRule.insertedTransforms[val];
          if (import_constants2.isClient && !transform) {
            (0, import_insertStyleRule.scanAllSheets)();
            transform = import_insertStyleRule.insertedTransforms[val];
            if (!transform && import_constants2.isWeb && val[0] !== "_") {
              transform = val;
            }
          }
          transforms[ns] || (transforms[ns] = ["", ""]);
          transforms[ns][0] += val.replace("_transform", "");
          if (transform) {
            transforms[ns][1] += transform;
          }
        } else {
          classNames[key] = val;
        }
      }
    }
    function mergeStyle(styleState, key, val) {
      const { classNames, viewProps, style, usedKeys } = styleState;
      if (import_constants2.isWeb && (val == null ? void 0 : val[0]) === "_") {
        classNames[key] = val;
        usedKeys[key] || (usedKeys[key] = 1);
      } else if (key in import_helpers.stylePropsTransform) {
        styleState.transforms || (styleState.transforms = {});
        styleState.transforms[key] = val;
      } else {
        const out = import_constants2.isWeb ? (0, import_normalizeValueWithProperty.normalizeValueWithProperty)(val, key) : val;
        if (key in import_helpers.validStylesOnBaseProps) {
          viewProps[key] = out;
        } else {
          style[key] = out;
        }
      }
    }
    var getSubStyle = (styleState, subKey, styleIn, avoidMergeTransform) => {
      const { staticConfig, props, conf: conf2 } = styleState;
      const styleOut = {};
      for (let key in styleIn) {
        const val = styleIn[key];
        key = conf2.shorthands[key] || key;
        const expanded = (0, import_propMapper.propMapper)(key, val, styleState, { ...props, ...props[subKey] });
        if (!expanded || !staticConfig.isHOC && key in skipProps) {
          continue;
        }
        for (const [skey, sval] of expanded) {
          if (!avoidMergeTransform && skey in import_helpers.stylePropsTransform) {
            mergeTransform(styleOut, skey, sval);
          } else {
            styleOut[skey] = (0, import_normalizeValueWithProperty.normalizeValueWithProperty)(sval, key);
          }
        }
      }
      (0, import_expandStyles.fixStyles)(styleOut);
      return styleOut;
    };
    function mergeStyleProp(styleState, val) {
      if (!val)
        return;
      const styles = [].concat(val).flat();
      for (const cur of styles) {
        if (!cur)
          continue;
        const isRNW = cur["$$css"];
        if (isRNW) {
          Object.assign(styleState.classNames, cur);
        } else {
          for (const key in cur) {
            if (key in styleState.usedKeys) {
              continue;
            }
            mergeStyle(styleState, key, cur[key]);
          }
        }
      }
    }
    var useInsertEffectCompat = import_constants2.isWeb ? import_react.useInsertionEffect || import_constants2.useIsomorphicLayoutEffect : () => {
    };
    var useSplitStyles = (...args) => {
      const res = getSplitStyles(...args);
      useInsertEffectCompat(() => {
        (0, import_insertStyleRule.insertStyleRules)(res.rulesToInsert);
      }, [res.rulesToInsert]);
      return res;
    };
    function addStyleToInsertRules(rulesToInsert, styleObject) {
      if (process.env.TAMAGUI_TARGET === "web") {
        if (!(0, import_insertStyleRule.shouldInsertStyleRules)(styleObject.identifier)) {
          return;
        }
        (0, import_insertStyleRule.updateRules)(styleObject.identifier, styleObject.rules);
        rulesToInsert.push(styleObject);
      }
    }
    function processIDRefList(idRefList) {
      return Array.isArray(idRefList) ? idRefList.join(" ") : idRefList;
    }
    var animatableDefaults = {
      opacity: 1,
      scale: 1,
      rotate: "0deg",
      rotateY: "0deg",
      rotateX: "0deg",
      x: 0,
      y: 0
    };
    var lowercaseHyphenate = (match) => `-${match.toLowerCase()}`;
    var hyphenate = (str) => str.replace(/[A-Z]/g, lowercaseHyphenate);
    var mergeTransform = (obj, key, val, backwards = false) => {
      if (typeof obj.transform === "string") {
        return;
      }
      obj.transform || (obj.transform = []);
      obj.transform[backwards ? "unshift" : "push"]({
        [mapTransformKeys[key] || key]: val
      });
    };
    var mapTransformKeys = {
      x: "translateX",
      y: "translateY"
    };
    var skipProps = {
      untilMeasured: 1,
      animation: 1,
      space: 1,
      animateOnly: 1,
      disableClassName: 1,
      debug: 1,
      componentName: 1,
      disableOptimization: 1,
      tag: 1,
      style: 1,
      // handled after loop so pseudos set usedKeys and override it if necessary
      group: 1
    };
    if (process.env.NODE_ENV === "test") {
      skipProps["data-test-renders"] = 1;
    }
    if (process.env.TAMAGUI_TARGET === "native") {
      Object.assign(skipProps, {
        whiteSpace: 1,
        wordWrap: 1,
        textOverflow: 1,
        textDecorationDistance: 1,
        cursor: 1,
        contain: 1,
        boxSizing: 1,
        boxShadow: 1,
        outlineStyle: 1,
        outlineOffset: 1,
        outlineWidth: 1,
        outlineColor: 1
      });
    } else {
      Object.assign(skipProps, {
        elevationAndroid: 1,
        allowFontScaling: true,
        adjustsFontSizeToFit: true
      });
    }
    var accessibilityRoleToWebRole = {
      adjustable: "slider",
      header: "heading",
      image: "img",
      link: "link",
      none: "presentation",
      summary: "region"
    };
    function passDownProp(viewProps, key, val, shouldMergeObject = false) {
      if (shouldMergeObject) {
        const next = {
          ...viewProps[key],
          ...val
        };
        delete viewProps[key];
        viewProps[key] = next;
      } else {
        viewProps[key] = val;
      }
    }
  }
});

// ../web/dist/cjs/helpers/mergeProps.js
var require_mergeProps = __commonJS({
  "../web/dist/cjs/helpers/mergeProps.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var mergeProps_exports = {};
    __export2(mergeProps_exports, {
      mergeProps: () => mergeProps
    });
    module2.exports = __toCommonJS2(mergeProps_exports);
    var import_pseudoDescriptors = require_pseudoDescriptors();
    var mergeProps = (a, b, inverseShorthands) => {
      const out = {};
      for (const key in a) {
        mergeProp(out, a, b, key, inverseShorthands);
      }
      if (b) {
        for (const key in b) {
          mergeProp(out, b, void 0, key, inverseShorthands);
        }
      }
      return out;
    };
    function mergeProp(out, a, b, key, inverseShorthands) {
      const shorthand = (inverseShorthands == null ? void 0 : inverseShorthands[key]) || null;
      if (b && (key in b || shorthand && shorthand in b)) {
        return;
      }
      const val = a[key];
      if (key in import_pseudoDescriptors.pseudoDescriptors) {
        out[key] = {
          ...out[key],
          ...val
        };
        return;
      }
      out[shorthand || key] = val;
    }
  }
});

// ../web/dist/cjs/helpers/proxyThemeVariables.js
var require_proxyThemeVariables = __commonJS({
  "../web/dist/cjs/helpers/proxyThemeVariables.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var proxyThemeVariables_exports = {};
    __export2(proxyThemeVariables_exports, {
      proxyThemeVariables: () => proxyThemeVariables
    });
    module2.exports = __toCommonJS2(proxyThemeVariables_exports);
    var import_createProxy = require_createProxy();
    function proxyThemeVariables(obj) {
      return (0, import_createProxy.createProxy)(obj || {}, {
        has(target, key) {
          return Reflect.has(target, removeStarting$(key));
        },
        get(target, key) {
          return Reflect.get(target, removeStarting$(key));
        }
      });
    }
    var removeStarting$ = (str) => typeof str === "string" && str[0] === "$" ? str.slice(1) : str;
  }
});

// ../web/dist/cjs/helpers/ThemeManagerContext.js
var require_ThemeManagerContext = __commonJS({
  "../web/dist/cjs/helpers/ThemeManagerContext.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var ThemeManagerContext_exports = {};
    __export2(ThemeManagerContext_exports, {
      ThemeManagerContext: () => ThemeManagerContext
    });
    module2.exports = __toCommonJS2(ThemeManagerContext_exports);
    var import_react = require("react");
    var ThemeManagerContext = (0, import_react.createContext)(null);
  }
});

// ../web/dist/cjs/helpers/ThemeManager.js
var require_ThemeManager = __commonJS({
  "../web/dist/cjs/helpers/ThemeManager.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var ThemeManager_exports = {};
    __export2(ThemeManager_exports, {
      ThemeManager: () => ThemeManager,
      getHasThemeUpdatingProps: () => getHasThemeUpdatingProps,
      getNonComponentParentManager: () => getNonComponentParentManager
    });
    module2.exports = __toCommonJS2(ThemeManager_exports);
    var import_constants2 = require_cjs2();
    var import_config = require_config();
    var import_constants22 = require_constants();
    var emptyState = { name: "" };
    function getHasThemeUpdatingProps(props) {
      return props.name || props.componentName || props.inverse || props.reset;
    }
    var uid = 0;
    var ThemeManager = class {
      constructor(props = {}, parentManagerIn) {
        this.props = props;
        this.id = uid++;
        this.isComponent = false;
        this.themeListeners = /* @__PURE__ */ new Set();
        this.parentManager = null;
        this.state = emptyState;
        this.scheme = null;
        this._allKeys = null;
        if (parentManagerIn === "root") {
          this.updateStateFromProps(props, false);
          return;
        }
        if (!parentManagerIn) {
          if (process.env.NODE_ENV !== "production") {
            throw new Error(
              `No parent manager given, this is likely due to duplicated Tamagui dependencies. Check your lockfile for mis-matched versions. It could also be from an error somewhere else in your stack causing Tamagui to recieve undefined context, you can try putting some ErrorBoundary components around other areas of your app, or a Suspense boundary.`
            );
          }
          throw `\u274C 0`;
        }
        this.parentManager = parentManagerIn;
        if (this.updateStateFromProps(props, false)) {
          return;
        }
        return parentManagerIn || this;
      }
      updateStateFromProps(props = this.props || {}, shouldNotify = true) {
        this.props = props;
        if (props.forceTheme) {
          this.state.theme = props.forceTheme;
          this.state.name = props.name || "";
          return true;
        }
        const nextState = this.getStateIfChanged(props);
        if (nextState) {
          this.updateState(nextState, shouldNotify);
          return nextState;
        }
      }
      updateState(nextState, shouldNotify = true) {
        this.state = nextState;
        const names = this.state.name.split("_");
        const lastName = names[names.length - 1][0];
        this.isComponent = lastName[0] === lastName[0].toUpperCase();
        this._allKeys = null;
        this.scheme = names[0] === "light" ? "light" : names[0] === "dark" ? "dark" : null;
        if (process.env.NODE_ENV === "development") {
          this["_numChangeEventsSent"] ?? (this["_numChangeEventsSent"] = 0);
          this["_numChangeEventsSent"]++;
        }
        if (shouldNotify) {
          queueMicrotask(() => {
            this.notify();
          });
        }
      }
      getStateIfChanged(props = this.props, state = this.state, parentManager = this.parentManager) {
        const _ = this.getState(props, parentManager);
        if (state && state !== emptyState && !_) {
          return parentManager == null ? void 0 : parentManager.state;
        }
        if (this.getStateShouldChange(_, state)) {
          return _;
        }
      }
      getStateShouldChange(nextState, state = this.state) {
        if (!(nextState == null ? void 0 : nextState.theme) || nextState.theme === (state == null ? void 0 : state.theme)) {
          return false;
        }
        return true;
      }
      getState(props = this.props, parentManager = this.parentManager) {
        const next = getState(props, parentManager) || (process.env.TAMAGUI_TARGET === "native" ? (parentManager == null ? void 0 : parentManager.state) || null : null);
        return next;
      }
      get allKeys() {
        var _a;
        this._allKeys || (this._allKeys = /* @__PURE__ */ new Set([
          ...((_a = this.parentManager) == null ? void 0 : _a.allKeys) || [],
          ...Object.keys(this.state.theme || {})
        ]));
        return this._allKeys;
      }
      notify(forced = false) {
        this.themeListeners.forEach((cb) => cb(this.state.name, this, forced));
      }
      onChangeTheme(cb, debugId) {
        if (process.env.NODE_ENV === "development" && debugId) {
          this._listeningIds ?? (this._listeningIds = /* @__PURE__ */ new Set());
          this._listeningIds.add(debugId);
        }
        this.themeListeners.add(cb);
        return () => {
          this.themeListeners.delete(cb);
        };
      }
    };
    function getNextThemeClassName(name) {
      const next = `t_sub_theme ${import_constants22.THEME_CLASSNAME_PREFIX}${name}`;
      return next.replace("light_", "").replace("dark_", "");
    }
    function getState(props, parentManager) {
      var _a, _b, _c, _d, _e, _f;
      const validManagerAndAllComponentThemes = getNonComponentParentManager(parentManager);
      parentManager = validManagerAndAllComponentThemes[0];
      const allComponentThemes = validManagerAndAllComponentThemes[1];
      const themes = (0, import_config.getThemes)();
      const isDirectParentAComponentTheme = allComponentThemes.length > 0;
      if (props.name && props.reset) {
        throw new Error("Cannot reset + set new name");
      }
      if (!props.name && !props.inverse && !props.reset && !props.componentName) {
        return null;
      }
      if (props.reset && !isDirectParentAComponentTheme && !(parentManager == null ? void 0 : parentManager.parentManager)) {
        if (process.env.NODE_ENV === "development") {
          console.warn("Cannot reset no grandparent exists");
        }
        return null;
      }
      let result = null;
      const nextName = props.reset ? isDirectParentAComponentTheme ? ((_a = parentManager == null ? void 0 : parentManager.state) == null ? void 0 : _a.name) || "" : ((_c = (_b = parentManager == null ? void 0 : parentManager.parentManager) == null ? void 0 : _b.state) == null ? void 0 : _c.name) || "" : props.name || "";
      const { componentName } = props;
      const parentName = props.reset ? isDirectParentAComponentTheme ? (
        // here because parentManager already skipped componentTheme so we have to only go up once
        ((_d = parentManager == null ? void 0 : parentManager.parentManager) == null ? void 0 : _d.state.name) || ""
      ) : ((_f = (_e = parentManager == null ? void 0 : parentManager.parentManager) == null ? void 0 : _e.parentManager) == null ? void 0 : _f.state.name) || "" : isDirectParentAComponentTheme ? allComponentThemes[0] || "" : (parentManager == null ? void 0 : parentManager.state.name) || "";
      if (props.reset && isDirectParentAComponentTheme) {
        allComponentThemes.shift();
      }
      const base = parentName.split(import_constants22.THEME_NAME_SEPARATOR);
      const lastSegment = base[base.length - 1];
      const isParentComponentTheme = parentName && lastSegment[0].toUpperCase() === lastSegment[0];
      if (isParentComponentTheme) {
        base.pop();
      }
      const parentBaseTheme = isParentComponentTheme ? base.slice(0, base.length).join(import_constants22.THEME_NAME_SEPARATOR) : parentName;
      const max = base.length;
      const min = componentName && !nextName ? max : 0;
      if (process.env.NODE_ENV === "development" && typeof props.debug === "string") {
        console.groupCollapsed("ThemeManager.getState()");
        console.log({
          props,
          parentName,
          parentBaseTheme,
          base,
          min,
          max,
          isParentComponentTheme
        });
      }
      for (let i = max; i >= min; i--) {
        let prefix = base.slice(0, i).join(import_constants22.THEME_NAME_SEPARATOR);
        if (props.inverse) {
          prefix = inverseThemeName(prefix);
        }
        let potentials = [];
        if (prefix && prefix !== parentBaseTheme) {
          potentials.push(prefix);
        }
        if (nextName) {
          potentials.unshift(prefix ? `${prefix}_${nextName}` : nextName);
        }
        if (i === 1) {
          const lastSegment2 = potentials.findIndex((x) => !x.includes("_"));
          if (lastSegment2 > 0) {
            potentials.splice(lastSegment2, 0, nextName);
          }
        }
        if (componentName) {
          let componentPotentials = [];
          if (nextName) {
            const beforeSeparator = prefix.slice(0, prefix.indexOf(import_constants22.THEME_NAME_SEPARATOR));
            componentPotentials.push(`${beforeSeparator}_${nextName}_${componentName}`);
          }
          componentPotentials.push(`${prefix}_${componentName}`);
          if (nextName) {
            const prefixLessOne = base.slice(0, i - 1).join(import_constants22.THEME_NAME_SEPARATOR);
            if (prefixLessOne) {
              const lessSpecific = `${prefixLessOne}_${nextName}_${componentName}`;
              componentPotentials.unshift(lessSpecific);
            }
            const moreSpecific = `${prefix}_${nextName}_${componentName}`;
            componentPotentials.unshift(moreSpecific);
          }
          potentials = [...componentPotentials, ...potentials, ...allComponentThemes];
        }
        const found = potentials.find((t) => t in themes);
        if (process.env.NODE_ENV === "development" && typeof props.debug === "string") {
          console.log(" - ", { found, potentials, parentManager });
        }
        if (found) {
          result = {
            name: found,
            theme: themes[found],
            className: import_constants2.isWeb ? getNextThemeClassName(found) : "",
            parentName,
            componentName,
            inverse: props.inverse
          };
          break;
        }
      }
      if (process.env.NODE_ENV === "development" && typeof props.debug === "string" && typeof window !== "undefined") {
        console.warn("ThemeManager.getState():", {
          result
        });
        console.trace();
        console.groupEnd();
      }
      return result;
    }
    var inverseThemeName = (themeName) => {
      return themeName.startsWith("light") ? themeName.replace(/^light/, "dark") : themeName.replace(/^dark/, "light");
    };
    function getNonComponentParentManager(themeManager) {
      var _a;
      let res = themeManager;
      let componentThemeNames = [];
      while (res) {
        if (res == null ? void 0 : res.isComponent) {
          componentThemeNames.push((_a = res == null ? void 0 : res.state) == null ? void 0 : _a.name);
          res = res.parentManager;
        } else {
          break;
        }
      }
      return [res || null, componentThemeNames];
    }
  }
});

// ../web/dist/cjs/hooks/getThemeUnwrapped.js
var require_getThemeUnwrapped = __commonJS({
  "../web/dist/cjs/hooks/getThemeUnwrapped.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var getThemeUnwrapped_exports = {};
    __export2(getThemeUnwrapped_exports, {
      GetThemeUnwrapped: () => GetThemeUnwrapped,
      getThemeUnwrapped: () => getThemeUnwrapped
    });
    module2.exports = __toCommonJS2(getThemeUnwrapped_exports);
    var getThemeUnwrapped = (theme) => {
      return (theme == null ? void 0 : theme[GetThemeUnwrapped]) || theme;
    };
    var GetThemeUnwrapped = Symbol();
  }
});

// ../web/dist/cjs/hooks/useTheme.js
var require_useTheme = __commonJS({
  "../web/dist/cjs/hooks/useTheme.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var useTheme_exports = {};
    __export2(useTheme_exports, {
      activeThemeManagers: () => activeThemeManagers,
      getThemeProxied: () => getThemeProxied,
      useChangeThemeEffect: () => useChangeThemeEffect,
      useTheme: () => useTheme,
      useThemeWithState: () => useThemeWithState
    });
    module2.exports = __toCommonJS2(useTheme_exports);
    var import_constants2 = require_cjs2();
    var import_react = require("react");
    var import_config = require_config();
    var import_createVariable = require_createVariable();
    var import_createProxy = require_createProxy();
    var import_ThemeManager = require_ThemeManager();
    var import_ThemeManagerContext = require_ThemeManagerContext();
    var import_getThemeUnwrapped = require_getThemeUnwrapped();
    var emptyProps = { name: null };
    var cached;
    function getDefaultThemeProxied() {
      if (cached)
        return cached;
      const config = (0, import_config.getConfig)();
      const defaultTheme = config.themes.light ?? config.themes[Object.keys(config.themes)[0]];
      cached = getThemeProxied(defaultTheme);
      return cached;
    }
    var useTheme = (props = emptyProps) => {
      const [_, theme] = useThemeWithState(props);
      const res = theme || getDefaultThemeProxied();
      return res;
    };
    var useThemeWithState = (props) => {
      const keys = (0, import_react.useRef)([]);
      const changedThemeState = useChangeThemeEffect(
        props,
        false,
        keys.current,
        !import_constants2.isServer ? () => {
          var _a, _b;
          const next = ((_a = props.shouldUpdate) == null ? void 0 : _a.call(props)) ?? (keys.current.length > 0 ? true : void 0);
          if (process.env.NODE_ENV === "development" && props.debug && props.debug !== "profile") {
            console.log(`  \u{1F3A8} useTheme() shouldUpdate?`, next, {
              shouldUpdateProp: (_b = props.shouldUpdate) == null ? void 0 : _b.call(props),
              keys: [...keys.current]
            });
          }
          return next;
        } : void 0
      );
      const { themeManager, state } = changedThemeState;
      const { theme, name, className } = state;
      if (!theme) {
        if (process.env.NODE_ENV === "development") {
          throw new Error(
            `No theme found given props ${JSON.stringify(
              props
            )}. Themes given to tamagui are: ${Object.keys((0, import_config.getConfig)().themes)}`
          );
        }
        throw `\u274C 1`;
      }
      const themeProxied = (0, import_react.useMemo)(() => {
        return getThemeProxied(theme, themeManager, keys.current, props.debug);
      }, [theme, name, className, themeManager]);
      if (process.env.NODE_ENV === "development" && props.debug === "verbose") {
        console.groupCollapsed("  \u{1F539} useTheme =>", name);
        console.log("returning state", changedThemeState, "from props", props);
        console.groupEnd();
      }
      return [changedThemeState, themeProxied];
    };
    function getThemeProxied(theme, themeManager, keys, debug) {
      return (0, import_createProxy.createProxy)(theme, {
        has(_, key) {
          if (Reflect.has(theme, key)) {
            return true;
          }
          if (typeof key === "string") {
            if (key[0] === "$")
              key = key.slice(1);
            return themeManager == null ? void 0 : themeManager.allKeys.has(key);
          }
        },
        get(_, key) {
          if (key === import_getThemeUnwrapped.GetThemeUnwrapped) {
            return theme;
          }
          if (
            // dont ask me, idk why but on hermes you can see that useTheme()[undefined] passes in STRING undefined to proxy
            // if someone is crazy enough to use "undefined" as a theme key then this not working is on them
            key !== "undefined" && typeof key === "string"
          ) {
            const keyString = key[0] === "$" ? key.slice(1) : key;
            const val = theme[keyString];
            if (val && typeof val === "object") {
              return new Proxy(val, {
                // when they touch the actual value we only track it
                // if its a variable (web), its ignored!
                get(_2, subkey) {
                  if (keys) {
                    if ((subkey === "val" || subkey === "get" && !import_constants2.isWeb) && !keys.includes(keyString)) {
                      keys.push(keyString);
                      if (process.env.NODE_ENV === "development" && debug) {
                        console.log(` \u{1F3A8} useTheme() tracking new key: ${keyString}`);
                      }
                    }
                  }
                  if (subkey === "get") {
                    return () => (0, import_createVariable.getVariable)(val);
                  }
                  return Reflect.get(val, subkey);
                }
              });
            }
          }
          return Reflect.get(_, key);
        }
      });
    }
    var activeThemeManagers = /* @__PURE__ */ new Set();
    var useChangeThemeEffect = (props, root = false, keys, shouldUpdate) => {
      const {
        // @ts-expect-error internal use only
        disable
      } = props;
      const parentManager = (0, import_react.useContext)(import_ThemeManagerContext.ThemeManagerContext);
      if (disable) {
        if (!parentManager)
          throw `\u274C 2`;
        return {
          isNewTheme: false,
          state: parentManager.state,
          themeManager: parentManager
        };
      }
      const [themeState, setThemeState] = (0, import_react.useState)(createState);
      const { state, mounted, isNewTheme, themeManager } = themeState;
      const isInversingOnMount = Boolean(!themeState.mounted && props.inverse);
      function getShouldUpdateTheme(manager = themeManager, nextState, prevState = state, forceShouldChange = false) {
        const forceUpdate = shouldUpdate == null ? void 0 : shouldUpdate();
        if (!forceShouldChange && forceUpdate === false)
          return;
        const next = nextState || manager.getState(props, parentManager);
        if (forceShouldChange)
          return next;
        if (!next)
          return;
        if (forceUpdate !== true && !manager.getStateShouldChange(next, prevState)) {
          return;
        }
        return next;
      }
      if (!import_constants2.isServer) {
        (0, import_react.useLayoutEffect)(() => {
          if (props.inverse && !mounted) {
            setThemeState({ ...themeState, mounted: true });
            return;
          }
          if (isNewTheme && themeManager) {
            activeThemeManagers.add(themeManager);
          }
          if (isNewTheme || getShouldUpdateTheme(themeManager)) {
            setThemeState(createState);
          }
          const selfListenerDispose = themeManager.onChangeTheme((_a, _b, forced) => {
            if (forced) {
              setThemeState((prev) => createState(prev, true));
            }
          });
          const disposeChangeListener = parentManager == null ? void 0 : parentManager.onChangeTheme((name, manager) => {
            const force = shouldUpdate == null ? void 0 : shouldUpdate();
            const doUpdate = force ?? Boolean((keys == null ? void 0 : keys.length) || isNewTheme);
            if (process.env.NODE_ENV === "development" && props.debug) {
              console.log(` \u{1F538} onChange`, themeManager.id, {
                force,
                doUpdate,
                props,
                name,
                manager,
                keys
              });
            }
            if (doUpdate) {
              setThemeState(createState);
            }
          }, themeManager.id);
          return () => {
            selfListenerDispose();
            disposeChangeListener == null ? void 0 : disposeChangeListener();
            activeThemeManagers.delete(themeManager);
          };
        }, [
          themeManager,
          parentManager,
          isNewTheme,
          props.componentName,
          props.inverse,
          props.name,
          props.reset,
          mounted
        ]);
        if (process.env.NODE_ENV === "development" && props.debug !== "profile") {
          (0, import_react.useEffect)(() => {
            globalThis["TamaguiThemeManagers"] ?? (globalThis["TamaguiThemeManagers"] = /* @__PURE__ */ new Set());
            globalThis["TamaguiThemeManagers"].add(themeManager);
            return () => {
              globalThis["TamaguiThemeManagers"].delete(themeManager);
            };
          }, [themeManager]);
        }
      }
      if (isInversingOnMount) {
        if (!parentManager)
          throw "\u274C 3";
        return {
          isNewTheme: false,
          themeManager: parentManager,
          state: {
            ...parentManager.state,
            className: ""
          }
        };
      }
      return {
        state,
        isNewTheme,
        themeManager
      };
      function createState(prev, force = false) {
        if (prev && (shouldUpdate == null ? void 0 : shouldUpdate()) === false) {
          return prev;
        }
        let themeManager2 = parentManager;
        let state2;
        const hasThemeUpdatingProps = (0, import_ThemeManager.getHasThemeUpdatingProps)(props);
        if (hasThemeUpdatingProps) {
          const getNewThemeManager = () => {
            return new import_ThemeManager.ThemeManager(props, root ? "root" : parentManager);
          };
          if (prev == null ? void 0 : prev.themeManager) {
            themeManager2 = prev.themeManager;
            const forceChange = Boolean(keys == null ? void 0 : keys.length);
            const next = themeManager2.getState(props, parentManager);
            const nextState = getShouldUpdateTheme(
              themeManager2,
              next,
              prev.state,
              forceChange
            );
            if (nextState) {
              state2 = nextState;
              if (!prev.isNewTheme || !import_constants2.isWeb) {
                themeManager2 = getNewThemeManager();
              } else {
                themeManager2.updateState(nextState);
              }
            } else {
              if (prev.isNewTheme) {
                if (parentManager && !next) {
                  themeManager2 = parentManager;
                }
              }
            }
          } else {
            themeManager2 = getNewThemeManager();
            state2 = { ...themeManager2.state };
          }
        }
        const isNewTheme2 = Boolean(themeManager2 !== parentManager || props.inverse);
        const mounted2 = !props.inverse ? true : root || (prev == null ? void 0 : prev.mounted);
        if (!state2) {
          if (isNewTheme2) {
            state2 = themeManager2.state;
          } else {
            state2 = parentManager.state;
            themeManager2 = parentManager;
          }
        }
        if (!force && state2.name === (prev == null ? void 0 : prev.state.name)) {
          return prev;
        }
        const response = {
          state: state2,
          themeManager: themeManager2,
          isNewTheme: isNewTheme2,
          mounted: mounted2
        };
        if (process.env.NODE_ENV === "development" && props["debug"] && import_constants2.isClient) {
          console.groupCollapsed(` \u{1F537} ${themeManager2.id} useChangeThemeEffect createState`);
          const parentState = { ...parentManager == null ? void 0 : parentManager.state };
          const parentId = parentManager == null ? void 0 : parentManager.id;
          const themeManagerState = { ...themeManager2.state };
          console.log({
            props,
            parentState,
            parentId,
            themeManager: themeManager2,
            prev,
            response,
            themeManagerState
          });
          console.groupEnd();
        }
        return response;
      }
    };
  }
});

// ../use-force-update/dist/cjs/index.js
var require_cjs8 = __commonJS({
  "../use-force-update/dist/cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports2 = {};
    __export2(src_exports2, {
      isServerSide: () => isServerSide,
      useForceUpdate: () => useForceUpdate
    });
    module2.exports = __toCommonJS2(src_exports2);
    var import_react = require("react");
    var isServerSide = process.env.TAMAGUI_TARGET === "web" && typeof window === "undefined";
    var idFn = () => {
    };
    function useForceUpdate() {
      return isServerSide ? idFn : (0, import_react.useReducer)((x) => Math.random(), 0)[1];
    }
  }
});

// ../web/dist/cjs/views/ThemeDebug.js
var require_ThemeDebug = __commonJS({
  "../web/dist/cjs/views/ThemeDebug.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var ThemeDebug_exports = {};
    __export2(ThemeDebug_exports, {
      ThemeDebug: () => ThemeDebug
    });
    module2.exports = __toCommonJS2(ThemeDebug_exports);
    var import_jsx_runtime = require("react/jsx-runtime");
    var import_use_force_update = require_cjs8();
    var import_react = require("react");
    var import_react_dom = require("react-dom");
    var node;
    function ThemeDebug({
      themeState,
      themeProps,
      children
    }) {
      var _a, _b, _c, _d, _e, _f;
      if (themeProps["disable-child-theme"]) {
        return children;
      }
      if (process.env.NODE_ENV === "development") {
        const [onChangeCount, setOnChangeCount] = (0, import_react.useState)(0);
        const rerender = (0, import_use_force_update.useForceUpdate)();
        const id = (0, import_react.useId)();
        if (process.env.NODE_ENV === "development" && typeof document !== "undefined") {
          if (!node) {
            node = document.createElement("div");
            node.style.height = "200px";
            node.style.overflowY = "scroll";
            node.style.position = "fixed";
            node.style.zIndex = 1e7;
            node.style.bottom = "30px";
            node.style.left = "30px";
            node.style.right = "30px";
            node.style.display = "flex";
            node.style.border = "1px solid #888";
            node.style.flexDirection = "row";
            node.style.background = "var(--background)";
            document.body.appendChild(node);
          }
        }
        (0, import_react.useEffect)(() => {
          var _a2, _b2;
          (_b2 = (_a2 = themeState.themeManager) == null ? void 0 : _a2.parentManager) == null ? void 0 : _b2.onChangeTheme((name, manager) => {
            var _a3, _b3, _c2;
            setOnChangeCount((p) => ++p);
            console.warn(
              `theme changed for ${(_a3 = themeState.themeManager) == null ? void 0 : _a3.id} from parent ${(_c2 = (_b3 = themeState.themeManager) == null ? void 0 : _b3.parentManager) == null ? void 0 : _c2.id} to new name`,
              name
            );
          });
        }, [themeState.themeManager]);
        (0, import_react.useEffect)(() => {
          const tm = setInterval(rerender, 1e3);
          return () => clearTimeout(tm);
        }, []);
        return /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [
          (0, import_react_dom.createPortal)(
            /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
              "code",
              {
                style: {
                  whiteSpace: "pre"
                },
                children: [
                  "<Theme ",
                  id,
                  " />\xA0",
                  JSON.stringify(
                    {
                      name: themeState.state.name,
                      className: themeState.state.className,
                      inverse: themeProps.inverse,
                      forceClassName: themeProps.forceClassName,
                      parent: (_a = themeState.themeManager) == null ? void 0 : _a.state.parentName,
                      id: (_b = themeState.themeManager) == null ? void 0 : _b.id,
                      parentId: (_d = (_c = themeState.themeManager) == null ? void 0 : _c.parentManager) == null ? void 0 : _d.id,
                      isNew: themeState.isNewTheme,
                      onChangeCount,
                      listening: [...((_e = themeState.themeManager) == null ? void 0 : _e["_listeningIds"]) || []].join(
                        ","
                      ),
                      _numChangeEventsSent: (_f = themeState.themeManager) == null ? void 0 : _f["_numChangeEventsSent"]
                    },
                    null,
                    2
                  )
                ]
              }
            ),
            node
          ),
          /* @__PURE__ */ (0, import_jsx_runtime.jsx)("div", { style: { color: "red" }, children: id }),
          children
        ] });
      }
      return children;
    }
  }
});

// ../web/dist/cjs/views/Theme.js
var require_Theme = __commonJS({
  "../web/dist/cjs/views/Theme.js"(exports, module2) {
    "use strict";
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var Theme_exports = {};
    __export2(Theme_exports, {
      Theme: () => Theme,
      useThemedChildren: () => useThemedChildren,
      wrapThemeElements: () => wrapThemeElements
    });
    module2.exports = __toCommonJS2(Theme_exports);
    var import_jsx_runtime = require("react/jsx-runtime");
    var import_constants2 = require_cjs2();
    var import_react = __toESM2(require("react"));
    var import_createVariable = require_createVariable();
    var import_ThemeManagerContext = require_ThemeManagerContext();
    var import_useTheme = require_useTheme();
    var import_ThemeDebug = require_ThemeDebug();
    var Theme = (0, import_react.forwardRef)(function Theme2(props, ref) {
      if (props.disable) {
        return props.children;
      }
      const isRoot = !!props["_isRoot"];
      const disableDirectChildTheme = props["disable-child-theme"];
      const themeState = (0, import_useTheme.useChangeThemeEffect)(props, isRoot);
      const children = (0, import_react.useMemo)(() => {
        let children2 = disableDirectChildTheme ? import_react.Children.map(
          props.children,
          (child) => (0, import_react.cloneElement)(child, { ["data-disable-theme"]: true })
        ) : props.children;
        if (ref) {
          try {
            import_react.default.Children.only(children2);
            children2 = (0, import_react.cloneElement)(children2, { ref });
          } catch {
          }
        }
        if (process.env.NODE_ENV === "development") {
          if (props.debug === "visualize") {
            children2 = /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_ThemeDebug.ThemeDebug, { themeState, themeProps: props, children: children2 });
          }
        }
        return children2;
      }, [props.children, disableDirectChildTheme]);
      return useThemedChildren(themeState, children, props, isRoot);
    });
    Theme["avoidForwardRef"] = true;
    function useThemedChildren(themeState, children, props, isRoot = false) {
      const { themeManager, isNewTheme } = themeState;
      const { shallow, forceClassName } = props;
      const hasEverThemed = (0, import_react.useRef)(false);
      if (isNewTheme) {
        hasEverThemed.current = true;
      }
      const shouldRenderChildrenWithTheme = isNewTheme || props.inverse || hasEverThemed.current || forceClassName || isRoot;
      if (!shouldRenderChildrenWithTheme) {
        return children;
      }
      let next = children;
      if (shallow && themeManager) {
        next = import_react.Children.toArray(children).map((child) => {
          return (0, import_react.isValidElement)(child) ? (0, import_react.cloneElement)(
            child,
            void 0,
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Theme, { name: themeManager.state.parentName, children: child.props.children })
          ) : child;
        });
      }
      const elementsWithContext = /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_ThemeManagerContext.ThemeManagerContext.Provider, { value: themeManager, children: next });
      if (forceClassName === false) {
        return elementsWithContext;
      }
      if (import_constants2.isWeb) {
        return wrapThemeElements({
          children: elementsWithContext,
          themeState,
          forceClassName,
          isRoot
        });
      }
      return elementsWithContext;
    }
    function wrapThemeElements({
      children,
      themeState,
      forceClassName,
      isRoot
    }) {
      if (isRoot && forceClassName === false) {
        return children;
      }
      const inverse = themeState.state.inverse;
      if (!themeState.isNewTheme && !inverse && !forceClassName) {
        return /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", { className: "_dsp_contents is_Theme", children });
      }
      const themeColor = themeState.state.theme && themeState.isNewTheme ? (0, import_createVariable.variableToString)(themeState.state.theme.color) : "";
      const colorStyle = themeColor ? {
        color: themeColor
      } : void 0;
      let className = themeState.state.className || "";
      if (isRoot) {
        className = className.replace("t_sub_theme", "");
      }
      let themedChildren = /* @__PURE__ */ (0, import_jsx_runtime.jsx)("span", { className: `${className} _dsp_contents is_Theme`, style: colorStyle, children });
      if (inverse != null || forceClassName) {
        themedChildren = /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          "span",
          {
            className: `${themeState.state.name.startsWith("light") ? "t_light" : themeState.state.name.startsWith("dark") ? "t_dark" : ""} _dsp_contents ${inverse ? "is_inversed" : ""}`,
            children: themedChildren
          }
        );
      }
      return themedChildren;
    }
  }
});

// ../web/dist/cjs/helpers/themeable.js
var require_themeable = __commonJS({
  "../web/dist/cjs/helpers/themeable.js"(exports, module2) {
    "use strict";
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var themeable_exports = {};
    __export2(themeable_exports, {
      themeable: () => themeable
    });
    module2.exports = __toCommonJS2(themeable_exports);
    var import_jsx_runtime = require("react/jsx-runtime");
    var import_react = __toESM2(require("react"));
    var import_Theme = require_Theme();
    function themeable(component, staticConfig) {
      const withThemeComponent = (0, import_react.forwardRef)(function WithTheme(props, ref) {
        const { themeInverse, theme, componentName, themeReset, ...rest } = props;
        const element = import_react.default.createElement(component, {
          ...rest,
          ref,
          "data-disable-theme": true
        });
        let contents = /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          import_Theme.Theme,
          {
            componentName: componentName || (staticConfig == null ? void 0 : staticConfig.componentName),
            name: theme || null,
            "disable-child-theme": true,
            debug: props.debug,
            inverse: themeInverse,
            reset: themeReset,
            children: element
          }
        );
        return contents;
      });
      const withTheme = withThemeComponent;
      withTheme.displayName = `Themed(${(component == null ? void 0 : component.displayName) || (component == null ? void 0 : component.name) || "Anonymous"})`;
      return withTheme;
    }
  }
});

// ../web/dist/cjs/setupHooks.js
var require_setupHooks = __commonJS({
  "../web/dist/cjs/setupHooks.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var setupHooks_exports = {};
    __export2(setupHooks_exports, {
      hooks: () => hooks,
      setupHooks: () => setupHooks2
    });
    module2.exports = __toCommonJS2(setupHooks_exports);
    var hooks = {};
    function setupHooks2(next) {
      Object.assign(hooks, next);
    }
  }
});

// ../web/dist/cjs/views/Slot.js
var require_Slot = __commonJS({
  "../web/dist/cjs/views/Slot.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var Slot_exports = {};
    __export2(Slot_exports, {
      Slot: () => Slot,
      Slottable: () => Slottable
    });
    module2.exports = __toCommonJS2(Slot_exports);
    var import_jsx_runtime = require("react/jsx-runtime");
    var import_compose_refs = require_cjs5();
    var import_constants2 = require_cjs2();
    var import_helpers = require_cjs4();
    var import_react = require("react");
    var Slot = (0, import_react.forwardRef)(function Slot2(props, forwardedRef) {
      const { children, ...slotProps } = props;
      if ((0, import_react.isValidElement)(children)) {
        const mergedProps = mergeSlotProps(children, slotProps);
        return (0, import_react.cloneElement)(
          children,
          children.type["avoidForwardRef"] ? mergedProps : {
            ...mergedProps,
            ref: (0, import_compose_refs.composeRefs)(forwardedRef, children.ref)
          }
        );
      }
      return import_react.Children.count(children) > 1 ? import_react.Children.only(null) : null;
    });
    var Slottable = ({ children }) => {
      return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_jsx_runtime.Fragment, { children });
    };
    var pressMap = import_constants2.isWeb ? {
      onPress: "onClick",
      onPressOut: "onMouseUp",
      onPressIn: "onMouseDown"
    } : {};
    function mergeSlotProps(child, slotProps) {
      const childProps = child.props;
      const overrideProps = { ...childProps };
      const isHTMLChild = typeof child.type === "string";
      if (isHTMLChild) {
        for (const key in pressMap) {
          if (key in slotProps) {
            slotProps[pressMap[key]] = slotProps[key];
            delete slotProps[key];
          }
        }
      }
      for (let propName in childProps) {
        const slotPropValue = slotProps[propName];
        const childPropValue = childProps[propName];
        if (isHTMLChild && propName in pressMap) {
          propName = pressMap[propName];
          delete overrideProps[propName];
        }
        const isHandler = handleRegex.test(propName);
        if (isHandler) {
          overrideProps[propName] = (0, import_helpers.composeEventHandlers)(childPropValue, slotPropValue);
        } else if (propName === "style") {
          overrideProps[propName] = { ...slotPropValue, ...childPropValue };
        } else if (propName === "className") {
          overrideProps[propName] = [slotPropValue, childPropValue].filter(Boolean).join(" ");
        }
      }
      return { ...slotProps, ...overrideProps };
    }
    var handleRegex = /^on[A-Z]/;
  }
});

// ../web/dist/cjs/createComponent.js
var require_createComponent = __commonJS({
  "../web/dist/cjs/createComponent.js"(exports, module2) {
    "use strict";
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var createComponent_exports = {};
    __export2(createComponent_exports, {
      Spacer: () => Spacer,
      Unspaced: () => Unspaced,
      createComponent: () => createComponent,
      defaultComponentState: () => defaultComponentState,
      mouseUps: () => mouseUps,
      spacedChildren: () => spacedChildren
    });
    module2.exports = __toCommonJS2(createComponent_exports);
    var import_jsx_runtime = require("react/jsx-runtime");
    var import_compose_refs = require_cjs5();
    var import_constants2 = require_cjs2();
    var import_helpers = require_cjs4();
    var import_use_did_finish_ssr = require_cjs6();
    var import_react = __toESM2(require("react"));
    var import_config = require_config();
    var import_constants22 = require_constants();
    var import_ComponentContext = require_ComponentContext();
    var import_createVariable = require_createVariable();
    var import_createShallowSetState = require_createShallowSetState();
    var import_getSplitStyles = require_getSplitStyles();
    var import_mergeProps = require_mergeProps();
    var import_proxyThemeVariables = require_proxyThemeVariables();
    var import_themeable = require_themeable();
    var import_useMedia = require_useMedia();
    var import_useTheme = require_useTheme();
    var import_setupHooks = require_setupHooks();
    var import_Slot = require_Slot();
    var import_Theme = require_Theme();
    var import_ThemeDebug = require_ThemeDebug();
    process.env.TAMAGUI_TARGET;
    var defaultComponentState = {
      hover: false,
      press: false,
      pressIn: false,
      focus: false,
      unmounted: true
    };
    var defaultComponentStateMounted = {
      ...defaultComponentState,
      unmounted: false
    };
    var defaultComponentStateShouldEnter = {
      ...defaultComponentState,
      unmounted: "should-enter"
    };
    var tamaguiConfig;
    var AnimatedText;
    var AnimatedView;
    var initialTheme;
    var time;
    var mouseUps = /* @__PURE__ */ new Set();
    if (typeof document !== "undefined") {
      const cancelTouches = () => {
        mouseUps.forEach((x) => x());
        mouseUps.clear();
      };
      addEventListener("mouseup", cancelTouches);
      addEventListener("touchend", cancelTouches);
      addEventListener("touchcancel", cancelTouches);
    }
    var BaseText;
    var BaseView;
    var hasSetupBaseViews = false;
    function createComponent(staticConfig) {
      var _a;
      (0, import_config.onConfiguredOnce)((conf) => {
        if (!tamaguiConfig) {
          tamaguiConfig = conf;
          if (!initialTheme) {
            const next = conf.themes[Object.keys(conf.themes)[0]];
            initialTheme = (0, import_proxyThemeVariables.proxyThemeVariables)(next);
            if (process.env.NODE_ENV === "development") {
              if (!initialTheme) {
                console.log("Warning: Missing theme");
              }
            }
          }
        }
      });
      const {
        Component,
        isText,
        isZStack,
        isHOC,
        validStyles: validStyles2 = {},
        variants = {}
      } = staticConfig;
      const defaultComponentClassName = `is_${staticConfig.componentName}`;
      const defaultProps = staticConfig.defaultProps;
      if (process.env.NODE_ENV === "development" && ((_a = staticConfig.defaultProps) == null ? void 0 : _a["debug"])) {
        if (process.env.IS_STATIC !== "is_static") {
          console.log(`\u{1F41B} [${staticConfig.componentName || "Component"}]`, {
            staticConfig,
            defaultProps,
            defaultPropsKeyOrder: defaultProps ? Object.keys(defaultProps) : []
          });
        }
      }
      const component = (0, import_react.forwardRef)((propsIn, forwardedRef) => {
        var _a2, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l;
        if (process.env.TAMAGUI_TARGET === "native") {
          if (!hasSetupBaseViews) {
            hasSetupBaseViews = true;
            const baseViews = (_b = (_a2 = import_setupHooks.hooks).getBaseViews) == null ? void 0 : _b.call(_a2);
            if (baseViews) {
              BaseText = baseViews.Text;
              BaseView = baseViews.View;
            }
          }
        }
        if (process.env.NODE_ENV === "test") {
          if (propsIn["data-test-renders"]) {
            (_c = propsIn["data-test-renders"])["current"] ?? (_c["current"] = 0);
            propsIn["data-test-renders"]["current"] += 1;
          }
        }
        const componentContext = (0, import_react.useContext)(import_ComponentContext.ComponentContext);
        let styledContextProps;
        let overriddenContextProps;
        let contextValue;
        const { context } = staticConfig;
        if (context) {
          contextValue = (0, import_react.useContext)(context);
          const { inverseShorthands } = (0, import_config.getConfig)();
          for (const key in context.props) {
            const propVal = (
              // because its after default props but before props this annoying amount of checks
              propsIn[key] ?? propsIn[inverseShorthands[key]] ?? (defaultProps == null ? void 0 : defaultProps[key]) ?? (defaultProps == null ? void 0 : defaultProps[inverseShorthands[key]])
            );
            if (propVal === void 0) {
              if (contextValue) {
                const isValidValue = key in validStyles2 || key in variants;
                if (isValidValue) {
                  styledContextProps || (styledContextProps = {});
                  styledContextProps[key] = contextValue[key];
                }
              }
            } else {
              overriddenContextProps || (overriddenContextProps = {});
              overriddenContextProps[key] = propVal;
            }
          }
        }
        const curDefaultProps = styledContextProps ? { ...defaultProps, ...styledContextProps } : defaultProps;
        let props;
        if (curDefaultProps) {
          props = (0, import_mergeProps.mergeProps)(curDefaultProps, propsIn);
        } else {
          props = propsIn;
        }
        const debugProp = props["debug"];
        const componentName = props.componentName || staticConfig.componentName;
        if (false) {
          const timer = null.timer();
          time = timer.start();
        }
        if (process.env.NODE_ENV === "development" && time)
          time`start (ignore)`;
        const isHydrated = (0, import_use_did_finish_ssr.useDidFinishSSR)();
        if (process.env.NODE_ENV === "development" && time)
          time`did-finish-ssr`;
        const stateRef = (0, import_react.useRef)(
          void 0
        );
        stateRef.current || (stateRef.current = {});
        if (process.env.NODE_ENV === "development" && time)
          time`stateref`;
        const hostRef = (0, import_react.useRef)(null);
        const animationsConfig = componentContext.animationDriver;
        const useAnimations = animationsConfig == null ? void 0 : animationsConfig.useAnimations;
        const hasAnimationProp = Boolean(
          props.animation || props.style && hasAnimatedStyleValue(props.style)
        );
        const supportsCSSVars = animationsConfig == null ? void 0 : animationsConfig.supportsCSSVars;
        const willBeAnimated = (() => {
          if (import_constants2.isServer && !supportsCSSVars)
            return false;
          const curState = stateRef.current;
          const next = !!(hasAnimationProp && !isHOC && useAnimations);
          return Boolean(next || curState.hasAnimated);
        })();
        const usePresence = animationsConfig == null ? void 0 : animationsConfig.usePresence;
        const presence = willBeAnimated && (usePresence == null ? void 0 : usePresence()) || null;
        const hasEnterStyle = !!props.enterStyle;
        const needsMount = Boolean((import_constants2.isWeb ? import_constants2.isClient : true) && willBeAnimated);
        if (process.env.NODE_ENV === "development" && time)
          time`pre-use-state`;
        const initialState = willBeAnimated ? supportsCSSVars ? defaultComponentStateShouldEnter : defaultComponentState : defaultComponentStateMounted;
        const states = (0, import_react.useState)(initialState);
        const state = propsIn.forceStyle ? { ...states[0], [propsIn.forceStyle]: true } : states[0];
        const setState = states[1];
        let setStateShallow = (0, import_createShallowSetState.createShallowSetState)(setState);
        const groupName = props.group;
        const groupClassName = groupName ? `t_group_${props.group}` : "";
        if (groupName) {
          const groupContextState = componentContext.groups.state;
          const og = setStateShallow;
          setStateShallow = (state2) => {
            og(state2);
            componentContext.groups.emit(groupName, {
              pseudo: state2
            });
            const next = {
              ...groupContextState[groupName],
              ...state2
            };
            groupContextState[groupName] = next;
          };
        }
        if (process.env.NODE_ENV === "development" && time)
          time`use-state`;
        let isAnimated = willBeAnimated;
        if (willBeAnimated && !supportsCSSVars) {
          if (!presence && isHydrated) {
            if (import_constants2.isServer || state.unmounted === true) {
              isAnimated = false;
            }
          }
        }
        if (willBeAnimated && !stateRef.current.hasAnimated) {
          stateRef.current.hasAnimated = true;
        }
        const componentClassName = props.asChild ? "" : props.componentName ? `is_${props.componentName}` : defaultComponentClassName;
        const hasTextAncestor = !!(import_constants2.isWeb && isText ? componentContext.inText : false);
        const isDisabled = props.disabled ?? ((_d = props.accessibilityState) == null ? void 0 : _d.disabled);
        if (process.env.NODE_ENV === "development" && time)
          time`use-context`;
        const isTaggable = !Component || typeof Component === "string";
        const element = import_constants2.isWeb ? isTaggable ? props.tag || Component : Component : Component;
        const BaseTextComponent = BaseText || element || "span";
        const BaseViewComponent = BaseView || element || (hasTextAncestor ? "span" : "div");
        AnimatedText = animationsConfig ? animationsConfig.Text : BaseTextComponent;
        AnimatedView = animationsConfig ? animationsConfig.View : BaseViewComponent;
        let elementType = isText ? (isAnimated ? AnimatedText : null) || BaseTextComponent : (isAnimated ? AnimatedView : null) || BaseViewComponent;
        if (isAnimated && presence) {
          const presenceState = presence[2];
          if (presenceState) {
            const isEntering = state.unmounted;
            const isExiting2 = !presenceState.isPresent;
            const enterExitVariant = presenceState.enterExitVariant;
            const enterVariant = enterExitVariant ?? presenceState.enterVariant;
            const exitVariant = enterExitVariant ?? presenceState.exitVariant;
            if (isEntering && enterVariant) {
              if (process.env.NODE_ENV === "development" && debugProp === "verbose") {
                console.warn(`Animating presence ENTER "${enterVariant}"`);
              }
              props[enterVariant] = true;
            } else if (isExiting2 && exitVariant) {
              if (process.env.NODE_ENV === "development" && debugProp === "verbose") {
                console.warn(`Animating presence EXIT "${enterVariant}"`);
              }
              props[exitVariant] = enterExitVariant ? false : true;
            }
          }
        }
        const isAnimatedReactNative = isAnimated && (animationsConfig == null ? void 0 : animationsConfig.isReactNative);
        const isReactNative = Boolean(staticConfig.isReactNative || isAnimatedReactNative);
        const shouldAvoidClasses = Boolean(
          !import_constants2.isWeb || isAnimated || !staticConfig.acceptsClassName || propsIn.disableClassName
        );
        const shouldForcePseudo = !!propsIn.forceStyle;
        const noClassNames = shouldAvoidClasses || shouldForcePseudo;
        const disableThemeProp = props["data-disable-theme"];
        const disableTheme = disableThemeProp && !willBeAnimated || isHOC;
        if (process.env.NODE_ENV === "development" && time)
          time`theme-props`;
        if (props.themeShallow) {
          stateRef.current.themeShallow = true;
        }
        const themeStateProps = {
          name: props.theme,
          componentName,
          // @ts-ignore this is internal use only
          disable: disableTheme,
          shallow: stateRef.current.themeShallow,
          shouldUpdate: () => {
            return stateRef.current.isListeningToTheme;
          },
          debug: debugProp
        };
        const isExiting = Boolean(!state.unmounted && (presence == null ? void 0 : presence[0]) === false);
        if (process.env.NODE_ENV === "development") {
          const id = (0, import_react.useId)();
          if (debugProp && debugProp !== "profile") {
            const name = `${componentName || (Component == null ? void 0 : Component.displayName) || (Component == null ? void 0 : Component.name) || "[Unnamed Component]"}`;
            const type = isAnimatedReactNative ? "(animated)" : isReactNative ? "(rnw)" : "";
            const dataIs = propsIn["data-is"] || "";
            const banner = `${name}${dataIs ? ` ${dataIs}` : ""} ${type} id ${id}`;
            console.group(
              `%c ${banner} (unmounted: ${state.unmounted})${presence ? ` (presence: ${presence[0]})` : ""} ${isHydrated ? "\u{1F4A6}" : "\u{1F3DC}\uFE0F"}`,
              "background: green; color: white;"
            );
            if (!import_constants2.isServer) {
              console.groupCollapsed(
                `Info (collapsed): ${state.press || state.pressIn ? "PRESSED " : ""}${state.hover ? "HOVERED " : ""}${state.focus ? "FOCUSED" : " "}`
              );
              console.log({
                propsIn,
                props,
                state,
                staticConfig,
                elementType,
                themeStateProps,
                styledContext: { contextProps: styledContextProps, overriddenContextProps },
                presence,
                isAnimated,
                isHOC,
                hasAnimationProp,
                useAnimations,
                propsInOrder: Object.keys(propsIn),
                propsOrder: Object.keys(props)
              });
              console.groupEnd();
            }
          }
        }
        if (process.env.NODE_ENV === "development" && time)
          time`pre-theme-media`;
        const [themeState, theme] = (0, import_useTheme.useThemeWithState)(themeStateProps);
        elementType = Component || elementType;
        const isStringElement = typeof elementType === "string";
        if (process.env.NODE_ENV === "development" && time)
          time`theme`;
        const mediaState2 = (0, import_useMedia.useMedia)(
          // @ts-ignore, we just pass a stable object so we can get it later with
          // should match to the one used in `setMediaShouldUpdate` below
          stateRef
        );
        if (process.env.NODE_ENV === "development" && time)
          time`media`;
        (0, import_createVariable.setDidGetVariableValue)(false);
        const resolveVariablesAs = (
          // if HOC + mounted + has animation prop, resolve as value so it passes non-variable to child
          isAnimated && !supportsCSSVars || isHOC && state.unmounted == false && hasAnimationProp ? "value" : "auto"
        );
        const keepStyleSSR = willBeAnimated && (animationsConfig == null ? void 0 : animationsConfig.keepStyleSSR);
        const styleProps = {
          mediaState: mediaState2,
          noClassNames,
          resolveVariablesAs,
          isExiting,
          isAnimated,
          keepStyleSSR
        };
        const splitStyles = (0, import_getSplitStyles.useSplitStyles)(
          props,
          staticConfig,
          theme,
          themeState.state.name,
          state,
          styleProps,
          null,
          componentContext,
          elementType,
          debugProp
        );
        if (props.group && props.untilMeasured === "hide" && !stateRef.current.hasMeasured) {
          splitStyles.style.opacity = 0;
        }
        if (process.env.NODE_ENV === "development" && time)
          time`split-styles`;
        stateRef.current.isListeningToTheme = splitStyles.dynamicThemeAccess;
        const isMediaArray = splitStyles.hasMedia && Array.isArray(splitStyles.hasMedia);
        const shouldListenForMedia = (0, import_createVariable.didGetVariableValue)() || isMediaArray || noClassNames && splitStyles.hasMedia === true;
        const mediaListeningKeys = isMediaArray ? splitStyles.hasMedia : null;
        (0, import_useMedia.setMediaShouldUpdate)(stateRef, {
          enabled: shouldListenForMedia,
          keys: mediaListeningKeys
        });
        const isAnimatedReactNativeWeb = isAnimated && isReactNative;
        if (process.env.NODE_ENV === "development") {
          if (!process.env.TAMAGUI_TARGET) {
            console.error(
              `No process.env.TAMAGUI_TARGET set, please set it to "native" or "web".`
            );
          }
          if (debugProp && debugProp !== "profile") {
            console.groupCollapsed(">>>");
            console.log("props in", propsIn, "mapped to", props, "in order", Object.keys(props));
            console.log("splitStyles", splitStyles);
            console.log("media", { shouldListenForMedia, isMediaArray, mediaListeningKeys });
            console.log("className", Object.values(splitStyles.classNames));
            if (import_constants2.isClient) {
              console.log("ref", hostRef, "(click to view)");
            }
            console.groupEnd();
            if (debugProp === "break") {
              debugger;
            }
          }
        }
        const {
          viewProps: viewPropsIn,
          pseudos,
          style: splitStylesStyle,
          classNames,
          space
        } = splitStyles;
        const propsWithAnimation = props;
        let animationStyles;
        if (willBeAnimated && useAnimations && !isHOC) {
          const animations = useAnimations({
            props: propsWithAnimation,
            // if hydrating, send empty style
            style: splitStylesStyle,
            // style: splitStylesStyle,
            presence,
            componentState: state,
            styleProps,
            theme: themeState.state.theme,
            pseudos: pseudos || null,
            hostRef,
            staticConfig
          });
          if (isAnimated && animations) {
            animationStyles = animations.style;
          }
          if (process.env.NODE_ENV === "development" && time)
            time`animations`;
        }
        const {
          asChild,
          children,
          onPress,
          onLongPress,
          onPressIn,
          onPressOut,
          onHoverIn,
          onHoverOut,
          themeShallow,
          spaceDirection: _spaceDirection,
          disabled: disabledProp,
          onMouseUp,
          onMouseDown,
          onMouseEnter,
          onMouseLeave,
          separator,
          // ignore from here on out
          forceStyle: _forceStyle,
          // @ts-ignore  for next/link compat etc
          onClick,
          theme: _themeProp,
          // @ts-ignore
          defaultVariants,
          ...nonTamaguiProps
        } = viewPropsIn;
        if (process.env.NODE_ENV === "development" && props.untilMeasured && !props.group) {
          console.warn(
            `You set the untilMeasured prop without setting group. This doesn't work, be sure to set untilMeasured on the parent that sets group, not the children that use the $group- prop.

If you meant to do this, you can disable this warning - either change untilMeasured and group at the same time, or do group={conditional ? 'name' : undefined}`
          );
        }
        if (process.env.NODE_ENV === "development" && time)
          time`destructure`;
        const disabled = ((_e = props.accessibilityState) == null ? void 0 : _e.disabled) || // @ts-expect-error (comes from core)
        props.accessibilityDisabled;
        let viewProps = nonTamaguiProps;
        if (isHOC && _themeProp) {
          viewProps.theme = _themeProp;
        }
        if (groupName) {
          nonTamaguiProps.onLayout = (0, import_helpers.composeEventHandlers)(
            nonTamaguiProps.onLayout,
            (e) => {
              componentContext.groups.emit(groupName, {
                layout: e.nativeEvent.layout
              });
              if (!stateRef.current.hasMeasured && props.untilMeasured === "hide") {
                setState((prev) => ({ ...prev }));
              }
              stateRef.current.hasMeasured = true;
            }
          );
        }
        if (process.env.TAMAGUI_TARGET === "web" && !isReactNative && !willBeAnimated && !asChild) {
          viewProps = (_g = (_f = import_setupHooks.hooks).usePropsTransform) == null ? void 0 : _g.call(_f, elementType, nonTamaguiProps, hostRef);
        } else {
          viewProps = nonTamaguiProps;
        }
        const composedRef = (0, import_compose_refs.useComposedRefs)(hostRef, forwardedRef);
        viewProps.ref = composedRef;
        if (process.env.NODE_ENV === "development") {
          if (!isReactNative && !isText && import_constants2.isWeb && !isHOC) {
            import_react.Children.toArray(props.children).forEach((item) => {
              if (typeof item === "string" && item !== "\n") {
                console.error(
                  `Unexpected text node: ${item}. A text node cannot be a child of a <View>.`
                );
              }
            });
          }
        }
        if (process.env.NODE_ENV === "development" && time)
          time`events-hooks`;
        let unPress = () => setStateShallow({
          press: false,
          pressIn: false
        });
        if (process.env.TAMAGUI_TARGET === "web") {
          unPress = (0, import_react.useCallback)(unPress, []);
        }
        const shouldSetMounted = needsMount && state.unmounted;
        const { pseudoGroups, mediaGroups } = splitStyles;
        (0, import_react.useEffect)(() => {
          if (shouldSetMounted) {
            const unmounted = state.unmounted === true && hasEnterStyle ? "should-enter" : false;
            setStateShallow({
              unmounted
            });
            return;
          }
          let disposeGroupsListener;
          if (pseudoGroups || mediaGroups) {
            const current = {
              pseudo: {},
              media: {}
            };
            disposeGroupsListener = componentContext.groups.subscribe(
              (name, { layout, pseudo }) => {
                if (pseudo && (pseudoGroups == null ? void 0 : pseudoGroups.has(name))) {
                  Object.assign(current.pseudo, pseudo);
                  persist();
                } else if (layout && mediaGroups) {
                  const mediaState22 = getMediaState(mediaGroups, layout);
                  const next = (0, import_createShallowSetState.mergeIfNotShallowEqual)(current.media, mediaState22);
                  if (next !== current.media) {
                    Object.assign(current.media, next);
                    persist();
                  }
                }
                function persist() {
                  setStateShallow({
                    // force it to be referentially different so it always updates
                    group: {
                      ...state.group,
                      [name]: current
                    }
                  });
                }
              }
            );
          }
          return () => {
            disposeGroupsListener == null ? void 0 : disposeGroupsListener();
            mouseUps.delete(unPress);
          };
        }, [
          shouldSetMounted,
          state.unmounted,
          pseudoGroups ? Object.keys([...pseudoGroups]).join("") : 0,
          mediaGroups ? Object.keys([...mediaGroups]).join("") : 0
        ]);
        const avoidAnimationStyle = keepStyleSSR && state.unmounted === true;
        let fontFamily = isText ? splitStyles.fontFamily || ((_h = staticConfig.defaultProps) == null ? void 0 : _h.fontFamily) : null;
        if (fontFamily && fontFamily[0] === "$") {
          fontFamily = fontFamily.slice(1);
        }
        const fontFamilyClassName = fontFamily ? `font_${fontFamily}` : "";
        const style = avoidAnimationStyle ? splitStyles.style : animationStyles || splitStyles.style;
        let className;
        if (process.env.TAMAGUI_TARGET === "web") {
          const classList = [
            componentName ? componentClassName : "",
            fontFamilyClassName,
            classNames ? Object.values(classNames).join(" ") : "",
            groupClassName
          ];
          className = classList.join(" ");
          if (isAnimatedReactNativeWeb && !avoidAnimationStyle) {
            viewProps.style = style;
          } else if (isReactNative) {
            const cnStyles = { $$css: true };
            for (const name of className.split(" ")) {
              cnStyles[name] = name;
            }
            viewProps.style = [...Array.isArray(style) ? style : [style], cnStyles];
          } else {
            viewProps.className = className;
            viewProps.style = style;
          }
          if (isReactNative) {
            if (process.env.NODE_ENV === "development") {
              Object.keys(viewProps).forEach((key) => {
                if (key.startsWith("data-")) {
                  viewProps.dataSet ?? (viewProps.dataSet = {});
                  viewProps.dataSet[key.replace("data-", "")] = viewProps[key];
                  delete viewProps[key];
                }
              });
            }
          }
        } else {
          viewProps.style = style;
        }
        const runtimePressStyle = !disabled && noClassNames && (pseudos == null ? void 0 : pseudos.pressStyle);
        const attachPress = Boolean(
          groupName || runtimePressStyle || onPress || onPressOut || onPressIn || onLongPress || onClick
        );
        const runtimeHoverStyle = !disabled && noClassNames && (pseudos == null ? void 0 : pseudos.hoverStyle);
        const isHoverable = import_constants2.isWeb && !!(groupName || runtimeHoverStyle || onHoverIn || onHoverOut || onMouseEnter || onMouseLeave);
        const handlesPressEvents = !(import_constants2.isWeb || asChild);
        const shouldAttach = Boolean(
          attachPress || isHoverable || noClassNames && "pressStyle" in props || import_constants2.isWeb && noClassNames && "hoverStyle" in props
        );
        if (process.env.NODE_ENV === "development" && time)
          time`events-setup`;
        const events = shouldAttach && !isDisabled && !asChild ? {
          onPressOut: attachPress ? (e) => {
            unPress();
            onPressOut == null ? void 0 : onPressOut(e);
            onMouseUp == null ? void 0 : onMouseUp(e);
          } : void 0,
          ...(isHoverable || attachPress) && {
            onMouseEnter: (e) => {
              const next = {};
              next.hover = true;
              if (state.pressIn) {
                next.press = true;
              }
              setStateShallow(next);
              onHoverIn == null ? void 0 : onHoverIn(e);
              onMouseEnter == null ? void 0 : onMouseEnter(e);
            },
            onMouseLeave: (e) => {
              const next = {};
              mouseUps.add(unPress);
              next.hover = false;
              if (state.pressIn) {
                next.press = false;
                next.pressIn = false;
              }
              setStateShallow(next);
              onHoverOut == null ? void 0 : onHoverOut(e);
              onMouseLeave == null ? void 0 : onMouseLeave(e);
            }
          },
          onPressIn: attachPress ? (e) => {
            setStateShallow({
              press: true,
              pressIn: true
            });
            onPressIn == null ? void 0 : onPressIn(e);
            onMouseDown == null ? void 0 : onMouseDown(e);
            if (import_constants2.isWeb) {
              mouseUps.add(unPress);
            }
          } : void 0,
          onPress: attachPress ? (e) => {
            unPress();
            import_constants2.isWeb && (onClick == null ? void 0 : onClick(e));
            onPress == null ? void 0 : onPress(e);
            if (process.env.TAMAGUI_TARGET === "web") {
              onLongPress == null ? void 0 : onLongPress(e);
            }
          } : void 0,
          ...process.env.TAMAGUI_TARGET === "native" && {
            onLongPress: attachPress && onLongPress ? (e) => {
              unPress();
              onLongPress == null ? void 0 : onLongPress(e);
            } : void 0
          }
        } : null;
        if (process.env.TAMAGUI_TARGET === "native" && events) {
          Object.assign(events, {
            cancelable: !viewProps.rejectResponderTermination,
            disabled: isDisabled,
            hitSlop: viewProps.hitSlop,
            delayLongPress: viewProps.delayLongPress,
            delayPressIn: viewProps.delayPressIn,
            delayPressOut: viewProps.delayPressOut,
            focusable: viewProps.focusable ?? true,
            minPressDuration: 0
          });
        }
        if (process.env.NODE_ENV === "development" && time)
          time`events`;
        if (process.env.NODE_ENV === "development" && debugProp === "verbose") {
          console.log(`events`, { events, isHoverable, attachPress });
        }
        (_j = (_i = import_setupHooks.hooks).useEvents) == null ? void 0 : _j.call(_i, viewProps, events, splitStyles, setStateShallow);
        const direction = props.spaceDirection || "both";
        if (process.env.NODE_ENV === "development" && time)
          time`hooks`;
        let content = !children || asChild ? children : spacedChildren({
          separator,
          children,
          space,
          direction,
          isZStack,
          debug: debugProp
        });
        if (asChild) {
          elementType = import_Slot.Slot;
          Object.assign(viewProps, {
            onPress,
            onLongPress,
            onPressIn,
            onPressOut
          });
        }
        if (process.env.NODE_ENV === "development" && time)
          time`spaced-as-child`;
        if (process.env.TAMAGUI_TARGET === "native" && (elementType === BaseText || elementType === BaseView)) {
          viewProps.children = content;
          content = elementType.render(viewProps, viewProps.ref);
        } else {
          content = (0, import_react.createElement)(elementType, viewProps, content);
        }
        if (process.env.NODE_ENV === "development" && time)
          time`create-element`;
        const subGroupContext = (0, import_react.useMemo)(() => {
          if (!groupName)
            return;
          return {
            ...componentContext.groups,
            // change reference so as we mutate it doesn't affect siblings etc
            state: {
              ...componentContext.groups.state,
              [groupName]: {
                pseudo: initialState,
                // capture just initial width and height if they exist
                // will have top, left, width, height (not x, y)
                layout: {
                  width: fromPx(splitStyles.style.width),
                  height: fromPx(splitStyles.style.height)
                }
              }
            }
          };
        }, [groupName]);
        if (groupName && subGroupContext) {
          content = /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_ComponentContext.ComponentContext.Provider, { groups: subGroupContext, children: content });
        }
        if (process.env.NODE_ENV === "development" && time)
          time`group-context`;
        content = disableThemeProp ? content : (0, import_Theme.useThemedChildren)(themeState, content, themeStateProps);
        if (process.env.NODE_ENV === "development" && time)
          time`themed-children`;
        if (process.env.NODE_ENV === "development" && props["debug"] === "visualize") {
          content = /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_ThemeDebug.ThemeDebug, { themeState, themeProps: props, children: content });
        }
        if (process.env.TAMAGUI_TARGET === "web") {
          if (events || isAnimatedReactNativeWeb) {
            content = /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
              "span",
              {
                className: `${isAnimatedReactNativeWeb ? className : ""} _dsp_contents`,
                ...events && {
                  onMouseEnter: events.onMouseEnter,
                  onMouseLeave: events.onMouseLeave,
                  onClick: events.onPress,
                  onMouseDown: events.onPressIn,
                  onMouseUp: events.onPressOut,
                  onTouchStart: events.onPressIn,
                  onTouchEnd: events.onPressOut
                },
                children: content
              }
            );
          }
        }
        if (overriddenContextProps) {
          const Provider = staticConfig.context.Provider;
          content = /* @__PURE__ */ (0, import_jsx_runtime.jsx)(Provider, { ...contextValue, ...overriddenContextProps, children: content });
        }
        if (process.env.NODE_ENV === "development") {
          if (debugProp && debugProp !== "profile") {
            const element2 = typeof elementType === "string" ? elementType : "Component";
            console.groupCollapsed(`render <${element2} /> with props`);
            try {
              console.log("viewProps", viewProps);
              console.log("viewPropsOrder", Object.keys(viewProps));
              for (const key in viewProps) {
                console.log(" - ", key, viewProps[key]);
              }
              console.log("children", content);
              if (typeof window !== "undefined") {
                console.log({
                  viewProps,
                  state,
                  styleProps,
                  themeState,
                  isAnimated,
                  isAnimatedReactNativeWeb,
                  defaultProps,
                  splitStyles,
                  animationStyles,
                  handlesPressEvents,
                  willBeAnimated,
                  isStringElement,
                  classNamesIn: (_k = props.className) == null ? void 0 : _k.split(" "),
                  classNamesOut: (_l = viewProps.className) == null ? void 0 : _l.split(" "),
                  events,
                  shouldAttach,
                  pseudos,
                  content,
                  shouldAvoidClasses,
                  animation: props.animation,
                  splitStylesStyle,
                  staticConfig,
                  tamaguiConfig,
                  shouldForcePseudo,
                  elementType,
                  initialState,
                  classNames
                });
              }
            } catch {
            }
            console.groupEnd();
            console.groupEnd();
          }
        }
        if (process.env.NODE_ENV === "development" && time) {
          time`rest`;
          if (!globalThis["willPrint"]) {
            globalThis["willPrint"] = true;
            setTimeout(() => {
              delete globalThis["willPrint"];
              time.print();
              time = null;
            }, 50);
          }
        }
        return content;
      });
      if (staticConfig.componentName) {
        component.displayName = staticConfig.componentName;
      }
      let res = component;
      if (process.env.TAMAGUI_MEMO_ALL || staticConfig.memo) {
        res = (0, import_react.memo)(res);
      }
      res.staticConfig = staticConfig;
      function extendStyledConfig(extended) {
        return {
          ...staticConfig,
          ...extended,
          neverFlatten: true,
          isHOC: true
        };
      }
      function extractable(Component2, extended) {
        Component2.staticConfig = extendStyledConfig(extended);
        Component2.styleable = styleable;
        return Component2;
      }
      function styleable(Component2, extended) {
        var _a2;
        const isForwardedRefAlready = ((_a2 = Component2.render) == null ? void 0 : _a2.length) === 2;
        const ComponentForwardedRef = isForwardedRefAlready ? Component2 : (
          // memo because theme changes otherwise would always re-render
          (0, import_react.memo)((0, import_react.forwardRef)(Component2))
        );
        const extendedConfig = extendStyledConfig(extended);
        const out = (0, import_themeable.themeable)(ComponentForwardedRef, extendedConfig);
        out.staticConfig = extendedConfig;
        out.styleable = styleable;
        return out;
      }
      res.extractable = extractable;
      res.styleable = styleable;
      return res;
    }
    function Unspaced(props) {
      return props.children;
    }
    Unspaced["isUnspaced"] = true;
    var Spacer = createComponent({
      acceptsClassName: true,
      memo: true,
      componentName: "Spacer",
      validStyles: import_helpers.validStyles,
      defaultProps: {
        ...import_constants22.stackDefaultStyles,
        // avoid nesting issues
        tag: "span",
        size: true,
        pointerEvents: "none"
      },
      variants: {
        size: {
          "...size": (size, { tokens }) => {
            size = size === true ? "$true" : size;
            const sizePx = tokens.space[size] ?? size;
            return {
              width: sizePx,
              height: sizePx,
              minWidth: sizePx,
              minHeight: sizePx
            };
          }
        },
        flex: {
          true: {
            flexGrow: 1
          }
        },
        direction: {
          horizontal: {
            height: 0,
            minHeight: 0
          },
          vertical: {
            width: 0,
            minWidth: 0
          },
          both: {}
        }
      }
    });
    function spacedChildren(props) {
      var _a, _b, _c;
      const { isZStack, children, space, direction, spaceFlex, separator } = props;
      const hasSpace = !!(space || spaceFlex);
      const hasSeparator = !(separator === void 0 || separator === null);
      if (!(hasSpace || hasSeparator || isZStack)) {
        return children;
      }
      const childrenList = import_react.Children.toArray(children);
      const len = childrenList.length;
      if (len <= 1 && !isZStack && !((_b = (_a = childrenList[0]) == null ? void 0 : _a["type"]) == null ? void 0 : _b["shouldForwardSpace"])) {
        return childrenList;
      }
      const final = [];
      for (let [index, child] of childrenList.entries()) {
        const isEmpty = child === null || child === void 0 || Array.isArray(child) && child.length === 0;
        if (!isEmpty && import_react.default.isValidElement(child) && ((_c = child.type) == null ? void 0 : _c["shouldForwardSpace"])) {
          child = import_react.default.cloneElement(child, {
            space,
            spaceFlex,
            separator,
            key: child.key
          });
        }
        if (isEmpty || !child || child["key"] && !isZStack) {
          final.push(child);
        } else {
          final.push(
            /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_react.Fragment, { children: isZStack ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)(AbsoluteFill, { children: child }) : child }, index)
          );
        }
        if (isUnspaced(child) && index === 0)
          continue;
        if (isZStack)
          continue;
        const next = childrenList[index + 1];
        if (next && !isUnspaced(next)) {
          if (separator) {
            if (hasSpace) {
              final.push(
                createSpacer({
                  key: `_${index}_00tmgui`,
                  direction,
                  space,
                  spaceFlex
                })
              );
            }
            final.push(
              import_react.default.isValidElement(separator) ? import_react.default.cloneElement(separator, { key: `sep_${index}` }) : separator
            );
            if (hasSpace) {
              final.push(
                createSpacer({
                  key: `_${index}01tmgui`,
                  direction,
                  space,
                  spaceFlex
                })
              );
            }
          } else {
            final.push(
              createSpacer({
                key: `_${index}02tmgui`,
                direction,
                space,
                spaceFlex
              })
            );
          }
        }
      }
      if (process.env.NODE_ENV === "development") {
        if (props.debug) {
          console.log(`  Spaced children`, final, props);
        }
      }
      return final;
    }
    function createSpacer({ key, direction, space, spaceFlex }) {
      return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
        Spacer,
        {
          size: space,
          direction,
          ...typeof spaceFlex !== "undefined" && {
            flex: spaceFlex === true ? 1 : spaceFlex === false ? 0 : spaceFlex
          }
        },
        key
      );
    }
    function isUnspaced(child) {
      const t = child == null ? void 0 : child["type"];
      return (t == null ? void 0 : t["isVisuallyHidden"]) || (t == null ? void 0 : t["isUnspaced"]);
    }
    var AbsoluteFill = createComponent({
      defaultProps: {
        ...import_constants22.stackDefaultStyles,
        flexDirection: "column",
        position: "absolute",
        top: 0,
        right: 0,
        bottom: 0,
        left: 0,
        pointerEvents: "box-none"
      }
    });
    function hasAnimatedStyleValue(style) {
      return Object.keys(style).some((k) => {
        const val = style[k];
        return val && typeof val === "object" && "_animation" in val;
      });
    }
    function getMediaState(mediaGroups, layout) {
      return Object.fromEntries(
        [...mediaGroups].map((mediaKey) => {
          return [mediaKey, (0, import_useMedia.mediaKeyMatch)(mediaKey, layout)];
        })
      );
    }
    var fromPx = (val) => typeof val !== "string" ? val : +val.replace("px", "");
  }
});

// ../web/dist/cjs/createShorthands.js
var require_createShorthands = __commonJS({
  "../web/dist/cjs/createShorthands.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var createShorthands_exports = {};
    __export2(createShorthands_exports, {
      createShorthands: () => createShorthands
    });
    module2.exports = __toCommonJS2(createShorthands_exports);
    function createShorthands(shorthands) {
      return Object.freeze(shorthands);
    }
  }
});

// ../web/dist/cjs/createTheme.js
var require_createTheme = __commonJS({
  "../web/dist/cjs/createTheme.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var createTheme_exports = {};
    __export2(createTheme_exports, {
      createTheme: () => createTheme
    });
    module2.exports = __toCommonJS2(createTheme_exports);
    var createTheme = (theme) => {
      return theme;
    };
  }
});

// ../web/dist/cjs/createVariables.js
var require_createVariables = __commonJS({
  "../web/dist/cjs/createVariables.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var createVariables_exports = {};
    __export2(createVariables_exports, {
      createVariables: () => createVariables
    });
    module2.exports = __toCommonJS2(createVariables_exports);
    var import_helpers = require_cjs4();
    var import_createVariable = require_createVariable();
    var cache = /* @__PURE__ */ new WeakMap();
    var createVariables = (tokens, parentPath = "", isFont = false) => {
      if (cache.has(tokens))
        return tokens;
      const res = {};
      let i = 0;
      for (let keyIn in tokens) {
        i++;
        const val = tokens[keyIn];
        const isPrefixed = keyIn[0] === "$";
        const keyWithPrefix = isPrefixed ? keyIn : `$${keyIn}`;
        const key = isPrefixed ? keyWithPrefix.slice(1) : keyIn;
        if ((0, import_createVariable.isVariable)(val)) {
          res[key] = val;
          continue;
        }
        const niceKey = (0, import_helpers.simpleHash)(key);
        let name = isFont ? niceKey.slice(0, 2) : i;
        name = parentPath ? `${parentPath}-${name}` : niceKey;
        if (val && typeof val === "object") {
          res[key] = createVariables(
            tokens[key],
            name,
            false
            /* note: don't pass isFont down, we want to avoid it past the first level */
          );
          continue;
        }
        const finalValue = (0, import_createVariable.isVariable)(val) ? val : (0, import_createVariable.createVariable)({ val, name, key: keyWithPrefix });
        res[key] = finalValue;
      }
      cache.set(res, true);
      return res;
    };
  }
});

// ../web/dist/cjs/helpers/registerCSSVariable.js
var require_registerCSSVariable = __commonJS({
  "../web/dist/cjs/helpers/registerCSSVariable.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var registerCSSVariable_exports = {};
    __export2(registerCSSVariable_exports, {
      registerCSSVariable: () => registerCSSVariable,
      tokensValueToVariable: () => tokensValueToVariable,
      variableToCSS: () => variableToCSS
    });
    module2.exports = __toCommonJS2(registerCSSVariable_exports);
    var import_createVariable = require_createVariable();
    var registerCSSVariable = (v) => {
      tokensValueToVariable.set((0, import_createVariable.getVariableValue)(v), v);
    };
    var variableToCSS = (v, unitless = false) => {
      return `--${(0, import_createVariable.createCSSVariable)(v.name, false)}:${!unitless && typeof v.val === "number" ? `${v.val}px` : v.val}`;
    };
    var tokensValueToVariable = /* @__PURE__ */ new Map();
  }
});

// ../web/dist/cjs/helpers/getThemeCSSRules.js
var require_getThemeCSSRules = __commonJS({
  "../web/dist/cjs/helpers/getThemeCSSRules.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var getThemeCSSRules_exports = {};
    __export2(getThemeCSSRules_exports, {
      getThemeCSSRules: () => getThemeCSSRules
    });
    module2.exports = __toCommonJS2(getThemeCSSRules_exports);
    var import_helpers = require_cjs4();
    var import_constants2 = require_constants();
    var import_createVariable = require_createVariable();
    var import_registerCSSVariable = require_registerCSSVariable();
    function getThemeCSSRules(props) {
      const cssRuleSets = [];
      if (!process.env.TAMAGUI_DOES_SSR_CSS || process.env.TAMAGUI_DOES_SSR_CSS === "mutates-themes" || process.env.TAMAGUI_DOES_SSR_CSS === "false") {
        const { config, themeName, theme, names } = props;
        const hasDarkLight = "light" in config.themes || "dark" in config.themes;
        const CNP = `.${import_constants2.THEME_CLASSNAME_PREFIX}`;
        let vars = "";
        for (const themeKey in theme) {
          const variable = theme[themeKey];
          let value = null;
          if (!import_registerCSSVariable.tokensValueToVariable.has(variable.val)) {
            value = variable.val;
          } else {
            value = import_registerCSSVariable.tokensValueToVariable.get(variable.val).variable;
          }
          vars += `--${(0, import_helpers.simpleHash)(themeKey, 40)}:${value};`;
        }
        const isDarkBase = themeName === "dark";
        const isLightBase = themeName === "light";
        const baseSelectors = names.map((name) => `${CNP}${name}`);
        const selectorsSet = new Set(baseSelectors);
        if (hasDarkLight) {
          const maxDepth = config.maxDarkLightNesting ?? 3;
          for (const subName of names) {
            const isDark = isDarkBase || subName.startsWith("dark_");
            const isLight = !isDark && (isLightBase || subName.startsWith("light_"));
            if (!(isDark || isLight)) {
              selectorsSet.add(`:root:root ${CNP}${subName}`);
              continue;
            }
            const childSelector = `${CNP}${subName.replace(/^(dark|light)_/, "")}`;
            const order = isDark ? ["dark", "light"] : ["light", "dark"];
            const [stronger, weaker] = order;
            const numSelectors = Math.round(maxDepth * 1.5);
            for (let depth = 0; depth < numSelectors; depth++) {
              const isOdd = depth % 2 === 1;
              if (isOdd && depth < 3) {
                continue;
              }
              const parents = new Array(depth + 1).fill(0).map((_, psi) => {
                return `${CNP}${psi % 2 === 0 ? stronger : weaker}`;
              });
              let parentSelectors = parents.length > 1 ? parents.slice(1) : parents;
              if (isOdd) {
                const [_first, second, ...rest] = parentSelectors;
                parentSelectors = [second, ...rest, second];
              }
              const lastParentSelector = parentSelectors[parentSelectors.length - 1];
              const nextChildSelector = childSelector === lastParentSelector ? "" : childSelector;
              selectorsSet.add(`${parentSelectors.join(" ")} ${nextChildSelector}`.trim());
              selectorsSet.add(
                `${parentSelectors.join(" ")} ${nextChildSelector}.is_inversed`.trim()
              );
            }
          }
        }
        const selectors = [...selectorsSet].sort((a, b) => a.localeCompare(b));
        const selectorsString = selectors.map((x) => {
          const rootSep = isBaseTheme(x) && config.themeClassNameOnRoot ? "" : " ";
          return `:root${rootSep}${x}`;
        }).join(", ");
        const css = `${selectorsString} {${vars}}`;
        cssRuleSets.push(css);
        if (config.shouldAddPrefersColorThemes) {
          const bgString = theme.background ? `background:${(0, import_createVariable.variableToString)(theme.background)};` : "";
          const fgString = theme.color ? `color:${(0, import_createVariable.variableToString)(theme.color)}` : "";
          const bodyRules = `body{${bgString}${fgString}}`;
          const isDark = themeName.startsWith("dark");
          const baseName = isDark ? "dark" : "light";
          const lessSpecificSelectors = selectors.map((x) => {
            if (x == darkSelector || x === lightSelector)
              return `:root`;
            if (isDark && x.startsWith(lightSelector) || !isDark && x.startsWith(darkSelector)) {
              return;
            }
            return x.replace(/^\.t_(dark|light) /, "").trim();
          }).filter(Boolean).join(", ");
          const themeRules = `${lessSpecificSelectors} {${vars}}`;
          const prefersMediaSelectors = `@media(prefers-color-scheme:${baseName}){
    ${bodyRules}
    ${themeRules}
  }`;
          cssRuleSets.push(prefersMediaSelectors);
        }
        if (config.selectionStyles) {
          const selectionSelectors = baseSelectors.map((s) => `${s} ::selection`).join(", ");
          const rules = config.selectionStyles(theme);
          if (rules) {
            const styles = Object.entries(rules).flatMap(
              ([k, v]) => v ? `${k === "backgroundColor" ? "background" : k}:${(0, import_createVariable.variableToString)(v)}` : []
            ).join(";");
            const css2 = `${selectionSelectors} {${styles}}`;
            cssRuleSets.push(css2);
          }
        }
      }
      return cssRuleSets;
    }
    var darkSelector = ".t_dark";
    var lightSelector = ".t_light";
    var isBaseTheme = (x) => x === darkSelector || x === lightSelector || x.startsWith(".t_dark ") || x.startsWith(".t_light ");
  }
});

// ../web/dist/cjs/helpers/proxyThemeToParents.js
var require_proxyThemeToParents = __commonJS({
  "../web/dist/cjs/helpers/proxyThemeToParents.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var proxyThemeToParents_exports = {};
    __export2(proxyThemeToParents_exports, {
      proxyThemeToParents: () => proxyThemeToParents,
      proxyThemesToParents: () => proxyThemesToParents,
      themesRaw: () => themesRaw
    });
    module2.exports = __toCommonJS2(proxyThemeToParents_exports);
    var import_config = require_config();
    var import_getThemeUnwrapped = require_getThemeUnwrapped();
    var themesRaw = {};
    function proxyThemesToParents(dedupedThemes) {
      for (const { names, theme } of dedupedThemes) {
        for (const name of names) {
          themesRaw[name] = theme;
        }
      }
      const themes = {};
      for (const { names, theme } of dedupedThemes) {
        for (const themeName of names) {
          const proxiedTheme = proxyThemeToParents(themeName, theme);
          themes[themeName] = proxiedTheme;
        }
      }
      return themes;
    }
    function proxyThemeToParents(themeName, theme) {
      const cur = [];
      const parents = themeName.split("_").slice(0, -1).map((part) => {
        cur.push(part);
        return cur.join("_");
      });
      const numParents = parents.length;
      return new Proxy(theme, {
        get(target, key) {
          if (key === import_getThemeUnwrapped.GetThemeUnwrapped)
            return theme;
          if (key == null || // dont ask me, idk why but on hermes you can see that useTheme()[undefined] passes in STRING undefined to proxy
          // if someone is crazy enough to use "undefined" as a theme key then this not working is on them
          key == "undefined" || Reflect.has(target, key)) {
            return Reflect.get(target, key);
          }
          for (let i = numParents - 1; i >= 0; i--) {
            const parent = themesRaw[parents[i]];
            if (!parent)
              continue;
            if (Reflect.has(parent, key)) {
              return Reflect.get(parent, key);
            }
          }
          return (0, import_config.getTokenObject)(key) ?? Reflect.get(target, key);
        }
      });
    }
  }
});

// ../web/dist/cjs/helpers/themes.js
var require_themes = __commonJS({
  "../web/dist/cjs/helpers/themes.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var themes_exports = {};
    __export2(themes_exports, {
      ensureThemeVariable: () => ensureThemeVariable
    });
    module2.exports = __toCommonJS2(themes_exports);
    var import_createVariable = require_createVariable();
    function ensureThemeVariable(theme, key) {
      const val = theme[key];
      const themeKey = key;
      if (!(0, import_createVariable.isVariable)(val)) {
        theme[key] = (0, import_createVariable.createVariable)({
          key: themeKey,
          name: themeKey,
          val
        });
      } else {
        if (val.name !== themeKey) {
          theme[key] = (0, import_createVariable.createVariable)({
            key: val.name,
            name: themeKey,
            val: val.val
          });
        }
      }
    }
  }
});

// ../web/dist/cjs/createFont.js
var require_createFont = __commonJS({
  "../web/dist/cjs/createFont.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var createFont_exports = {};
    __export2(createFont_exports, {
      createFont: () => createFont
    });
    module2.exports = __toCommonJS2(createFont_exports);
    var fontWeights = [
      "100",
      "200",
      "300",
      "400",
      "500",
      "600",
      "700",
      "800",
      "900"
    ];
    var processSection = (section, keys, defaultValue) => {
      if (typeof section === "string")
        return section;
      const sectionKeys = Object.keys(section);
      let fillValue = section[sectionKeys[0]];
      return Object.fromEntries(
        [.../* @__PURE__ */ new Set([...keys, ...sectionKeys])].map((key) => {
          const value = section[key] ?? defaultValue ?? fillValue;
          fillValue = value;
          defaultValue = value;
          return [key, value];
        })
      );
    };
    var createFont = (font) => {
      const sizeKeys = Object.keys(font.size);
      const processedFont = Object.fromEntries(
        Object.entries(font).map(([key, section]) => {
          return [
            key,
            processSection(
              section,
              key === "face" ? fontWeights : sizeKeys,
              key === "face" ? { normal: font.family } : void 0
            )
          ];
        })
      );
      return Object.freeze(processedFont);
    };
  }
});

// ../web/dist/cjs/insertFont.js
var require_insertFont = __commonJS({
  "../web/dist/cjs/insertFont.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var insertFont_exports = {};
    __export2(insertFont_exports, {
      insertFont: () => insertFont,
      parseFont: () => parseFont,
      registerFontVariables: () => registerFontVariables,
      updateFont: () => updateFont
    });
    module2.exports = __toCommonJS2(insertFont_exports);
    var import_config = require_config();
    var import_createFont = require_createFont();
    var import_createVariables = require_createVariables();
    var import_registerCSSVariable = require_registerCSSVariable();
    function insertFont(name, fontIn) {
      const font = (0, import_createFont.createFont)(fontIn);
      const tokened = (0, import_createVariables.createVariables)(font, name);
      const parsed = parseFont(tokened);
      if (process.env.TAMAGUI_TARGET === "web" && typeof document !== "undefined") {
        const fontVars = registerFontVariables(parsed);
        const style = document.createElement("style");
        style.innerText = `:root .font_${name} {${fontVars.join(";")}}`;
        style.setAttribute("data-tamagui-font", name);
        document.head.appendChild(style);
      }
      (0, import_config.setConfigFont)(name, tokened, parsed);
      return parsed;
    }
    var updateFont = insertFont;
    function parseFont(definition) {
      var _a;
      const parsed = {};
      for (const attrKey in definition) {
        const attr = definition[attrKey];
        if (attrKey === "family" || attrKey === "face") {
          parsed[attrKey] = attr;
        } else {
          parsed[attrKey] = {};
          for (const key in attr) {
            let val = attr[key];
            if (((_a = val.val) == null ? void 0 : _a[0]) === "$") {
              val = val.val;
            }
            parsed[attrKey][`$${key}`] = val;
          }
        }
      }
      return parsed;
    }
    function registerFontVariables(parsedFont) {
      const response = [];
      for (const fkey in parsedFont) {
        if (fkey === "face")
          continue;
        if (fkey === "family") {
          const val = parsedFont[fkey];
          (0, import_registerCSSVariable.registerCSSVariable)(val);
          response.push((0, import_registerCSSVariable.variableToCSS)(val));
        } else {
          for (const fskey in parsedFont[fkey]) {
            const fval = parsedFont[fkey][fskey];
            if (typeof fval === "string") {
            } else {
              const val = parsedFont[fkey][fskey];
              (0, import_registerCSSVariable.registerCSSVariable)(val);
              response.push((0, import_registerCSSVariable.variableToCSS)(val));
            }
          }
        }
      }
      return response;
    }
  }
});

// ../web/dist/cjs/createTamagui.js
var require_createTamagui = __commonJS({
  "../web/dist/cjs/createTamagui.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var createTamagui_exports = {};
    __export2(createTamagui_exports, {
      createTamagui: () => createTamagui
    });
    module2.exports = __toCommonJS2(createTamagui_exports);
    var import_constants2 = require_cjs2();
    var import_config = require_config();
    var import_createVariables = require_createVariables();
    var import_getThemeCSSRules = require_getThemeCSSRules();
    var import_insertStyleRule = require_insertStyleRule();
    var import_proxyThemeToParents = require_proxyThemeToParents();
    var import_registerCSSVariable = require_registerCSSVariable();
    var import_themes = require_themes();
    var import_useMedia = require_useMedia();
    var import_insertFont = require_insertFont();
    var import_Tamagui = require_Tamagui();
    var createdConfigs = /* @__PURE__ */ new WeakMap();
    function createTamagui(configIn) {
      var _a;
      if (createdConfigs.has(configIn)) {
        return configIn;
      }
      if (process.env.NODE_ENV === "development") {
        if (!configIn.tokens) {
          throw new Error("Must define tokens");
        }
        if (!configIn.themes) {
          throw new Error("Must define themes");
        }
        if (!configIn.fonts) {
          throw new Error("Must define fonts");
        }
      }
      const tokens = (0, import_createVariables.createVariables)(configIn.tokens);
      const tokensParsed = {};
      const tokensMerged = {};
      for (const cat in tokens) {
        tokensParsed[cat] = {};
        tokensMerged[cat] = {};
        const tokenCat = tokens[cat];
        for (const key in tokenCat) {
          const val = tokenCat[key];
          const prefixedKey = `$${key}`;
          tokensParsed[cat][prefixedKey] = val;
          tokensMerged[cat][prefixedKey] = val;
          tokensMerged[cat][key] = val;
        }
      }
      (0, import_config.setTokens)(tokensMerged);
      const noThemes = Object.keys(configIn.themes).length === 0;
      const foundThemes = (0, import_insertStyleRule.scanAllSheets)(noThemes, tokensParsed);
      (0, import_insertStyleRule.listenForSheetChanges)();
      const fontTokens = Object.fromEntries(
        Object.entries(configIn.fonts).map(([k, v]) => {
          return [k, (0, import_createVariables.createVariables)(v, "f", true)];
        })
      );
      let fontSizeTokens = null;
      const fontsParsed = (() => {
        const res = {};
        for (const familyName in fontTokens) {
          const font = fontTokens[familyName];
          const fontParsed = (0, import_insertFont.parseFont)(font);
          res[`$${familyName}`] = fontParsed;
          if (!fontSizeTokens && fontParsed.size) {
            fontSizeTokens = new Set(Object.keys(fontParsed.size));
          }
        }
        return res;
      })();
      const specificTokens = {};
      const themeConfig = (() => {
        const cssRuleSets = [];
        if (process.env.TAMAGUI_DOES_SSR_CSS !== "true" && // we can leave this out if mutating, only need the js for getThemeCSSRules
        process.env.TAMAGUI_DOES_SSR_CSS !== "mutates-themes") {
          const declarations = [];
          const fontDeclarations = {};
          for (const key in tokens) {
            for (const skey in tokens[key]) {
              const variable = tokens[key][skey];
              specificTokens[`$${key}.${skey}`] = variable;
              if (process.env.NODE_ENV === "development") {
                if (typeof variable === "undefined") {
                  throw new Error(
                    `No value for tokens.${key}.${skey}:
${JSON.stringify(
                      variable,
                      null,
                      2
                    )}`
                  );
                }
              }
              if (import_constants2.isWeb) {
                (0, import_registerCSSVariable.registerCSSVariable)(variable);
                declarations.push((0, import_registerCSSVariable.variableToCSS)(variable, key === "zIndex"));
              }
            }
          }
          if (import_constants2.isWeb) {
            let declarationsToRuleSet2 = function(decs, selector = "") {
              return `:root${selector} {${sep}${[...decs].join(`;${sep}`)}${sep}}`;
            };
            var declarationsToRuleSet = declarationsToRuleSet2;
            for (const key in fontsParsed) {
              const fontParsed = fontsParsed[key];
              const [name, language] = key.includes("_") ? key.split("_") : [key];
              const fontVars = (0, import_insertFont.registerFontVariables)(fontParsed);
              fontDeclarations[key] = {
                name: name.slice(1),
                declarations: fontVars,
                language
              };
            }
            const sep = process.env.NODE_ENV === "development" ? configIn.cssStyleSeparator || " " : "";
            cssRuleSets.push(declarationsToRuleSet2(declarations));
            if (fontDeclarations) {
              for (const key in fontDeclarations) {
                const { name, declarations: declarations2, language = "default" } = fontDeclarations[key];
                const fontSelector = `.font_${name}`;
                const langSelector = `:root .t_lang-${name}-${language} ${fontSelector}`;
                const selectors = language === "default" ? ` ${fontSelector}, ${langSelector}` : langSelector;
                const specificRuleSet = declarationsToRuleSet2(declarations2, selectors);
                cssRuleSets.push(specificRuleSet);
              }
            }
          }
        }
        const themesIn = { ...configIn.themes };
        const dedupedThemes = foundThemes ?? getThemesDeduped(themesIn);
        const themes = (0, import_proxyThemeToParents.proxyThemesToParents)(dedupedThemes);
        return {
          themes,
          cssRuleSets,
          getThemeRulesSets() {
            let themeRuleSets = [];
            if (import_constants2.isWeb) {
              for (const { names, theme } of dedupedThemes) {
                const nextRules = (0, import_getThemeCSSRules.getThemeCSSRules)({
                  config: configIn,
                  themeName: names[0],
                  names,
                  theme
                });
                themeRuleSets = [...themeRuleSets, ...nextRules];
              }
            }
            return themeRuleSets;
          }
        };
      })();
      const shorthands = configIn.shorthands || {};
      let lastCSSInsertedRulesIndex = -1;
      const getCSS = ({ separator = "\n", sinceLastCall, exclude } = {}) => {
        if (sinceLastCall && lastCSSInsertedRulesIndex >= 0) {
          const rules = (0, import_insertStyleRule.getAllRules)();
          lastCSSInsertedRulesIndex = rules.length;
          return rules.slice(lastCSSInsertedRulesIndex).join(separator);
        }
        lastCSSInsertedRulesIndex = 0;
        const runtimeStyles = (0, import_insertStyleRule.getAllRules)().join(separator);
        if (exclude === "design-system") {
          return runtimeStyles;
        }
        const designSystem = `._ovs-contain {overscroll-behavior:contain;}
.is_Text .is_Text {display:inline-flex;}
._dsp_contents {display:contents;}
${themeConfig.cssRuleSets.join(separator)}`;
        return `${designSystem}
${exclude ? "" : themeConfig.getThemeRulesSets().join(separator)}
${runtimeStyles}`;
      };
      const getNewCSS = (opts) => getCSS({ ...opts, sinceLastCall: true });
      const defaultFontName = configIn.defaultFont || // uses font named "body" if present for compat
      ("body" in configIn.fonts ? "body" : 0) || // defaults to the first font to make life easier
      Object.keys(configIn.fonts)[0];
      if (process.env.NODE_ENV !== "production") {
        if ((defaultFontName == null ? void 0 : defaultFontName[0]) === "$") {
          throw new Error(`Pass defaultFont without a $ prefix (${configIn.defaultFont})`);
        }
      }
      const defaultFont = `$${defaultFontName}`;
      const config = {
        groupNames: [],
        settings: {},
        onlyAllowShorthands: false,
        fontLanguages: [],
        animations: {},
        media: {},
        ...configIn,
        tokens,
        // vite made this into a function if it wasn't set
        shorthands,
        inverseShorthands: shorthands ? Object.fromEntries(Object.entries(shorthands).map(([k, v]) => [v, k])) : {},
        themes: themeConfig.themes,
        fontsParsed,
        themeConfig,
        tokensParsed,
        parsed: true,
        getNewCSS,
        getCSS,
        defaultFont,
        fontSizeTokens: fontSizeTokens || /* @__PURE__ */ new Set(),
        specificTokens
        // const tokens = [...getToken(tokens.size[0])]
        // .spacer-sm + ._dsp_contents._dsp-sm-hidden { margin-left: -var(--${}) }
      };
      (0, import_useMedia.configureMedia)(config);
      (0, import_config.setConfig)(config);
      if (import_config.configListeners.size) {
        import_config.configListeners.forEach((cb) => cb(config));
        import_config.configListeners.clear();
      }
      createdConfigs.set(config, true);
      if (process.env.NODE_ENV === "development") {
        if ((_a = process.env.DEBUG) == null ? void 0 : _a.startsWith("tamagui")) {
          console.log("Tamagui config:", config);
        }
        if (!globalThis["Tamagui"]) {
          globalThis["Tamagui"] = import_Tamagui.Tamagui;
        }
      }
      return config;
    }
    function getThemesDeduped(themes) {
      const dedupedThemes = [];
      const existing = /* @__PURE__ */ new Map();
      for (const themeName in themes) {
        const darkOrLightSpecificPrefix = themeName.startsWith("dark") ? "dark" : themeName.startsWith("light") ? "light" : "";
        const rawTheme = themes[themeName];
        const key = darkOrLightSpecificPrefix + JSON.stringify(rawTheme);
        if (existing.has(key)) {
          const e = existing.get(key);
          e.names.push(themeName);
          continue;
        }
        const theme = { ...rawTheme };
        for (const key2 in theme) {
          (0, import_themes.ensureThemeVariable)(theme, key2);
        }
        const deduped = {
          names: [themeName],
          theme
        };
        dedupedThemes.push(deduped);
        existing.set(key, deduped);
      }
      return dedupedThemes;
    }
  }
});

// ../web/dist/cjs/createTokens.js
var require_createTokens = __commonJS({
  "../web/dist/cjs/createTokens.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var createTokens_exports = {};
    __export2(createTokens_exports, {
      createTokens: () => createTokens
    });
    module2.exports = __toCommonJS2(createTokens_exports);
    var import_createVariables = require_createVariables();
    function createTokens(tokens) {
      return (0, import_createVariables.createVariables)(tokens);
    }
  }
});

// ../web/dist/cjs/helpers/mergeVariants.js
var require_mergeVariants = __commonJS({
  "../web/dist/cjs/helpers/mergeVariants.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var mergeVariants_exports = {};
    __export2(mergeVariants_exports, {
      mergeVariants: () => mergeVariants
    });
    module2.exports = __toCommonJS2(mergeVariants_exports);
    var mergeVariants = (parentVariants, ourVariants) => {
      const variants = {};
      for (const key in ourVariants) {
        const parentVariant = parentVariants == null ? void 0 : parentVariants[key];
        const ourVariant = ourVariants[key];
        if (!parentVariant || typeof ourVariant === "function") {
          variants[key] = ourVariant;
          continue;
        }
        if (parentVariant && !ourVariant) {
          variants[key] = parentVariant[key];
          continue;
        }
        variants[key] = {};
        for (const subKey in ourVariant) {
          const val = ourVariant[subKey];
          const parentVal = parentVariant == null ? void 0 : parentVariant[subKey];
          if (typeof val === "function") {
            variants[key][subKey] = val;
          } else if (!parentVal || typeof parentVal === "function") {
            variants[key][subKey] = val;
          } else {
            variants[key][subKey] = {
              // keep order
              ...parentVal,
              ...val
            };
          }
        }
        if (parentVariant) {
          variants[key] = {
            ...parentVariant,
            ...variants[key]
          };
        }
      }
      return {
        ...parentVariants,
        ...variants
      };
    };
  }
});

// ../web/dist/cjs/setupReactNative.js
var require_setupReactNative = __commonJS({
  "../web/dist/cjs/setupReactNative.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var setupReactNative_exports = {};
    __export2(setupReactNative_exports, {
      getReactNativeConfig: () => getReactNativeConfig,
      setupReactNative: () => setupReactNative
    });
    module2.exports = __toCommonJS2(setupReactNative_exports);
    var ReactNativeStaticConfigs = /* @__PURE__ */ new WeakMap();
    function getReactNativeConfig(Component) {
      return ReactNativeStaticConfigs.get(Component);
    }
    function setupReactNative(rnExports) {
      for (const key in rnExports) {
        if (key[0].toLowerCase() === key[0])
          continue;
        const val = rnExports[key];
        if (val && typeof val === "object") {
          ReactNativeStaticConfigs.set(val, {
            isReactNative: true,
            isText: key === "Text" || key === "TextInput",
            isInput: key === "TextInput" || key === "TextArea",
            inlineProps: key === "Image" ? /* @__PURE__ */ new Set(["src", "width", "height"]) : void 0
          });
        }
      }
    }
  }
});

// ../web/dist/cjs/styled.js
var require_styled = __commonJS({
  "../web/dist/cjs/styled.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var styled_exports = {};
    __export2(styled_exports, {
      styled: () => styled
    });
    module2.exports = __toCommonJS2(styled_exports);
    var import_createComponent = require_createComponent();
    var import_mergeVariants = require_mergeVariants();
    var import_setupReactNative = require_setupReactNative();
    function styled(ComponentIn, options, staticExtractionOptions) {
      if (process.env.NODE_ENV !== "production") {
        if (!ComponentIn) {
          throw new Error(`No component given to styled()`);
        }
      }
      const parentStaticConfig = ComponentIn["staticConfig"];
      const isPlainStyledComponent = !!parentStaticConfig && !(parentStaticConfig.isReactNative || parentStaticConfig.isHOC);
      const isNonStyledHOC = (parentStaticConfig == null ? void 0 : parentStaticConfig.isHOC) && !(parentStaticConfig == null ? void 0 : parentStaticConfig.isStyledHOC);
      let Component = isNonStyledHOC || isPlainStyledComponent ? ComponentIn : (parentStaticConfig == null ? void 0 : parentStaticConfig.Component) || ComponentIn;
      const reactNativeConfig = (0, import_setupReactNative.getReactNativeConfig)(Component);
      const isReactNative = Boolean(
        reactNativeConfig || (staticExtractionOptions == null ? void 0 : staticExtractionOptions.isReactNative) || (parentStaticConfig == null ? void 0 : parentStaticConfig.isReactNative) || (0, import_setupReactNative.getReactNativeConfig)(parentStaticConfig == null ? void 0 : parentStaticConfig.Component)
      );
      const staticConfigProps = (() => {
        if (options) {
          let {
            variants,
            name,
            defaultVariants,
            acceptsClassName: acceptsClassNameProp,
            context,
            ...defaultProps
          } = options;
          if (defaultVariants) {
            defaultProps = {
              ...defaultVariants,
              ...defaultProps
            };
          }
          if (parentStaticConfig) {
            const avoid = parentStaticConfig.isHOC && !parentStaticConfig.isStyledHOC;
            if (!avoid) {
              defaultProps = {
                ...parentStaticConfig.defaultProps,
                ...defaultProps
              };
            }
            if (parentStaticConfig.variants) {
              variants = (0, import_mergeVariants.mergeVariants)(parentStaticConfig.variants, variants);
            }
          }
          if (parentStaticConfig == null ? void 0 : parentStaticConfig.isHOC) {
            if (name) {
              defaultProps.componentName = name;
            }
          }
          const isText = Boolean(
            (staticExtractionOptions == null ? void 0 : staticExtractionOptions.isText) || (parentStaticConfig == null ? void 0 : parentStaticConfig.isText)
          );
          const acceptsClassName = acceptsClassNameProp ?? (isPlainStyledComponent || isReactNative || (parentStaticConfig == null ? void 0 : parentStaticConfig.isHOC) && (parentStaticConfig == null ? void 0 : parentStaticConfig.acceptsClassName));
          const conf = {
            ...parentStaticConfig,
            ...staticExtractionOptions,
            ...!isPlainStyledComponent && {
              Component
            },
            // this type gets messed up by options?: Partial<GetProps<ParentComponent>> above
            // take away the Partial<> and it's fine
            variants,
            defaultProps,
            defaultVariants,
            componentName: name || (parentStaticConfig == null ? void 0 : parentStaticConfig.componentName),
            isReactNative,
            isText,
            acceptsClassName,
            context,
            ...reactNativeConfig,
            isStyledHOC: Boolean(parentStaticConfig == null ? void 0 : parentStaticConfig.isHOC),
            parentStaticConfig
          };
          if (defaultProps.children || !acceptsClassName || context) {
            conf.neverFlatten = true;
          }
          return conf;
        }
      })();
      const component = (0, import_createComponent.createComponent)(staticConfigProps || {});
      for (const key in ComponentIn) {
        if (key in component)
          continue;
        component[key] = ComponentIn[key];
      }
      return component;
    }
  }
});

// ../web/dist/cjs/types.js
var require_types3 = __commonJS({
  "../web/dist/cjs/types.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var types_exports = {};
    module2.exports = __toCommonJS2(types_exports);
  }
});

// ../web/dist/cjs/interfaces/GetRef.js
var require_GetRef = __commonJS({
  "../web/dist/cjs/interfaces/GetRef.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var GetRef_exports = {};
    module2.exports = __toCommonJS2(GetRef_exports);
  }
});

// ../web/dist/cjs/helpers/getAnimationDriver.js
var require_getAnimationDriver = __commonJS({
  "../web/dist/cjs/helpers/getAnimationDriver.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var getAnimationDriver_exports = {};
    __export2(getAnimationDriver_exports, {
      getAnimationDriver: () => getAnimationDriver
    });
    module2.exports = __toCommonJS2(getAnimationDriver_exports);
    var import_config = require_config();
    function getAnimationDriver() {
      return (0, import_config.getConfig)().animations;
    }
  }
});

// ../web/dist/cjs/helpers/getExpandedShorthands.js
var require_getExpandedShorthands = __commonJS({
  "../web/dist/cjs/helpers/getExpandedShorthands.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var getExpandedShorthands_exports = {};
    __export2(getExpandedShorthands_exports, {
      getExpandedShorthands: () => getExpandedShorthands
    });
    module2.exports = __toCommonJS2(getExpandedShorthands_exports);
    var import_config = require_config();
    function getExpandedShorthands(props) {
      const shorthands = (0, import_config.getConfig)().shorthands;
      if (!shorthands)
        return props;
      const res = {};
      for (const key in props) {
        res[shorthands[key] || key] = props[key];
      }
      return res;
    }
  }
});

// ../web/dist/cjs/helpers/isTamaguiComponent.js
var require_isTamaguiComponent = __commonJS({
  "../web/dist/cjs/helpers/isTamaguiComponent.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var isTamaguiComponent_exports = {};
    __export2(isTamaguiComponent_exports, {
      isTamaguiComponent: () => isTamaguiComponent
    });
    module2.exports = __toCommonJS2(isTamaguiComponent_exports);
    function isTamaguiComponent(comp, name) {
      const config = comp == null ? void 0 : comp["staticConfig"];
      return Boolean(config && (name ? name === config.componentName : true));
    }
  }
});

// ../web/dist/cjs/helpers/isTamaguiElement.js
var require_isTamaguiElement = __commonJS({
  "../web/dist/cjs/helpers/isTamaguiElement.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var isTamaguiElement_exports = {};
    __export2(isTamaguiElement_exports, {
      isTamaguiElement: () => isTamaguiElement
    });
    module2.exports = __toCommonJS2(isTamaguiElement_exports);
    var import_react = require("react");
    var import_isTamaguiComponent = require_isTamaguiComponent();
    var isTamaguiElement = (child, name) => {
      return (0, import_react.isValidElement)(child) && (0, import_isTamaguiComponent.isTamaguiComponent)(child.type, name);
    };
  }
});

// ../web/dist/cjs/helpers/withStaticProperties.js
var require_withStaticProperties = __commonJS({
  "../web/dist/cjs/helpers/withStaticProperties.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var withStaticProperties_exports = {};
    __export2(withStaticProperties_exports, {
      withStaticProperties: () => withStaticProperties
    });
    module2.exports = __toCommonJS2(withStaticProperties_exports);
    var import_react = require("react");
    var Decorated = Symbol();
    var withStaticProperties = function(component, staticProps) {
      const next = (() => {
        if (component[Decorated]) {
          const _ = (0, import_react.forwardRef)(
            (props, ref) => (0, import_react.createElement)(component, { ...props, ref })
          );
          for (const key in component) {
            const v = component[key];
            _[key] = v && typeof v === "object" ? { ...v } : v;
          }
        }
        return component;
      })();
      Object.assign(next, staticProps);
      next[Decorated] = true;
      return next;
    };
  }
});

// ../web/dist/cjs/hooks/useThemeName.js
var require_useThemeName = __commonJS({
  "../web/dist/cjs/hooks/useThemeName.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var useThemeName_exports = {};
    __export2(useThemeName_exports, {
      useThemeName: () => useThemeName
    });
    module2.exports = __toCommonJS2(useThemeName_exports);
    var import_constants2 = require_cjs2();
    var import_react = require("react");
    var import_ThemeManagerContext = require_ThemeManagerContext();
    function useThemeName(opts) {
      const manager = (0, import_react.useContext)(import_ThemeManagerContext.ThemeManagerContext);
      const [name, setName] = (0, import_react.useState)((manager == null ? void 0 : manager.state.name) || "");
      (0, import_constants2.useIsomorphicLayoutEffect)(() => {
        if (!manager)
          return;
        setName(manager.state.name);
        return manager.onChangeTheme((next, manager2) => {
          const name2 = (opts == null ? void 0 : opts.parent) ? manager2.state.parentName || next : next;
          if (!name2)
            return;
          setName(name2);
        });
      }, [manager == null ? void 0 : manager.state.name]);
      return name;
    }
  }
});

// ../web/dist/cjs/hooks/useStyle.js
var require_useStyle = __commonJS({
  "../web/dist/cjs/hooks/useStyle.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var useStyle_exports = {};
    __export2(useStyle_exports, {
      useStyle: () => useStyle
    });
    module2.exports = __toCommonJS2(useStyle_exports);
    var import_react = require("react");
    var import_ComponentContext = require_ComponentContext();
    var import_createComponent = require_createComponent();
    var import_getSplitStyles = require_getSplitStyles();
    var import_useMedia = require_useMedia();
    var import_useTheme = require_useTheme();
    function useStyle(base, style, options) {
      const isText = base.staticConfig.isText;
      const componentContext = (0, import_react.useContext)(import_ComponentContext.ComponentContext);
      const [themeState] = (0, import_useTheme.useThemeWithState)({});
      const media = (0, import_useMedia.useMedia)();
      const out = (0, import_getSplitStyles.useSplitStyles)(
        style,
        base.staticConfig,
        themeState.state.theme,
        themeState.state.name,
        import_createComponent.defaultComponentState,
        {
          ...options,
          mediaState: media,
          resolveVariablesAs: "auto"
        },
        null,
        componentContext,
        isText ? "span" : "div",
        options == null ? void 0 : options.debug
      );
      return {
        style: Object.keys(out.style).length ? out.style : null,
        classNames: out.classNames
      };
    }
  }
});

// ../web/dist/cjs/hooks/useAnimationDriver.js
var require_useAnimationDriver = __commonJS({
  "../web/dist/cjs/hooks/useAnimationDriver.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var useAnimationDriver_exports = {};
    __export2(useAnimationDriver_exports, {
      useAnimationDriver: () => useAnimationDriver
    });
    module2.exports = __toCommonJS2(useAnimationDriver_exports);
    var import_react = require("react");
    var import_ComponentContext = require_ComponentContext();
    var import_getAnimationDriver = require_getAnimationDriver();
    var useAnimationDriver = () => {
      return (0, import_react.useContext)(import_ComponentContext.ComponentContext).animationDriver ?? (0, import_getAnimationDriver.getAnimationDriver)();
    };
  }
});

// ../web/dist/cjs/hooks/useIsTouchDevice.js
var require_useIsTouchDevice = __commonJS({
  "../web/dist/cjs/hooks/useIsTouchDevice.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var useIsTouchDevice_exports = {};
    __export2(useIsTouchDevice_exports, {
      useIsTouchDevice: () => useIsTouchDevice
    });
    module2.exports = __toCommonJS2(useIsTouchDevice_exports);
    var import_constants2 = require_cjs2();
    var import_use_did_finish_ssr = require_cjs6();
    var useIsTouchDevice = () => {
      return !import_constants2.isWeb ? true : (0, import_use_did_finish_ssr.useDidFinishSSR)() ? import_constants2.isTouchable : false;
    };
  }
});

// ../web/dist/cjs/hooks/useProps.js
var require_useProps = __commonJS({
  "../web/dist/cjs/hooks/useProps.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var useProps_exports = {};
    __export2(useProps_exports, {
      useProps: () => useProps
    });
    module2.exports = __toCommonJS2(useProps_exports);
    var import_useMedia = require_useMedia();
    function useProps(props, opts) {
      return (0, import_useMedia.useMediaPropsActive)(props, {
        expandShorthands: !(opts == null ? void 0 : opts.disableExpandShorthands)
      });
    }
  }
});

// ../web/dist/cjs/views/Stack.js
var require_Stack = __commonJS({
  "../web/dist/cjs/views/Stack.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var Stack_exports = {};
    __export2(Stack_exports, {
      Stack: () => Stack2
    });
    module2.exports = __toCommonJS2(Stack_exports);
    var import_helpers = require_cjs4();
    var import_constants2 = require_constants();
    var import_createComponent = require_createComponent();
    var Stack2 = (0, import_createComponent.createComponent)({
      acceptsClassName: true,
      defaultProps: import_constants2.stackDefaultStyles,
      validStyles: import_helpers.validStyles
    });
  }
});

// ../web/dist/cjs/views/View.js
var require_View = __commonJS({
  "../web/dist/cjs/views/View.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var View_exports = {};
    __export2(View_exports, {
      View: () => View
    });
    module2.exports = __toCommonJS2(View_exports);
    var import_helpers = require_cjs4();
    var import_createComponent = require_createComponent();
    var View = (0, import_createComponent.createComponent)({
      acceptsClassName: true,
      validStyles: import_helpers.validStyles
    });
  }
});

// ../web/dist/cjs/views/Text.js
var require_Text = __commonJS({
  "../web/dist/cjs/views/Text.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var Text_exports = {};
    __export2(Text_exports, {
      Text: () => Text2
    });
    module2.exports = __toCommonJS2(Text_exports);
    var import_helpers = require_cjs4();
    var import_createComponent = require_createComponent();
    var ellipseStyle = {
      maxWidth: "100%",
      overflow: "hidden",
      textOverflow: "ellipsis",
      whiteSpace: "nowrap"
    };
    var Text2 = (0, import_createComponent.createComponent)({
      acceptsClassName: true,
      isText: true,
      defaultProps: process.env.TAMAGUI_TARGET === "web" ? {
        color: "$color",
        display: "inline",
        boxSizing: "border-box",
        wordWrap: "break-word",
        margin: 0
      } : {
        color: "$color",
        display: "flex",
        suppressHighlighting: true
      },
      inlineWhenUnflattened: /* @__PURE__ */ new Set(["fontFamily"]),
      variants: {
        ...process.env.TAMAGUI_TARGET === "web" && {
          numberOfLines: {
            1: ellipseStyle,
            ":number": (numberOfLines) => numberOfLines >= 1 ? {
              WebkitLineClamp: numberOfLines,
              WebkitBoxOrient: "vertical",
              display: "-webkit-box",
              overflow: "hidden"
            } : null
          }
        },
        // ??
        ellipsizeMode: {
          "...": () => null
        },
        ...process.env.TAMAGUI_TARGET === "web" && {
          selectable: {
            true: {
              userSelect: "text",
              cursor: "text"
            },
            false: {
              userSelect: "none",
              cursor: "default"
            }
          }
        },
        ellipse: {
          true: process.env.TAMAGUI_TARGET === "web" ? ellipseStyle : {
            numberOfLines: 1,
            lineBreakMode: "clip"
          }
        }
      },
      deoptProps: new Set(process.env.TAMAGUI_TARGET === "web" ? [] : ["ellipse"]),
      validStyles: {
        ...import_helpers.validStyles,
        ...import_helpers.stylePropsTextOnly
      }
    });
  }
});

// ../web/dist/cjs/views/ThemeProvider.js
var require_ThemeProvider = __commonJS({
  "../web/dist/cjs/views/ThemeProvider.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var ThemeProvider_exports = {};
    __export2(ThemeProvider_exports, {
      ThemeProvider: () => ThemeProvider
    });
    module2.exports = __toCommonJS2(ThemeProvider_exports);
    var import_jsx_runtime = require("react/jsx-runtime");
    var import_constants2 = require_cjs2();
    var import_react = require("react");
    var import_constants22 = require_constants();
    var import_Theme = require_Theme();
    var ThemeProvider = (props) => {
      if (import_constants2.isClient) {
        (0, import_react.useLayoutEffect)(() => {
          if (props.disableRootThemeClass)
            return;
          const cn = `${import_constants22.THEME_CLASSNAME_PREFIX}${props.defaultTheme}`;
          const target = props.themeClassNameOnRoot ? document.documentElement : document.body;
          target.classList.add(cn);
          return () => {
            target.classList.remove(cn);
          };
        }, [props.defaultTheme, props.disableRootThemeClass, props.themeClassNameOnRoot]);
      }
      return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
        import_Theme.Theme,
        {
          className: props.className,
          name: props.defaultTheme,
          forceClassName: !props.disableRootThemeClass,
          _isRoot: true,
          children: props.children
        }
      );
    };
  }
});

// ../web/dist/cjs/views/FontLanguage.js
var require_FontLanguage = __commonJS({
  "../web/dist/cjs/views/FontLanguage.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var FontLanguage_exports = {};
    __export2(FontLanguage_exports, {
      FontLanguage: () => FontLanguage
    });
    module2.exports = __toCommonJS2(FontLanguage_exports);
    var import_jsx_runtime = require("react/jsx-runtime");
    var FontLanguage = ({ children, ...props }) => {
      return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
        "div",
        {
          style: {
            display: "contents"
          },
          className: Object.entries(props).map(([name, language]) => `t_lang-${name}-${language}`).join(" "),
          children
        }
      );
    };
  }
});

// ../web/dist/cjs/views/TamaguiProvider.js
var require_TamaguiProvider = __commonJS({
  "../web/dist/cjs/views/TamaguiProvider.js"(exports, module2) {
    "use strict";
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var TamaguiProvider_exports = {};
    __export2(TamaguiProvider_exports, {
      TamaguiProvider: () => TamaguiProvider
    });
    module2.exports = __toCommonJS2(TamaguiProvider_exports);
    var import_jsx_runtime = require("react/jsx-runtime");
    var import_constants2 = require_cjs2();
    var React = __toESM2(require("react"));
    var import_ComponentContext = require_ComponentContext();
    var import_useMedia = require_useMedia();
    var import_ThemeProvider = require_ThemeProvider();
    function TamaguiProvider({
      children,
      disableInjectCSS,
      config,
      ...themePropsProvider
    }) {
      if (!(import_constants2.isWeb && import_constants2.isServer)) {
        (0, import_useMedia.useMediaListeners)(config);
      }
      if (import_constants2.isClient) {
        React.useLayoutEffect(() => {
          if (document.documentElement.classList.contains("t_unmounted")) {
            document.documentElement.classList.remove("t_unmounted");
          }
          if (disableInjectCSS)
            return;
          const style = document.createElement("style");
          style.appendChild(document.createTextNode(config.getCSS()));
          document.head.appendChild(style);
          return () => {
            document.head.removeChild(style);
          };
        }, [config, disableInjectCSS]);
      }
      return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_ComponentContext.ComponentContext.Provider, { animationDriver: config.animations, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
        import_ThemeProvider.ThemeProvider,
        {
          themeClassNameOnRoot: config.themeClassNameOnRoot,
          disableRootThemeClass: config.disableRootThemeClass,
          ...themePropsProvider,
          defaultTheme: themePropsProvider.defaultTheme ?? Object.keys(config.themes)[0],
          children
        }
      ) });
    }
  }
});

// ../web/dist/cjs/views/AnimationDriverProvider.js
var require_AnimationDriverProvider = __commonJS({
  "../web/dist/cjs/views/AnimationDriverProvider.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var AnimationDriverProvider_exports = {};
    __export2(AnimationDriverProvider_exports, {
      AnimationDriverProvider: () => AnimationDriverProvider
    });
    module2.exports = __toCommonJS2(AnimationDriverProvider_exports);
    var import_jsx_runtime = require("react/jsx-runtime");
    var import_ComponentContext = require_ComponentContext();
    var AnimationDriverProvider = (props) => {
      return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_ComponentContext.ComponentContext.Provider, { animationDriver: props.driver, children: props.children });
    };
  }
});

// ../use-event/dist/cjs/useGet.js
var require_useGet = __commonJS({
  "../use-event/dist/cjs/useGet.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var useGet_exports = {};
    __export2(useGet_exports, {
      useGet: () => useGet
    });
    module2.exports = __toCommonJS2(useGet_exports);
    var import_react = require("react");
    var isWeb = process.env.TAMAGUI_TARGET === "web";
    var isClient = typeof window !== "undefined";
    var useIsomorphicLayoutEffect3 = !isWeb || isClient ? import_react.useLayoutEffect : import_react.useEffect;
    function useGet(currentValue, initialValue, forwardToFunction) {
      const curRef = (0, import_react.useRef)(initialValue ?? currentValue);
      useIsomorphicLayoutEffect3(() => {
        curRef.current = currentValue;
      });
      return (0, import_react.useCallback)(
        forwardToFunction ? (...args) => {
          var _a;
          return (_a = curRef.current) == null ? void 0 : _a.apply(null, args);
        } : () => curRef.current,
        []
      );
    }
  }
});

// ../use-event/dist/cjs/useEvent.js
var require_useEvent = __commonJS({
  "../use-event/dist/cjs/useEvent.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var useEvent_exports = {};
    __export2(useEvent_exports, {
      useEvent: () => useEvent
    });
    module2.exports = __toCommonJS2(useEvent_exports);
    var import_useGet = require_useGet();
    function useEvent(callback) {
      return (0, import_useGet.useGet)(callback, defaultValue, true);
    }
    var defaultValue = () => {
      throw new Error("Cannot call an event handler while rendering.");
    };
  }
});

// ../use-event/dist/cjs/index.js
var require_cjs9 = __commonJS({
  "../use-event/dist/cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __reExport2 = (target, mod, secondTarget) => (__copyProps2(target, mod, "default"), secondTarget && __copyProps2(secondTarget, mod, "default"));
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports2 = {};
    module2.exports = __toCommonJS2(src_exports2);
    __reExport2(src_exports2, require_useEvent(), module2.exports);
    __reExport2(src_exports2, require_useGet(), module2.exports);
  }
});

// ../web/dist/cjs/index.js
var require_cjs10 = __commonJS({
  "../web/dist/cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __reExport2 = (target, mod, secondTarget) => (__copyProps2(target, mod, "default"), secondTarget && __copyProps2(secondTarget, mod, "default"));
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports2 = {};
    __export2(src_exports2, {
      configureMedia: () => import_useMedia.configureMedia,
      getConfig: () => import_config.getConfig,
      getMedia: () => import_useMedia.getMedia,
      getThemes: () => import_config.getThemes,
      getToken: () => import_config.getToken,
      getTokenValue: () => import_config.getTokenValue,
      getTokens: () => import_config.getTokens,
      mediaObjectToString: () => import_useMedia.mediaObjectToString,
      mediaQueryConfig: () => import_useMedia.mediaQueryConfig,
      mediaState: () => import_useMedia.mediaState,
      updateConfig: () => import_config.updateConfig,
      useMedia: () => import_useMedia.useMedia,
      useMediaPropsActive: () => import_useMedia.useMediaPropsActive
    });
    module2.exports = __toCommonJS2(src_exports2);
    __reExport2(src_exports2, require_Tamagui(), module2.exports);
    __reExport2(src_exports2, require_createComponent(), module2.exports);
    __reExport2(src_exports2, require_createShorthands(), module2.exports);
    __reExport2(src_exports2, require_createTheme(), module2.exports);
    __reExport2(src_exports2, require_createTamagui(), module2.exports);
    __reExport2(src_exports2, require_createFont(), module2.exports);
    __reExport2(src_exports2, require_createTokens(), module2.exports);
    __reExport2(src_exports2, require_createVariable(), module2.exports);
    __reExport2(src_exports2, require_createVariables(), module2.exports);
    __reExport2(src_exports2, require_insertFont(), module2.exports);
    __reExport2(src_exports2, require_styled(), module2.exports);
    __reExport2(src_exports2, require_setupReactNative(), module2.exports);
    __reExport2(src_exports2, require_types3(), module2.exports);
    __reExport2(src_exports2, require_GetRef(), module2.exports);
    var import_config = require_config();
    __reExport2(src_exports2, require_constants(), module2.exports);
    __reExport2(src_exports2, require_ComponentContext(), module2.exports);
    __reExport2(src_exports2, require_createStyledContext(), module2.exports);
    __reExport2(src_exports2, require_expandStyles(), module2.exports);
    __reExport2(src_exports2, require_propMapper(), module2.exports);
    __reExport2(src_exports2, require_getAnimationDriver(), module2.exports);
    __reExport2(src_exports2, require_getExpandedShorthands(), module2.exports);
    __reExport2(src_exports2, require_getSplitStyles(), module2.exports);
    __reExport2(src_exports2, require_getStylesAtomic(), module2.exports);
    __reExport2(src_exports2, require_getThemeCSSRules(), module2.exports);
    __reExport2(src_exports2, require_getVariantExtras(), module2.exports);
    __reExport2(src_exports2, require_isTamaguiComponent(), module2.exports);
    __reExport2(src_exports2, require_isTamaguiElement(), module2.exports);
    __reExport2(src_exports2, require_matchMedia(), module2.exports);
    __reExport2(src_exports2, require_mergeProps(), module2.exports);
    __reExport2(src_exports2, require_normalizeColor(), module2.exports);
    __reExport2(src_exports2, require_proxyThemeVariables(), module2.exports);
    __reExport2(src_exports2, require_proxyThemeToParents(), module2.exports);
    __reExport2(src_exports2, require_pseudoDescriptors(), module2.exports);
    __reExport2(src_exports2, require_themeable(), module2.exports);
    __reExport2(src_exports2, require_themes(), module2.exports);
    __reExport2(src_exports2, require_createShallowSetState(), module2.exports);
    __reExport2(src_exports2, require_withStaticProperties(), module2.exports);
    var import_useMedia = require_useMedia();
    __reExport2(src_exports2, require_useTheme(), module2.exports);
    __reExport2(src_exports2, require_useThemeName(), module2.exports);
    __reExport2(src_exports2, require_useStyle(), module2.exports);
    __reExport2(src_exports2, require_useAnimationDriver(), module2.exports);
    __reExport2(src_exports2, require_useIsTouchDevice(), module2.exports);
    __reExport2(src_exports2, require_useProps(), module2.exports);
    __reExport2(src_exports2, require_Slot(), module2.exports);
    __reExport2(src_exports2, require_Stack(), module2.exports);
    __reExport2(src_exports2, require_View(), module2.exports);
    __reExport2(src_exports2, require_Text(), module2.exports);
    __reExport2(src_exports2, require_Theme(), module2.exports);
    __reExport2(src_exports2, require_ThemeProvider(), module2.exports);
    __reExport2(src_exports2, require_FontLanguage(), module2.exports);
    __reExport2(src_exports2, require_TamaguiProvider(), module2.exports);
    __reExport2(src_exports2, require_AnimationDriverProvider(), module2.exports);
    __reExport2(src_exports2, require_cjs6(), module2.exports);
    __reExport2(src_exports2, require_cjs9(), module2.exports);
    __reExport2(src_exports2, require_cjs5(), module2.exports);
    __reExport2(src_exports2, require_cjs4(), module2.exports);
    __reExport2(src_exports2, require_cjs2(), module2.exports);
    __reExport2(src_exports2, require_setupHooks(), module2.exports);
  }
});

// ../core/src/index.ts
var src_exports = {};
__export(src_exports, {
  Stack: () => Stack,
  Text: () => Text
});
module.exports = __toCommonJS(src_exports);
var import_react_native_use_responder_events = __toESM(require_cjs());
var import_web2 = __toESM(require_cjs10());

// ../core/src/getBaseViews.ts
function getBaseViews() {
  return null;
}

// ../core/src/hooks/useElementLayout.tsx
var import_constants = __toESM(require_cjs2());

// ../core/src/helpers/getBoundingClientRect.tsx
var getBoundingClientRect = (node) => {
  var _a;
  if (!node || node.nodeType !== 1)
    return;
  return (_a = node.getBoundingClientRect) == null ? void 0 : _a.call(node);
};

// ../core/src/helpers/getRect.tsx
var getRect = (node) => {
  const rect = getBoundingClientRect(node);
  if (!rect)
    return;
  const { x, y, top, left } = rect;
  return { x, y, width: node.offsetWidth, height: node.offsetHeight, top, left };
};

// ../core/src/hooks/useElementLayout.tsx
var LayoutHandlers = /* @__PURE__ */ new WeakMap();
var resizeObserver = null;
if (typeof window !== "undefined" && "ResizeObserver" in window) {
  resizeObserver = new ResizeObserver((entries) => {
    for (const { target } of entries) {
      const onLayout = LayoutHandlers.get(target);
      if (typeof onLayout !== "function")
        return;
      measureLayout(target, null, (x, y, width, height, left, top) => {
        onLayout({
          nativeEvent: {
            layout: { x, y, width, height, left, top },
            target
          },
          timeStamp: Date.now()
        });
      });
    }
  });
}
var measureLayout = (node, relativeTo, callback) => {
  const relativeNode = relativeTo || (node == null ? void 0 : node.parentNode);
  if (relativeNode instanceof HTMLElement) {
    setTimeout(() => {
      const relativeRect = getBoundingClientRect(relativeNode);
      const { height, left, top, width } = getRect(node);
      const x = left - relativeRect.left;
      const y = top - relativeRect.top;
      callback(x, y, width, height, left, top);
    }, 0);
  }
};
function useElementLayout(ref, onLayout) {
  (0, import_constants.useIsomorphicLayoutEffect)(() => {
    if (!resizeObserver || !onLayout)
      return;
    const node = ref.current;
    if (!node)
      return;
    LayoutHandlers.set(node, onLayout);
    resizeObserver.observe(node);
    return () => {
      resizeObserver == null ? void 0 : resizeObserver.unobserve(node);
    };
  }, [ref, onLayout]);
}

// ../core/src/hooks/usePlatformMethods.ts
var import_web = __toESM(require_cjs10());
function usePlatformMethods(hostRef) {
  (0, import_web.useIsomorphicLayoutEffect)(() => {
    const node = hostRef.current;
    if (!node)
      return;
    node.measure = (callback) => measureLayout(node, null, callback);
    node.measureLayout = (relativeToNode, success) => measureLayout(node, relativeToNode, success);
    node.measureInWindow = (callback) => {
      if (!node)
        return;
      setTimeout(() => {
        const { height, left, top, width } = getRect(node);
        callback(left, top, width, height);
      }, 0);
    };
  }, [hostRef]);
}

// ../core/src/vendor/Pressability.tsx
var usePressability = {};

// ../core/src/index.ts
__reExport(src_exports, __toESM(require_cjs10()), module.exports);
var Stack = import_web2.Stack;
var Text = import_web2.Text;
(0, import_web2.setupHooks)({
  getBaseViews,
  usePropsTransform(elementType, propsIn, hostRef) {
    const {
      // event props
      onMoveShouldSetResponder,
      onMoveShouldSetResponderCapture,
      onResponderEnd,
      onResponderGrant,
      onResponderMove,
      onResponderReject,
      onResponderRelease,
      onResponderStart,
      onResponderTerminate,
      onResponderTerminationRequest,
      onScrollShouldSetResponder,
      onScrollShouldSetResponderCapture,
      onSelectionChangeShouldSetResponder,
      onSelectionChangeShouldSetResponderCapture,
      onStartShouldSetResponder,
      onStartShouldSetResponderCapture,
      // android
      collapsable,
      focusable,
      // deprecated,
      accessible,
      accessibilityDisabled,
      onLayout,
      hrefAttrs,
      ...viewProps
    } = propsIn;
    usePlatformMethods(hostRef);
    useElementLayout(hostRef, onLayout);
    (0, import_react_native_use_responder_events.useResponderEvents)(hostRef, {
      onMoveShouldSetResponder,
      onMoveShouldSetResponderCapture,
      onResponderEnd,
      onResponderGrant,
      onResponderMove,
      onResponderReject,
      onResponderRelease,
      onResponderStart,
      onResponderTerminate,
      onResponderTerminationRequest,
      onScrollShouldSetResponder,
      onScrollShouldSetResponderCapture,
      onSelectionChangeShouldSetResponder,
      onSelectionChangeShouldSetResponderCapture,
      onStartShouldSetResponder,
      onStartShouldSetResponderCapture
    });
    if (viewProps.href !== void 0 && hrefAttrs !== void 0) {
      const { download, rel, target } = hrefAttrs;
      if (download != null) {
        viewProps.download = download;
      }
      if (rel != null) {
        viewProps.rel = rel;
      }
      if (typeof target === "string") {
        viewProps.target = target.charAt(0) !== "_" ? `_${target}` : target;
      }
    }
    return viewProps;
  },
  useEvents(viewProps, events, { pseudos }, setStateShallow) {
    if (process.env.TAMAGUI_TARGET === "native") {
      const attachFocus = !!(pseudos == null ? void 0 : pseudos.focusStyle);
      if (attachFocus) {
        viewProps.onFocus = (0, import_web2.composeEventHandlers)(viewProps.onFocus, () => {
          setStateShallow({ focus: true });
        });
        viewProps.onBlur = (0, import_web2.composeEventHandlers)(viewProps.onBlur, () => {
          setStateShallow({ focus: false });
        });
      }
      if (events && viewProps.hitSlop) {
        events.hitSlop = viewProps.hitSlop;
      }
      const pressability = usePressability(events || null);
      if (events) {
        if (events.onPress) {
          for (const key in pressability) {
            const og = viewProps[key];
            const val = pressability[key];
            viewProps[key] = og && !dontComposePressabilityKeys[key] ? (0, import_web2.composeEventHandlers)(og, val) : val;
          }
        }
      }
    }
  }
});
var dontComposePressabilityKeys = {
  onClick: true
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Stack,
  Text
});
