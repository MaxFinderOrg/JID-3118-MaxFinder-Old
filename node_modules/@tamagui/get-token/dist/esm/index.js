import { isVariable } from "@tamagui/web";
import { getTokens } from "@tamagui/web";
const defaultOptions = {
  shift: 0,
  bounds: [0]
};
const getSize = (size, options) => {
  return getTokenRelative("size", size, options);
};
const getSpace = (space, options) => {
  return getTokenRelative("space", space, options);
};
const getRadius = (radius, options) => {
  return getTokenRelative("radius", radius, options);
};
const cacheVariables = {};
const cacheWholeVariables = {};
const cacheKeys = {};
const cacheWholeKeys = {};
const stepTokenUpOrDown = (type, current, options = defaultOptions) => {
  var _a, _b;
  const tokens = getTokens({ prefixed: true })[type];
  if (!(type in cacheVariables)) {
    cacheKeys[type] = [];
    cacheVariables[type] = [];
    cacheWholeKeys[type] = [];
    cacheWholeVariables[type] = [];
    const sorted = Object.keys(tokens).map((k) => tokens[k]).sort((a, b) => a.val - b.val);
    for (const token of sorted) {
      cacheKeys[type].push(token.key);
      cacheVariables[type].push(token);
    }
    const sortedExcludingHalfSteps = sorted.filter((x) => !x.key.endsWith(".5"));
    for (const token of sortedExcludingHalfSteps) {
      cacheWholeKeys[type].push(token.key);
      cacheWholeVariables[type].push(token);
    }
  }
  const isString = typeof current === "string";
  const cache = options.excludeHalfSteps ? isString ? cacheWholeKeys : cacheWholeVariables : isString ? cacheKeys : cacheVariables;
  const tokensOrdered = cache[type];
  const min = ((_a = options.bounds) == null ? void 0 : _a[0]) ?? 0;
  const max = ((_b = options.bounds) == null ? void 0 : _b[1]) ?? tokensOrdered.length - 1;
  const currentIndex = tokensOrdered.indexOf(current);
  let shift = options.shift || 0;
  if (shift) {
    if (current === "$true" || isVariable(current) && current.name === "true") {
      shift += shift > 0 ? 1 : -1;
    }
  }
  const index = Math.min(max, Math.max(min, currentIndex + shift));
  const found = tokensOrdered[index];
  const result = (typeof found === "string" ? tokens[found] : found) || tokens["$true"];
  return result;
};
const getTokenRelative = stepTokenUpOrDown;
export {
  getRadius,
  getSize,
  getSpace,
  getTokenRelative,
  stepTokenUpOrDown
};
//# sourceMappingURL=index.js.map
