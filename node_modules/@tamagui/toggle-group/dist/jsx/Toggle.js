import { ThemeableStack } from "@tamagui/stacks";
import { useControllableState } from "@tamagui/use-controllable-state";
import { Theme, composeEventHandlers, styled } from "@tamagui/web";
import * as React from "react";
const NAME = "Toggle";
const ToggleFrame = styled(ThemeableStack, {
  name: NAME,
  tag: "button",
  variants: {
    unstyled: {
      false: {
        pressTheme: true,
        backgroundColor: "$background",
        alignItems: "center",
        justifyContent: "center",
        display: "flex",
        borderColor: "$borderColor",
        borderWidth: 1,
        margin: -1,
        hoverStyle: {
          backgroundColor: "$backgroundHover"
        },
        pressStyle: {
          backgroundColor: "$backgroundPress"
        },
        focusStyle: {
          borderColor: "$borderColorFocus",
          outlineColor: "$borderColorFocus",
          outlineWidth: 2,
          outlineStyle: "solid"
        }
      }
    },
    active: {
      true: {
        zIndex: 1,
        hoverStyle: {
          backgroundColor: "$background"
        },
        focusStyle: {
          borderColor: "$borderColorPress",
          backgroundColor: "$backgroundPress"
        }
      }
    },
    orientation: {
      horizontal: {
        flexDirection: "row",
        spaceDirection: "horizontal"
      },
      vertical: {
        flexDirection: "column",
        spaceDirection: "vertical"
      }
    }
  },
  defaultVariants: {
    unstyled: false
  }
});
const Toggle = ToggleFrame.extractable(
  React.forwardRef((props, forwardedRef) => {
    const {
      pressed: pressedProp,
      defaultPressed = false,
      onPressedChange,
      ...buttonProps
    } = props;
    const [pressed = false, setPressed] = useControllableState({
      prop: pressedProp,
      onChange: onPressedChange,
      defaultProp: defaultPressed
    });
    return <Theme name={pressed ? "active" : null}><ToggleFrame
      active={!props.unstyled ? pressed : void 0}
      aria-pressed={pressed}
      data-state={pressed ? "on" : "off"}
      data-disabled={props.disabled ? "" : void 0}
      {...buttonProps}
      ref={forwardedRef}
      onPress={composeEventHandlers(props.onPress ?? void 0, (event) => {
        if (!props.disabled) {
          setPressed(!pressed);
        }
      })}
    /></Theme>;
  })
);
Toggle.displayName = NAME;
export {
  Toggle,
  ToggleFrame
};
//# sourceMappingURL=Toggle.js.map
