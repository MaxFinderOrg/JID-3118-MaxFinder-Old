import { jsx } from "react/jsx-runtime";
import { createContextScope } from "@tamagui/create-context";
import { registerFocusable } from "@tamagui/focusable";
import { getFontSize } from "@tamagui/font-size";
import { getSize } from "@tamagui/get-token";
import { Group, useGroupItem } from "@tamagui/group";
import { useGetThemedIcon } from "@tamagui/helpers-tamagui";
import { RovingFocusGroup, createRovingFocusGroupScope } from "@tamagui/roving-focus";
import { useControllableState } from "@tamagui/use-controllable-state";
import { useDirection } from "@tamagui/use-direction";
import {
  getVariableValue,
  isWeb,
  styled,
  useTheme,
  withStaticProperties
} from "@tamagui/web";
import React from "react";
import { Toggle, ToggleFrame } from "./Toggle";
const TOGGLE_GROUP_NAME = "ToggleGroup";
const [createToggleGroupContext, createToggleGroupScope] = createContextScope(
  TOGGLE_GROUP_NAME,
  [createRovingFocusGroupScope]
);
const TOGGLE_GROUP_ITEM_NAME = "ToggleGroupItem";
const [createToggleGroupItemContext, createToggleGroupItemScope] = createContextScope(TOGGLE_GROUP_ITEM_NAME);
const [ToggleGroupItemProvider, useToggleGroupItemContext] = createToggleGroupContext(TOGGLE_GROUP_NAME);
const useToggleGroupItemScope = createToggleGroupItemScope();
const ToggleGroupItem = ToggleFrame.extractable(
  React.forwardRef(
    (props, forwardedRef) => {
      const valueContext = useToggleGroupValueContext(
        TOGGLE_GROUP_ITEM_NAME,
        props.__scopeToggleGroup
      );
      const context = useToggleGroupContext(
        TOGGLE_GROUP_ITEM_NAME,
        props.__scopeToggleGroup
      );
      const __scopeToggleGroup = props.__scopeToggleGroup;
      const rovingFocusGroupScope = useRovingFocusGroupScope(props.__scopeToggleGroup);
      const pressed = valueContext.value.includes(props.value);
      const disabled = context.disabled || props.disabled || false;
      const ref = React.useRef(null);
      const groupItemProps = useGroupItem({ disabled });
      const size = props.size ?? context.size;
      const sizeProps = props.unstyled ? {} : {
        width: void 0,
        height: void 0,
        padding: getVariableValue(size) * 0.6
      };
      if (!props.unstyled) {
        if (props.orientation === "horizontal") {
          sizeProps.height = getVariableValue(size) * 2.4;
        } else {
          sizeProps.width = getVariableValue(size) * 2.4;
        }
      }
      const iconSize = (typeof size === "number" ? size * 0.7 : getFontSize(size)) * 1.2;
      const theme = useTheme();
      const getThemedIcon = useGetThemedIcon({ size: iconSize, color: theme.color });
      const childrens = React.Children.toArray(props.children);
      const children = childrens.map((child) => {
        if (props.disablePassStyles || !React.isValidElement(child)) {
          return child;
        }
        return getThemedIcon(child);
      });
      const commonProps = { ...props, pressed, disabled, ...sizeProps, children };
      return /* @__PURE__ */ jsx(ToggleGroupItemProvider, { scope: __scopeToggleGroup, children: context.rovingFocus ? /* @__PURE__ */ jsx(
        RovingFocusGroup.Item,
        {
          asChild: "except-style",
          ...rovingFocusGroupScope,
          focusable: !disabled,
          active: pressed,
          children: /* @__PURE__ */ jsx(
            ToggleFrame,
            {
              asChild: "except-style",
              focusable: !disabled,
              disabled,
              ref,
              children: /* @__PURE__ */ jsx(
                ToggleGroupItemImpl,
                {
                  ...commonProps,
                  ref: forwardedRef,
                  ...groupItemProps
                }
              )
            }
          )
        }
      ) : /* @__PURE__ */ jsx(
        ToggleFrame,
        {
          asChild: "except-style",
          focusable: !disabled,
          disabled,
          ref,
          children: /* @__PURE__ */ jsx(ToggleGroupItemImpl, { ...commonProps, ref: forwardedRef })
        }
      ) });
    }
  )
);
ToggleGroupItem.displayName = TOGGLE_GROUP_ITEM_NAME;
const ToggleGroupItemImpl = ToggleFrame.extractable(
  React.forwardRef(
    (props, forwardedRef) => {
      const { __scopeToggleGroup, value, ...itemProps } = props;
      const valueContext = useToggleGroupValueContext(
        TOGGLE_GROUP_ITEM_NAME,
        __scopeToggleGroup
      );
      const singleProps = {
        "aria-pressed": void 0
      };
      const typeProps = valueContext.type === "single" ? singleProps : void 0;
      return /* @__PURE__ */ jsx(
        Toggle,
        {
          ...typeProps,
          ...itemProps,
          ref: forwardedRef,
          onPressedChange: (pressed) => {
            if (pressed) {
              valueContext.onItemActivate(value);
            } else {
              valueContext.onItemDeactivate(value);
            }
          }
        }
      );
    }
  )
);
const useRovingFocusGroupScope = createRovingFocusGroupScope();
const ToggleGroup = withStaticProperties(
  React.forwardRef((props, forwardedRef) => {
    const { type, ...toggleGroupProps } = props;
    if (!isWeb) {
      React.useEffect(() => {
        if (!props.id)
          return;
        return registerFocusable(props.id, {
          // TODO: would be nice to focus on the first child later - could be done with reforest
          // for now leaving it empty
          focus: () => {
          }
        });
      }, [props.id]);
    }
    if (type === "single") {
      const singleProps = toggleGroupProps;
      return /* @__PURE__ */ jsx(ToggleGroupImplSingle, { ...singleProps, ref: forwardedRef });
    }
    if (type === "multiple") {
      const multipleProps = toggleGroupProps;
      return /* @__PURE__ */ jsx(ToggleGroupImplMultiple, { ...multipleProps, ref: forwardedRef });
    }
    throw new Error(`Missing prop \`type\` expected on \`${TOGGLE_GROUP_NAME}\``);
  }),
  {
    Item: ToggleGroupItem
  }
);
ToggleGroup.displayName = TOGGLE_GROUP_NAME;
const [ToggleGroupValueProvider, useToggleGroupValueContext] = createToggleGroupContext(TOGGLE_GROUP_NAME);
const ToggleGroupImplSingle = React.forwardRef((props, forwardedRef) => {
  const {
    value: valueProp,
    defaultValue,
    onValueChange = () => {
    },
    disableDeactivation = false,
    ...toggleGroupSingleProps
  } = props;
  const [value, setValue] = useControllableState({
    prop: valueProp,
    defaultProp: defaultValue,
    onChange: onValueChange
  });
  return /* @__PURE__ */ jsx(
    ToggleGroupValueProvider,
    {
      scope: props.__scopeToggleGroup,
      type: "single",
      value: value ? [value] : [],
      defaultValue: value,
      onItemActivate: setValue,
      onItemDeactivate: React.useCallback(
        () => disableDeactivation ? null : setValue(""),
        [setValue, disableDeactivation]
      ),
      children: /* @__PURE__ */ jsx(ToggleGroupImpl, { ...toggleGroupSingleProps, ref: forwardedRef })
    }
  );
});
const ToggleGroupImplMultiple = React.forwardRef((props, forwardedRef) => {
  const {
    value: valueProp,
    defaultValue,
    onValueChange = () => {
    },
    ...toggleGroupMultipleProps
  } = props;
  const [value = [], setValue] = useControllableState({
    prop: valueProp,
    defaultProp: defaultValue,
    onChange: onValueChange
  });
  const handleButtonActivate = React.useCallback(
    (itemValue) => setValue((prevValue = []) => [...prevValue, itemValue]),
    [setValue]
  );
  const handleButtonDeactivate = React.useCallback(
    (itemValue) => setValue((prevValue = []) => prevValue.filter((value2) => value2 !== itemValue)),
    [setValue]
  );
  return /* @__PURE__ */ jsx(
    ToggleGroupValueProvider,
    {
      scope: props.__scopeToggleGroup,
      type: "multiple",
      value,
      defaultValue: value,
      onItemActivate: handleButtonActivate,
      onItemDeactivate: handleButtonDeactivate,
      children: /* @__PURE__ */ jsx(ToggleGroupImpl, { ...toggleGroupMultipleProps, ref: forwardedRef })
    }
  );
});
ToggleGroup.displayName = TOGGLE_GROUP_NAME;
const [ToggleGroupContext, useToggleGroupContext] = createToggleGroupContext(TOGGLE_GROUP_NAME);
const ToggleGroupImplElementFrame = styled(Group, {
  name: TOGGLE_GROUP_NAME,
  variants: {
    unstyled: {
      false: {
        backgroundColor: "$background"
      }
    },
    orientation: {
      vertical: {
        flexDirection: "column",
        spaceDirection: "vertical"
      },
      horizontal: {
        flexDirection: "row",
        spaceDirection: "horizontal"
      }
    }
  },
  defaultVariants: {
    unstyled: false
  }
});
const ToggleGroupImpl = ToggleGroupImplElementFrame.extractable(
  React.forwardRef(
    (props, forwardedRef) => {
      const {
        __scopeToggleGroup,
        disabled = false,
        orientation = "horizontal",
        dir,
        rovingFocus = true,
        loop = true,
        unstyled = false,
        size: sizeProp = "$true",
        sizeAdjust = 0,
        ...toggleGroupProps
      } = props;
      const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeToggleGroup);
      const direction = useDirection(dir);
      const commonProps = {
        role: "group",
        dir: direction,
        ...toggleGroupProps
      };
      const adjustedSize = getVariableValue(
        getSize(props.size, {
          shift: sizeAdjust
        })
      );
      const size = Math.round(adjustedSize * 0.45);
      return /* @__PURE__ */ jsx(
        ToggleGroupContext,
        {
          scope: __scopeToggleGroup,
          rovingFocus,
          disabled,
          size,
          children: rovingFocus ? /* @__PURE__ */ jsx(
            RovingFocusGroup,
            {
              asChild: "except-style",
              ...rovingFocusGroupScope,
              orientation,
              dir: direction,
              loop,
              children: /* @__PURE__ */ jsx(
                ToggleGroupImplElementFrame,
                {
                  "aria-orientation": orientation,
                  orientation,
                  axis: orientation,
                  ref: forwardedRef,
                  "data-disabled": disabled ? "" : void 0,
                  unstyled,
                  ...commonProps
                }
              )
            }
          ) : /* @__PURE__ */ jsx(
            ToggleGroupImplElementFrame,
            {
              "aria-orientation": orientation,
              ref: forwardedRef,
              orientation,
              "data-disabled": disabled ? "" : void 0,
              unstyled,
              ...commonProps
            }
          )
        }
      );
    }
  )
);
export {
  ToggleGroup,
  createToggleGroupScope
};
//# sourceMappingURL=ToggleGroup.js.map
