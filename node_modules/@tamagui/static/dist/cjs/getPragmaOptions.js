"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var getPragmaOptions_exports = {};
__export(getPragmaOptions_exports, {
  getPragmaOptions: () => getPragmaOptions
});
module.exports = __toCommonJS(getPragmaOptions_exports);
function getPragmaOptions({
  source,
  path,
  disableCommentCheck
}) {
  var _a, _b;
  if (!disableCommentCheck && !source.startsWith("//") && !source.startsWith("/*")) {
    return {
      shouldPrintDebug: false,
      shouldDisable: false
    };
  }
  let shouldPrintDebug = false;
  let shouldDisable = false;
  const firstLine = source.slice(0, 800).split("\n")[0];
  if (firstLine.includes("tamagui-ignore")) {
    shouldDisable = true;
  }
  if (firstLine.includes("debug")) {
    shouldPrintDebug = true;
  }
  if (firstLine.includes("debug-verbose")) {
    shouldPrintDebug = "verbose";
  }
  if (process.env.TAMAGUI_DEBUG_FILE) {
    if (path.includes(process.env.TAMAGUI_DEBUG_FILE)) {
      shouldPrintDebug = "verbose";
    }
  }
  if ((_a = process.env.DEBUG) == null ? void 0 : _a.includes("tamagui")) {
    shouldPrintDebug = true;
  }
  if ((_b = process.env.DEBUG) == null ? void 0 : _b.includes("tamagui-verbose")) {
    shouldPrintDebug = "verbose";
  }
  return {
    shouldPrintDebug,
    shouldDisable
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getPragmaOptions
});
//# sourceMappingURL=getPragmaOptions.js.map
