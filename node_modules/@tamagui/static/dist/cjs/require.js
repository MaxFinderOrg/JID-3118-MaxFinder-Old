"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var require_exports = {};
__export(require_exports, {
  getNameToPaths: () => getNameToPaths,
  registerRequire: () => registerRequire
});
module.exports = __toCommonJS(require_exports);
var import_path = require("path");
var _a;
const nameToPaths = {};
const Module = require("module");
const getNameToPaths = () => nameToPaths;
const proxyWorm = require("@tamagui/proxy-worm");
const rnw = require("react-native-web");
const core = require("@tamagui/core-node");
let isRegistered = false;
let og;
function registerRequire() {
  if (isRegistered) {
    return () => {
    };
  }
  const { unregister } = require("esbuild-register/dist/node").register({
    hookIgnoreNodeModules: false
  });
  og = Module.prototype.require;
  isRegistered = true;
  Module.prototype.require = tamaguiRequire;
  return () => {
    unregister();
    isRegistered = false;
    Module.prototype.require = og;
  };
}
const packageJson = require("react-native-web/package.json");
const IGNORES = process.env.TAMAGUI_IGNORE_BUNDLE_ERRORS;
const extraIgnores = IGNORES === "true" ? [] : (_a = process.env.TAMAGUI_IGNORE_BUNDLE_ERRORS) == null ? void 0 : _a.split(",");
const knownIgnorableModules = {
  "expo-modules": true,
  solito: true,
  ...Object.fromEntries((extraIgnores == null ? void 0 : extraIgnores.map((k) => [k, true])) || [])
};
const hasWarnedForModules = /* @__PURE__ */ new Set();
function tamaguiRequire(path) {
  if (/\.(gif|jpe?g|png|svg|ttf|otf|woff2?|bmp|webp)$/i.test(path)) {
    return {};
  }
  if (path === "@gorhom/bottom-sheet" || path.startsWith("react-native-reanimated") || path === "expo-linear-gradient" || path === "@expo/vector-icons") {
    return proxyWorm;
  }
  if (path === "react-native/package.json") {
    return packageJson;
  }
  if (path === "react-native-web-lite" || path.startsWith("react-native") && // allow our rnw.tsx imports through
  !path.startsWith("react-native-web/dist/cjs/exports".replace(/\//g, import_path.sep))) {
    return rnw;
  }
  if (path === "@tamagui/core" || path === "@tamagui/core-node" || path === "@tamagui/web") {
    return core;
  }
  if (path in knownIgnorableModules) {
    return proxyWorm;
  }
  try {
    const out = og.apply(this, arguments);
    return out;
  } catch (err) {
    if (allowedIgnores[path] || IGNORES === "true") {
    } else if (!process.env.TAMAGUI_SHOW_FULL_BUNDLE_ERRORS) {
      if (hasWarnedForModules.has(path)) {
      } else {
        hasWarnedForModules.add(path);
        console.log(
          `
\u26A0\uFE0F Tamagui Warning [001]: Skipping loading ${path} due to error bundling.
   - message: ${err.message}
   - for more info see: https://tamagui.dev/docs/intro/errors#warning-001
   - set TAMAGUI_SHOW_FULL_BUNDLE_ERRORS=1 to see stack trace

`
        );
      }
    } else {
      console.error(
        `Tamagui failed loading the pre-built tamagui.config.ts
  
  ${err.message}
  ${err.stack}
  
  You can see if it loads in the node repl:
  
  require("./${(0, import_path.relative)(process.cwd(), path)}").default
  
  `
      );
    }
    return proxyWorm;
  }
}
const allowedIgnores = {
  "expo-constants": true
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getNameToPaths,
  registerRequire
});
//# sourceMappingURL=require.js.map
