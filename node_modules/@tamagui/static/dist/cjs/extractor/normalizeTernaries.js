"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var normalizeTernaries_exports = {};
__export(normalizeTernaries_exports, {
  normalizeTernaries: () => normalizeTernaries
});
module.exports = __toCommonJS(normalizeTernaries_exports);
var import_generator = __toESM(require("@babel/generator"));
var t = __toESM(require("@babel/types"));
var import_invariant = __toESM(require("invariant"));
function normalizeTernaries(ternaries) {
  (0, import_invariant.default)(
    Array.isArray(ternaries),
    "extractStaticTernaries expects param 1 to be an array of ternaries"
  );
  if (ternaries.length === 0) {
    return [];
  }
  const ternariesByKey = {};
  for (let idx = -1, len = ternaries.length; ++idx < len; ) {
    const { test, consequent, alternate, remove, ...rest } = ternaries[idx];
    let ternaryTest = test;
    if (t.isExpressionStatement(test)) {
      ternaryTest = test.expression;
    }
    let shouldSwap = false;
    if (t.isUnaryExpression(test) && test.operator === "!") {
      ternaryTest = test.argument;
      shouldSwap = true;
    } else if (t.isBinaryExpression(test)) {
      if (test.operator === "!==" || test.operator === "!=") {
        ternaryTest = t.binaryExpression(
          test.operator.replace("!", "="),
          test.left,
          test.right
        );
        shouldSwap = true;
      }
    }
    const key = (0, import_generator.default)(ternaryTest).code;
    if (!ternariesByKey[key]) {
      ternariesByKey[key] = {
        ...rest,
        alternate: {},
        consequent: {},
        test: ternaryTest,
        remove
      };
    }
    const altStyle = (shouldSwap ? consequent : alternate) ?? {};
    const consStyle = (shouldSwap ? alternate : consequent) ?? {};
    Object.assign(ternariesByKey[key].alternate, altStyle);
    Object.assign(ternariesByKey[key].consequent, consStyle);
  }
  const ternaryExpression = Object.keys(ternariesByKey).map((key) => {
    return ternariesByKey[key];
  });
  return ternaryExpression;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  normalizeTernaries
});
//# sourceMappingURL=normalizeTernaries.js.map
