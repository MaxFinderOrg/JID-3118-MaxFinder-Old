"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var getPropValueFromAttributes_exports = {};
__export(getPropValueFromAttributes_exports, {
  getPropValueFromAttributes: () => getPropValueFromAttributes
});
module.exports = __toCommonJS(getPropValueFromAttributes_exports);
var import_generator = __toESM(require("@babel/generator"));
var t = __toESM(require("@babel/types"));
var import_accessSafe = require("./accessSafe");
function getPropValueFromAttributes(propName, attrs) {
  let propIndex = -1;
  let jsxAttr = null;
  for (let idx = -1, len = attrs.length; ++idx < len; ) {
    const attr = attrs[idx];
    if (t.isJSXAttribute(attr) && attr.name && attr.name.name === propName) {
      propIndex = idx;
      jsxAttr = attr;
      break;
    }
  }
  if (!jsxAttr || jsxAttr.value == null) {
    return null;
  }
  let propValue = jsxAttr.value;
  if (t.isJSXExpressionContainer(propValue)) {
    propValue = propValue.expression;
  }
  if (t.isJSXEmptyExpression(propValue)) {
    console.error("encountered JSXEmptyExpression");
    return null;
  }
  const applicableSpreads = attrs.filter(
    // 1. idx is greater than propValue prop index
    // 2. attr is a spread operator
    (attr, idx) => {
      if (t.isJSXSpreadAttribute(attr)) {
        if (t.isIdentifier(attr.argument) || t.isMemberExpression(attr.argument)) {
          return idx > propIndex;
        }
        if (t.isLogicalExpression(attr.argument)) {
          return false;
        }
        throw new Error(
          `unsupported spread of type "${attr.argument.type}": ${// @ts-ignore
          (0, import_generator.default)(attr).code}`
        );
      }
      return false;
    }
  ).map((attr) => attr.argument);
  if (applicableSpreads.length > 0) {
    propValue = applicableSpreads.reduce(
      (acc, val) => t.logicalExpression("||", (0, import_accessSafe.accessSafe)(val, propName), acc),
      propValue
    );
  }
  return propValue;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getPropValueFromAttributes
});
//# sourceMappingURL=getPropValueFromAttributes.js.map
