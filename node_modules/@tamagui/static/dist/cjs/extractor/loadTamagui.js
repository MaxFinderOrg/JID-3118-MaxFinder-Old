"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var loadTamagui_exports = {};
__export(loadTamagui_exports, {
  TamaguiProjectInfo: () => import_bundleConfig.TamaguiProjectInfo,
  getOptions: () => getOptions,
  loadTamagui: () => loadTamagui,
  loadTamaguiSync: () => loadTamaguiSync,
  resolveWebOrNativeSpecificEntry: () => resolveWebOrNativeSpecificEntry,
  watchTamaguiConfig: () => watchTamaguiConfig
});
module.exports = __toCommonJS(loadTamagui_exports);
var import_path = require("path");
var import_cli_color = require("@tamagui/cli-color");
var import_config_default_node = require("@tamagui/config-default-node");
var import_core_node = require("@tamagui/core-node");
var import_esbuild = __toESM(require("esbuild"));
var import_fs_extra = require("fs-extra");
var import_constants = require("../constants");
var import_require = require("../require");
var import_bundleConfig = require("./bundleConfig");
var import_generateTamaguiStudioConfig = require("./generateTamaguiStudioConfig");
var import_getTamaguiConfigPathFromOptionsConfig = require("./getTamaguiConfigPathFromOptionsConfig");
const getFilledOptions = (propsIn) => ({
  // defaults
  config: "tamagui.config.ts",
  components: ["tamagui"],
  ...propsIn
});
async function loadTamagui(propsIn) {
  const options = getFilledOptions(propsIn);
  await generateThemesAndLog(options);
  const bundleInfo = await (0, import_bundleConfig.getBundledConfig)(options);
  if (!bundleInfo) {
    console.warn(
      `No bundled config generated, maybe an error in bundling. Set DEBUG=tamagui and re-run to get logs.`
    );
    return null;
  }
  if (!(0, import_bundleConfig.hasBundledConfigChanged)()) {
    return bundleInfo;
  }
  await (0, import_generateTamaguiStudioConfig.generateTamaguiStudioConfig)(options, bundleInfo);
  if (bundleInfo) {
    const config = (0, import_core_node.createTamagui)(bundleInfo.tamaguiConfig);
    if (options.outputCSS) {
      (0, import_cli_color.colorLog)(import_cli_color.Color.FgYellow, `    \u27A1 [tamagui] outputCSS: ${options.outputCSS}
`);
      await (0, import_fs_extra.writeFile)(options.outputCSS, config.getCSS());
    }
  }
  return bundleInfo;
}
let waiting = false;
let hasLoggedOnce = false;
const generateThemesAndLog = async (options) => {
  if (waiting)
    return;
  if (!options.themeBuilder)
    return;
  try {
    waiting = true;
    await new Promise((res) => setTimeout(res, 30));
    const didGenerate = await (0, import_generateTamaguiStudioConfig.generateTamaguiThemes)(options);
    if (!hasLoggedOnce || didGenerate) {
      hasLoggedOnce = true;
      const whitespaceBefore = `    `;
      (0, import_cli_color.colorLog)(import_cli_color.Color.FgYellow, `${whitespaceBefore}\u27A1 [tamagui] Generated themes:`);
      (0, import_cli_color.colorLog)(
        import_cli_color.Color.Dim,
        `
${whitespaceBefore}${(0, import_path.relative)(process.cwd(), options.themeBuilder.output)}`
      );
    }
  } finally {
    waiting = false;
  }
};
function loadTamaguiSync(propsIn) {
  const props = getFilledOptions(propsIn);
  const unregisterRequire = (0, import_require.registerRequire)();
  try {
    process.env.IS_STATIC = "is_static";
    process.env.TAMAGUI_IS_SERVER = "true";
    const devValueOG = globalThis["__DEV__"];
    globalThis["__DEV__"] = process.env.NODE_ENV === "development";
    try {
      let tamaguiConfig = null;
      if (props.config) {
        const configPath = (0, import_getTamaguiConfigPathFromOptionsConfig.getTamaguiConfigPathFromOptionsConfig)(props.config);
        const exp = require(configPath);
        tamaguiConfig = exp["default"] || exp;
        if (!tamaguiConfig || !tamaguiConfig.parsed) {
          const confPath = require.resolve(configPath);
          throw new Error(`Can't find valid config in ${confPath}:
          
  Be sure you "export default" the config.`);
        }
      }
      const components = (0, import_bundleConfig.loadComponents)(props);
      if (!components) {
        throw new Error(`No components loaded`);
      }
      if (process.env.DEBUG === "tamagui") {
        console.log(`components`, components);
      }
      process.env.IS_STATIC = void 0;
      globalThis["__DEV__"] = devValueOG;
      if (props.config && tamaguiConfig) {
        (0, import_core_node.createTamagui)(tamaguiConfig);
      }
      const info = {
        components,
        tamaguiConfig,
        nameToPaths: (0, import_require.getNameToPaths)()
      };
      (0, import_generateTamaguiStudioConfig.generateTamaguiStudioConfigSync)(props, info);
      return info;
    } catch (err) {
      if (err instanceof Error) {
        console.warn(
          `Error loading tamagui.config.ts (set DEBUG=tamagui to see full stack), running tamagui without custom config`
        );
        console.log(`

    ${err.message}

`);
        if (import_constants.SHOULD_DEBUG) {
          console.error(err.stack);
        }
      } else {
        console.error(`Error loading tamagui.config.ts`, err);
      }
      return {
        components: [],
        tamaguiConfig: (0, import_core_node.createTamagui)((0, import_config_default_node.getDefaultTamaguiConfig)()),
        nameToPaths: {}
      };
    }
  } finally {
    unregisterRequire();
  }
}
async function getOptions({
  root = process.cwd(),
  tsconfigPath = "tsconfig.json",
  tamaguiOptions,
  host,
  debug
} = {}) {
  const dotDir = (0, import_path.join)(root, ".tamagui");
  let pkgJson = {};
  try {
    pkgJson = await (0, import_fs_extra.readJSON)((0, import_path.join)(root, "package.json"));
  } catch (err) {
  }
  return {
    mode: process.env.NODE_ENV === "production" ? "production" : "development",
    root,
    host: host || "127.0.0.1",
    pkgJson,
    debug,
    tsconfigPath,
    tamaguiOptions: {
      components: ["tamagui"],
      ...tamaguiOptions,
      config: await getDefaultTamaguiConfigPath(root, tamaguiOptions == null ? void 0 : tamaguiOptions.config)
    },
    paths: {
      dotDir,
      conf: (0, import_path.join)(dotDir, "tamagui.config.json"),
      types: (0, import_path.join)(dotDir, "types.json")
    }
  };
}
function resolveWebOrNativeSpecificEntry(entry) {
  const workspaceRoot = (0, import_path.resolve)();
  const resolved = require.resolve(entry, { paths: [workspaceRoot] });
  const ext = (0, import_path.extname)(resolved);
  const fileName = (0, import_path.basename)(resolved).replace(ext, "");
  const specificExt = process.env.TAMAGUI_TARGET === "web" ? "web" : "native";
  const specificFile = (0, import_path.join)((0, import_path.dirname)(resolved), fileName + "." + specificExt + ext);
  if ((0, import_fs_extra.existsSync)(specificFile)) {
    return specificFile;
  }
  return entry;
}
const defaultPaths = ["tamagui.config.ts", (0, import_path.join)("src", "tamagui.config.ts")];
let hasWarnedOnce = false;
async function getDefaultTamaguiConfigPath(root, configPath) {
  const searchPaths = [
    ...new Set(
      [configPath, ...defaultPaths].filter(Boolean).map((p) => (0, import_path.join)(root, p))
    )
  ];
  for (const path of searchPaths) {
    if (await (0, import_fs_extra.pathExists)(path)) {
      return path;
    }
  }
  if (!hasWarnedOnce) {
    hasWarnedOnce = true;
    console.warn(`Warning: couldn't find tamagui.config.ts in the following paths given configuration "${configPath}":
    ${searchPaths.join(`
  `)}
  `);
  }
}
async function watchTamaguiConfig(tamaguiOptions) {
  var _a;
  const options = await getOptions({ tamaguiOptions });
  if (!options.tamaguiOptions.config) {
    throw new Error(`No config`);
  }
  if (process.env.NODE_ENV === "production") {
    return {
      dispose() {
      }
    };
  }
  const disposeConfigWatcher = await esbuildWatchFiles(
    options.tamaguiOptions.config,
    () => {
      void (0, import_generateTamaguiStudioConfig.generateTamaguiStudioConfig)(options.tamaguiOptions, null, true);
    }
  );
  const themeBuilderInput = (_a = options.tamaguiOptions.themeBuilder) == null ? void 0 : _a.input;
  let disposeThemesWatcher;
  if (themeBuilderInput) {
    let inputPath = themeBuilderInput;
    try {
      inputPath = require.resolve(themeBuilderInput);
    } catch {
    }
    disposeThemesWatcher = await esbuildWatchFiles(inputPath, () => {
      void generateThemesAndLog(options.tamaguiOptions);
    });
  }
  return {
    dispose() {
      disposeConfigWatcher();
      disposeThemesWatcher == null ? void 0 : disposeThemesWatcher();
    }
  };
}
async function esbuildWatchFiles(entry, onChanged) {
  let hasRunOnce = false;
  const context = await import_esbuild.default.context({
    bundle: true,
    entryPoints: [entry],
    resolveExtensions: [".ts", ".tsx", ".js", ".jsx", ".mjs"],
    logLevel: "silent",
    write: false,
    plugins: [
      {
        name: `on-rebuild`,
        setup({ onEnd }) {
          onEnd(() => {
            if (!hasRunOnce) {
              hasRunOnce = true;
            } else {
              onChanged();
            }
          });
        }
      }
    ]
  });
  void context.watch();
  return () => {
    context.dispose();
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  TamaguiProjectInfo,
  getOptions,
  loadTamagui,
  loadTamaguiSync,
  resolveWebOrNativeSpecificEntry,
  watchTamaguiConfig
});
//# sourceMappingURL=loadTamagui.js.map
