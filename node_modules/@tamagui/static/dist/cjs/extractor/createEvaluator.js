"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var createEvaluator_exports = {};
__export(createEvaluator_exports, {
  createEvaluator: () => createEvaluator,
  createSafeEvaluator: () => createSafeEvaluator
});
module.exports = __toCommonJS(createEvaluator_exports);
var import_vm = __toESM(require("vm"));
var import_generator = __toESM(require("@babel/generator"));
var t = __toESM(require("@babel/types"));
var import_core_node = require("@tamagui/core-node");
var import_esbuild = __toESM(require("esbuild"));
var import_constants = require("../constants");
var import_evaluateAstNode = require("./evaluateAstNode");
var import_extractHelpers = require("./extractHelpers");
function createEvaluator({
  props,
  staticNamespace,
  sourcePath,
  traversePath,
  shouldPrintDebug
}) {
  const evalFn = (n) => {
    if (t.isMemberExpression(n) && t.isIdentifier(n.property) && traversePath && (0, import_extractHelpers.isValidThemeHook)(props, traversePath, n, sourcePath)) {
      const key = n.property.name;
      if (shouldPrintDebug) {
        console.log("    > found theme prop", key);
      }
      return (0, import_core_node.createCSSVariable)(key);
    }
    if (t.isIdentifier(n) && typeof staticNamespace[n.name] !== "undefined") {
      return staticNamespace[n.name];
    }
    const evalContext = import_vm.default.createContext(staticNamespace);
    const codeWithTypescriptAnnotations = `(${(0, import_generator.default)(n).code})`;
    const code = import_esbuild.default.transformSync(codeWithTypescriptAnnotations, { loader: "tsx" }).code.replace(/;\n$/, "");
    if (shouldPrintDebug) {
      console.log("evaluating", code);
    }
    return import_vm.default.runInContext(code, evalContext);
  };
  return (n) => {
    return (0, import_evaluateAstNode.evaluateAstNode)(n, evalFn);
  };
}
function createSafeEvaluator(attemptEval) {
  return (n) => {
    try {
      return attemptEval(n);
    } catch (err) {
      return import_constants.FAILED_EVAL;
    }
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  createEvaluator,
  createSafeEvaluator
});
//# sourceMappingURL=createEvaluator.js.map
