"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var removeUnusedHooks_exports = {};
__export(removeUnusedHooks_exports, {
  removeUnusedHooks: () => removeUnusedHooks
});
module.exports = __toCommonJS(removeUnusedHooks_exports);
var t = __toESM(require("@babel/types"));
const hooks = {
  useMedia: true,
  useTheme: true
};
function removeUnusedHooks(compFn, shouldPrintDebug) {
  compFn.scope.crawl();
  let bodyStatements = compFn == null ? void 0 : compFn.get("body");
  if (!bodyStatements) {
    console.log("no body statemnts?", compFn);
    return;
  }
  if (!Array.isArray(bodyStatements)) {
    if (bodyStatements.isFunctionExpression()) {
      bodyStatements = bodyStatements.scope.path.get("body");
    } else {
      bodyStatements = bodyStatements.get("body");
    }
  }
  if (!bodyStatements || !Array.isArray(bodyStatements)) {
    return;
  }
  const statements = bodyStatements;
  for (const statement of statements) {
    if (!statement.isVariableDeclaration()) {
      continue;
    }
    const declarations = statement.get("declarations");
    if (!Array.isArray(declarations)) {
      continue;
    }
    const isBindingReferenced = (name) => {
      var _a;
      return !!((_a = statement.scope.getBinding(name)) == null ? void 0 : _a.referenced);
    };
    for (const declarator of declarations) {
      const id = declarator.get("id");
      const init = declarator.node.init;
      if (Array.isArray(id) || Array.isArray(init)) {
        continue;
      }
      const shouldRemove = (() => {
        const isHook = init && t.isCallExpression(init) && t.isIdentifier(init.callee) && hooks[init.callee.name];
        if (!isHook) {
          return false;
        }
        if (t.isIdentifier(id.node)) {
          const name = id.node.name;
          return !isBindingReferenced(name);
        } else if (t.isObjectPattern(id.node)) {
          const propPaths = id.get("properties");
          return propPaths.every((prop) => {
            if (!prop.isObjectProperty())
              return false;
            const value = prop.get("value");
            if (Array.isArray(value) || !value.isIdentifier())
              return false;
            const name = value.node.name;
            return !isBindingReferenced(name);
          });
        }
        return false;
      })();
      if (shouldRemove) {
        declarator.remove();
        if (shouldPrintDebug) {
          console.log(`  [\u{1FA9D}] removed ${id.node["name"] ?? ""}`);
        }
      }
    }
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  removeUnusedHooks
});
//# sourceMappingURL=removeUnusedHooks.js.map
