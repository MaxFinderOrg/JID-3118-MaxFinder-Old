"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var getSourceModule_exports = {};
__export(getSourceModule_exports, {
  getSourceModule: () => getSourceModule
});
module.exports = __toCommonJS(getSourceModule_exports);
var t = __toESM(require("@babel/types"));
function getSourceModule(itemName, itemBinding) {
  if (!itemBinding.constant) {
    return null;
  }
  let sourceModule;
  let imported;
  let local;
  let destructured;
  let usesImportSyntax = false;
  const itemNode = itemBinding.path.node;
  if (
    // import x from 'y';
    t.isImportDefaultSpecifier(itemNode) || // import {x} from 'y';
    t.isImportSpecifier(itemNode)
  ) {
    if (t.isImportDeclaration(itemBinding.path.parent)) {
      sourceModule = itemBinding.path.parent.source.value;
      local = itemNode.local.name;
      usesImportSyntax = true;
      if (t.isImportSpecifier(itemNode)) {
        imported = itemNode.imported["name"];
        destructured = true;
      } else {
        imported = itemNode.local.name;
        destructured = false;
      }
    }
  } else if (t.isVariableDeclarator(itemNode) && itemNode.init != null && t.isCallExpression(itemNode.init) && t.isIdentifier(itemNode.init.callee) && itemNode.init.callee.name === "require" && itemNode.init.arguments.length === 1) {
    const firstArg = itemNode.init.arguments[0];
    if (!t.isStringLiteral(firstArg)) {
      return null;
    }
    sourceModule = firstArg.value;
    if (t.isIdentifier(itemNode.id)) {
      local = itemNode.id.name;
      imported = itemNode.id.name;
      destructured = false;
    } else if (t.isObjectPattern(itemNode.id)) {
      for (const objProp of itemNode.id.properties) {
        if (t.isObjectProperty(objProp) && t.isIdentifier(objProp.value) && objProp.value.name === itemName) {
          local = objProp.value.name;
          imported = objProp.key.name;
          destructured = true;
          break;
        }
      }
      if (!local || !imported) {
        console.error("could not find prop with value `%s`", itemName);
        return null;
      }
    } else {
      console.error("Unhandled id type: %s", itemNode.id.type);
      return null;
    }
  } else {
    return null;
  }
  return {
    destructured,
    imported,
    local,
    sourceModule,
    usesImportSyntax
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getSourceModule
});
//# sourceMappingURL=getSourceModule.js.map
