"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var literalToAst_exports = {};
__export(literalToAst_exports, {
  astToLiteral: () => astToLiteral,
  literalToAst: () => literalToAst
});
module.exports = __toCommonJS(literalToAst_exports);
var t = __toESM(require("@babel/types"));
function literalToAst(literal) {
  if (literal === null) {
    return t.nullLiteral();
  }
  switch (typeof literal) {
    case "function":
      throw new Error("Unsupported");
    case "number":
      return t.numericLiteral(literal);
    case "string":
      return t.stringLiteral(literal);
    case "boolean":
      return t.booleanLiteral(literal);
    case "undefined":
      return t.unaryExpression("void", t.numericLiteral(0), true);
    default:
      if (Array.isArray(literal)) {
        return t.arrayExpression(literal.map(literalToAst));
      }
      return t.objectExpression(
        Object.keys(literal).filter((k) => {
          return typeof literal[k] !== "undefined";
        }).map((k) => {
          return t.objectProperty(t.stringLiteral(k), literalToAst(literal[k]));
        })
      );
  }
}
const easyPeasies = ["BooleanLiteral", "StringLiteral", "NumericLiteral"];
function astToLiteral(node) {
  if (!node) {
    return;
  }
  if (easyPeasies.includes(node.type)) {
    return node.value;
  }
  if (node.name === "undefined" && !node.value) {
    return void 0;
  }
  if (t.isNullLiteral(node)) {
    return null;
  }
  if (t.isObjectExpression(node)) {
    return computeProps(node.properties);
  }
  if (t.isArrayExpression(node)) {
    return node.elements.reduce(
      // @ts-ignore
      (acc, element) => [
        ...acc,
        ...(element == null ? void 0 : element.type) === "SpreadElement" ? astToLiteral(element.argument) : [astToLiteral(element)]
      ],
      []
    );
  }
}
function computeProps(props) {
  return props.reduce((acc, prop) => {
    if (prop.type === "SpreadElement") {
      return {
        ...acc,
        ...astToLiteral(prop.argument)
      };
    } else if (prop.type !== "ObjectMethod") {
      const val = astToLiteral(prop.value);
      if (val !== void 0) {
        return {
          ...acc,
          [prop.key.name]: val
        };
      }
    }
    return acc;
  }, {});
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  astToLiteral,
  literalToAst
});
//# sourceMappingURL=literalToAst.js.map
