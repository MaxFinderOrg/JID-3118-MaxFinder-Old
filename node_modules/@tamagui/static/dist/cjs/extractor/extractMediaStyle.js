"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var extractMediaStyle_exports = {};
__export(extractMediaStyle_exports, {
  extractMediaStyle: () => extractMediaStyle,
  isValidMediaCall: () => isValidMediaCall
});
module.exports = __toCommonJS(extractMediaStyle_exports);
var t = __toESM(require("@babel/types"));
var import_core_node = require("@tamagui/core-node");
var import_constants = require("../constants");
var import_extractHelpers = require("./extractHelpers");
function extractMediaStyle(props, ternary, jsxPath, tamaguiConfig, sourcePath, importance = 0, shouldPrintDebug = false) {
  const mt = getMediaQueryTernary(props, ternary, jsxPath, sourcePath);
  if (!mt) {
    return null;
  }
  const { key } = mt;
  const mq = tamaguiConfig.media[key];
  if (!mq) {
    console.error(`Media query "${key}" not found: ${Object.keys(tamaguiConfig.media)}`);
    return null;
  }
  const getStyleObj = (styleObj, negate = false) => {
    return styleObj ? { styleObj, negate } : null;
  };
  const styleOpts = [
    getStyleObj(ternary.consequent, false),
    getStyleObj(ternary.alternate, true)
  ].filter(import_extractHelpers.isPresent);
  if (shouldPrintDebug && !styleOpts.length) {
    console.log("  media query, no styles?");
    return null;
  }
  const mediaKeys = Object.keys(tamaguiConfig.media);
  const mediaKeyPrecendence = mediaKeys.reduce((acc, cur, i) => {
    acc[cur] = new Array(importance + 1).fill(":root").join("");
    return acc;
  }, {});
  let mediaStyles = [];
  for (const { styleObj, negate } of styleOpts) {
    const styles = (0, import_core_node.getStylesAtomic)(styleObj);
    const singleMediaStyles = styles.map((style) => {
      const negKey = negate ? "0" : "";
      const ogPrefix = style.identifier.slice(0, style.identifier.indexOf("-") + 1);
      const identifier = `${style.identifier.replace(
        ogPrefix,
        `${ogPrefix}${import_constants.MEDIA_SEP}${key}${negKey}${import_constants.MEDIA_SEP}`
      )}`;
      const className = `.${identifier}`;
      const mediaSelector = (0, import_core_node.mediaObjectToString)(tamaguiConfig.media[key]);
      const screenStr = negate ? "not all" : "screen";
      const mediaQuery = `${screenStr} and ${mediaSelector}`;
      const precendencePrefix = mediaKeyPrecendence[key];
      const styleInner = style.rules.map((rule) => rule.replace(style.identifier, identifier)).join(";");
      let styleRule = "";
      if (styleInner.includes("@media")) {
        styleRule = styleInner.replace("{", ` and ${mediaQuery} {`);
      } else {
        styleRule = `@media ${mediaQuery} { ${precendencePrefix}${styleInner} }`;
      }
      return {
        ...style,
        identifier,
        className,
        rules: [styleRule]
      };
    });
    if (shouldPrintDebug === "verbose") {
      console.log("  media styles:", importance, styleObj, singleMediaStyles.map((x) => x.identifier).join(", "));
    }
    mediaStyles = [...mediaStyles, ...singleMediaStyles];
  }
  ternary.remove();
  return { mediaStyles, ternaryWithoutMedia: mt.ternaryWithoutMedia };
}
function getMediaQueryTernary(props, ternary, jsxPath, sourcePath) {
  if (t.isLogicalExpression(ternary.test) && ternary.test.operator === "&&") {
    const mediaLeft = getMediaInfoFromExpression(
      props,
      ternary.test.left,
      jsxPath,
      sourcePath,
      ternary.inlineMediaQuery
    );
    if (mediaLeft) {
      return {
        ...mediaLeft,
        ternaryWithoutMedia: {
          ...ternary,
          test: ternary.test.right
        }
      };
    }
  }
  const result = getMediaInfoFromExpression(
    props,
    ternary.test,
    jsxPath,
    sourcePath,
    ternary.inlineMediaQuery
  );
  if (result) {
    return {
      ...result,
      ternaryWithoutMedia: null
    };
  }
  return null;
}
function getMediaInfoFromExpression(props, test, jsxPath, sourcePath, inlineMediaQuery) {
  var _a, _b, _c;
  if (inlineMediaQuery) {
    return {
      key: inlineMediaQuery,
      bindingName: inlineMediaQuery
    };
  }
  if (t.isMemberExpression(test) && t.isIdentifier(test.object) && t.isIdentifier(test.property)) {
    const name = test.object["name"];
    const key = test.property["name"];
    const bindings = jsxPath.scope.getAllBindings();
    const binding = bindings[name];
    if (!binding)
      return false;
    const bindingNode = (_a = binding.path) == null ? void 0 : _a.node;
    if (!t.isVariableDeclarator(bindingNode) || !bindingNode.init)
      return false;
    if (!isValidMediaCall(props, jsxPath, bindingNode.init, sourcePath))
      return false;
    return { key, bindingName: name };
  }
  if (t.isIdentifier(test)) {
    const key = test.name;
    const node = (_c = (_b = jsxPath.scope.getBinding(test.name)) == null ? void 0 : _b.path) == null ? void 0 : _c.node;
    if (!t.isVariableDeclarator(node))
      return false;
    if (!node.init || !isValidMediaCall(props, jsxPath, node.init, sourcePath))
      return false;
    return { key, bindingName: key };
  }
  return null;
}
function isValidMediaCall(props, jsxPath, init, sourcePath) {
  if (!init || !t.isCallExpression(init))
    return false;
  if (!t.isIdentifier(init.callee))
    return false;
  if (init.callee.name !== "useMedia")
    return false;
  const bindings = jsxPath.scope.getAllBindings();
  const mediaBinding = bindings["useMedia"];
  if (!mediaBinding)
    return false;
  const useMediaImport = mediaBinding.path.parent;
  if (!t.isImportDeclaration(useMediaImport))
    return false;
  if (!(0, import_extractHelpers.isValidImport)(props, sourcePath)) {
    return false;
  }
  return true;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  extractMediaStyle,
  isValidMediaCall
});
//# sourceMappingURL=extractMediaStyle.js.map
