"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var generateTamaguiStudioConfig_exports = {};
__export(generateTamaguiStudioConfig_exports, {
  generateTamaguiStudioConfig: () => generateTamaguiStudioConfig,
  generateTamaguiStudioConfigSync: () => generateTamaguiStudioConfigSync,
  generateTamaguiThemes: () => generateTamaguiThemes
});
module.exports = __toCommonJS(generateTamaguiStudioConfig_exports);
var import_path = require("path");
var import_core_node = require("@tamagui/core-node");
var import_generate_themes = require("@tamagui/generate-themes");
var import_fs_extra = __toESM(require("fs-extra"));
var import_bundleConfig = require("./bundleConfig");
const tamaguiDir = (0, import_path.join)(process.cwd(), ".tamagui");
const confFile = (0, import_path.join)(tamaguiDir, "tamagui.config.json");
async function generateTamaguiStudioConfig(tamaguiOptions, configIn, rebuild = false) {
  var _a;
  try {
    const config = configIn ?? await (0, import_bundleConfig.getBundledConfig)(tamaguiOptions, rebuild);
    if (!config)
      return;
    const out = transformConfig(config);
    import_fs_extra.default.writeJSON(confFile, out, {
      spaces: 2
    });
  } catch (err) {
    if (((_a = process.env.DEBUG) == null ? void 0 : _a.includes("tamagui")) || process.env.IS_TAMAGUI_DEV) {
      console.warn("generateTamaguiStudioConfig error", err);
    }
  }
}
async function generateTamaguiThemes(tamaguiOptions) {
  if (!tamaguiOptions.themeBuilder) {
    return;
  }
  const { input, output } = tamaguiOptions.themeBuilder;
  const inPath = resolveRelativePath(input);
  const outPath = resolveRelativePath(output);
  const generatedOutput = await (0, import_generate_themes.generateThemes)(inPath);
  const hasChanged = await (async () => {
    try {
      const themeBuilderJsonExists = await import_fs_extra.default.pathExists(
        (0, import_path.join)(tamaguiDir, "theme-builder.json")
      );
      if (!themeBuilderJsonExists)
        return true;
      if (!generatedOutput)
        return false;
      const next = generatedOutput.generated;
      const current = await (0, import_fs_extra.readFile)(outPath, "utf-8");
      return next !== current;
    } catch (err) {
    }
    return true;
  })();
  if (hasChanged) {
    await (0, import_generate_themes.writeGeneratedThemes)(tamaguiDir, outPath, generatedOutput);
  }
  return hasChanged;
}
const resolveRelativePath = (inputPath) => inputPath.startsWith(".") ? (0, import_path.join)(process.cwd(), inputPath) : require.resolve(inputPath);
function generateTamaguiStudioConfigSync(_tamaguiOptions, config) {
  var _a;
  try {
    import_fs_extra.default.writeJSONSync(confFile, transformConfig(config), {
      spaces: 2
    });
  } catch (err) {
    if (((_a = process.env.DEBUG) == null ? void 0 : _a.includes("tamagui")) || process.env.IS_TAMAGUI_DEV) {
      console.warn("generateTamaguiStudioConfig error", err);
    }
  }
}
function cloneDeepSafe(x, excludeKeys = {}) {
  if (!x)
    return x;
  if (Array.isArray(x))
    return x.map((_) => cloneDeepSafe(_));
  if (typeof x === "function")
    return `Function`;
  if (typeof x !== "object")
    return x;
  if ("$$typeof" in x)
    return "Component";
  return Object.fromEntries(
    Object.entries(x).flatMap(([k, v]) => excludeKeys[k] ? [] : [[k, cloneDeepSafe(v)]])
  );
}
function transformConfig(config) {
  if (!config) {
    return null;
  }
  const next = cloneDeepSafe(config, {
    validStyles: true
  });
  const { components, nameToPaths, tamaguiConfig } = next;
  const { themes, tokens } = tamaguiConfig;
  for (const key in themes) {
    const theme = themes[key];
    theme.id = key;
    for (const tkey in theme) {
      theme[tkey] = (0, import_core_node.getVariableValue)(theme[tkey]);
    }
  }
  for (const key in tokens) {
    const token = { ...tokens[key] };
    for (const tkey in token) {
      token[tkey] = (0, import_core_node.getVariableValue)(token[tkey]);
    }
  }
  for (const component of components) {
    for (const _ in component.nameToInfo) {
      const compDefinition = { ...component.nameToInfo[_] };
      component.nameToInfo[_] = compDefinition;
      const { parentStaticConfig, ...rest } = compDefinition.staticConfig;
      compDefinition.staticConfig = rest;
    }
  }
  next.nameToPaths = {};
  for (const key in nameToPaths) {
    next.nameToPaths[key] = [...nameToPaths[key]];
  }
  const { fontsParsed, getCSS, tokensParsed, themeConfig, ...cleanedConfig } = next.tamaguiConfig;
  return {
    components,
    nameToPaths,
    tamaguiConfig: cleanedConfig
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  generateTamaguiStudioConfig,
  generateTamaguiStudioConfigSync,
  generateTamaguiThemes
});
//# sourceMappingURL=generateTamaguiStudioConfig.js.map
