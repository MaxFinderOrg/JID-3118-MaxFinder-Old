import { readFileSync } from "fs";
import { basename, dirname, extname, join, relative, sep } from "path";
import generate from "@babel/generator";
import traverse from "@babel/traverse";
import * as t from "@babel/types";
import { Color, colorLog } from "@tamagui/cli-color";
import esbuild from "esbuild";
import { ensureDir, removeSync, writeFileSync } from "fs-extra";
import { registerRequire } from "../require";
import { babelParse } from "./babelParse";
import { bundle } from "./bundle";
import { getTamaguiConfigPathFromOptionsConfig } from "./getTamaguiConfigPathFromOptionsConfig";
const external = [
  "@tamagui/core",
  "@tamagui/web",
  "@tamagui/core-node",
  "react",
  "react-dom",
  "react-native-svg"
];
const esbuildExtraOptions = {
  define: {
    __DEV__: `${process.env.NODE_ENV === "development"}`
  }
};
const esbuildOptions = {
  target: "es2018",
  format: "cjs",
  jsx: "transform",
  platform: "node",
  ...esbuildExtraOptions
};
let currentBundle = null;
let isBundling = false;
let lastBundle = null;
const waitForBundle = /* @__PURE__ */ new Set();
function hasBundledConfigChanged() {
  if (lastBundle === currentBundle) {
    return false;
  }
  lastBundle = currentBundle;
  return true;
}
async function getBundledConfig(props, rebuild = false) {
  if (isBundling) {
    await new Promise((res) => {
      waitForBundle.add(res);
    });
  } else if (!currentBundle || rebuild) {
    return await bundleConfig(props);
  }
  return currentBundle;
}
async function bundleConfig(props) {
  var _a, _b, _c, _d;
  try {
    isBundling = true;
    const configEntry = props.config ? getTamaguiConfigPathFromOptionsConfig(props.config) : "";
    const tmpDir = join(process.cwd(), ".tamagui");
    const configOutPath = join(tmpDir, `tamagui.config.cjs`);
    const baseComponents = props.components.filter((x) => x !== "@tamagui/core");
    const componentOutPaths = baseComponents.map(
      (componentModule) => join(
        tmpDir,
        `${componentModule.split(sep).join("-").replace(/[^a-z0-9]+/gi, "")}-components.config.cjs`
      )
    );
    if (process.env.NODE_ENV === "development" && ((_a = process.env.DEBUG) == null ? void 0 : _a.startsWith("tamagui"))) {
      console.log(`Building config entry`, configEntry);
    }
    try {
      await ensureDir(tmpDir);
    } catch {
    }
    const start = Date.now();
    await Promise.all([
      props.config ? bundle({
        entryPoints: [configEntry],
        external,
        outfile: configOutPath,
        target: "node16",
        ...esbuildExtraOptions
      }) : null,
      ...baseComponents.map((componentModule, i) => {
        return bundle({
          entryPoints: [componentModule],
          resolvePlatformSpecificEntries: true,
          external,
          outfile: componentOutPaths[i],
          target: "node16",
          ...esbuildExtraOptions
        });
      })
    ]);
    colorLog(
      Color.FgYellow,
      `
    \u27A1 [tamagui] (${Date.now() - start}ms):`
    );
    colorLog(
      Color.Dim,
      `
        Config     .${sep}${relative(process.cwd(), configOutPath)}
        Components ${[
        ...componentOutPaths.map((p) => `.${sep}${relative(process.cwd(), p)}`)
      ].join("\n             ")}
        `
    );
    let out;
    const unregisterTamagui = registerRequire();
    try {
      out = require(configOutPath);
    } catch (err) {
      throw err;
    } finally {
      unregisterTamagui();
    }
    const config = out.default || out;
    if (!config) {
      throw new Error(`No config: ${config}`);
    }
    let components = loadComponents({
      ...props,
      components: componentOutPaths
    });
    if (!components) {
      throw new Error(`No components found: ${componentOutPaths.join(", ")}`);
    }
    for (const component of components) {
      component.moduleName = baseComponents[componentOutPaths.indexOf(component.moduleName)];
      if (!component.moduleName) {
        if (((_b = process.env.DEBUG) == null ? void 0 : _b.includes("tamagui")) || process.env.IS_TAMAGUI_DEV) {
          console.warn(
            `\u26A0\uFE0F no module name found: ${component.moduleName} ${JSON.stringify(
              baseComponents
            )} in ${JSON.stringify(componentOutPaths)}`
          );
        }
      }
    }
    const coreComponents = loadComponents({
      ...props,
      components: ["@tamagui/core-node"]
    });
    if (coreComponents) {
      coreComponents[0].moduleName = "@tamagui/core";
      components = [...components, ...coreComponents];
    }
    if (process.env.NODE_ENV === "development" && ((_c = process.env.DEBUG) == null ? void 0 : _c.startsWith("tamagui"))) {
      console.log("Loaded components", components);
    }
    const res = {
      components,
      nameToPaths: {},
      tamaguiConfig: config
    };
    currentBundle = res;
    return res;
  } catch (err) {
    console.error(
      `Error bundling tamagui config: ${err == null ? void 0 : err.message} (run with DEBUG=tamagui to see stack)`
    );
    if ((_d = process.env.DEBUG) == null ? void 0 : _d.includes("tamagui")) {
      console.error(err.stack);
    }
  } finally {
    isBundling = false;
    waitForBundle.forEach((cb) => cb());
    waitForBundle.clear();
  }
}
function loadComponents(props) {
  const componentsModules = props.components;
  const key = componentsModules.join("");
  if (cacheComponents[key]) {
    return cacheComponents[key];
  }
  const unregister = registerRequire();
  try {
    const info = componentsModules.flatMap((name) => {
      var _a;
      const extension = extname(name);
      const isLocal = Boolean(extension);
      const isDynamic = isLocal && !props.config;
      if (isDynamic && !process.env.TAMAGUI_ENABLE_DYNAMIC_LOAD) {
        return [];
      }
      const fileContents = isDynamic ? readFileSync(name, "utf-8") : "";
      const loadModule = isDynamic ? join(dirname(name), `.tamagui-dynamic-eval-${basename(name)}.tsx`) : name;
      let writtenContents = fileContents;
      let didBabel = false;
      function attemptLoad({ forceExports = false } = {}) {
        if (isDynamic) {
          writtenContents = forceExports ? esbuildit(
            transformAddExports(babelParse(esbuildit(fileContents, "modern"), name))
          ) : esbuildit(fileContents);
          writeFileSync(loadModule, writtenContents);
        }
        if (process.env.DEBUG === "tamagui") {
          console.log(`loadModule`, loadModule, require.resolve(loadModule));
        }
        const nameToInfo = getComponentStaticConfigByName(
          name,
          interopDefaultExport(require(loadModule))
        );
        return {
          moduleName: name,
          nameToInfo
        };
      }
      const dispose = () => {
        isDynamic && removeSync(loadModule);
      };
      try {
        const res = attemptLoad({
          forceExports: true
        });
        didBabel = true;
        return res;
      } catch (err) {
        console.log("babel err", err, writtenContents);
        writtenContents = fileContents;
        if ((_a = process.env.DEBUG) == null ? void 0 : _a.startsWith("tamagui")) {
          console.log(`Error parsing babel likely`, err);
        }
      } finally {
        dispose();
      }
      try {
        return attemptLoad({
          forceExports: false
        });
      } catch (err) {
        if (!process.env.TAMAGUI_DISABLE_WARN_DYNAMIC_LOAD) {
          console.log(`

Tamagui attempted but failed to dynamically load components in:
  ${name}

This will leave some styled() tags unoptimized.
Disable this file (or dynamic loading altogether):

  disableExtractFoundComponents: ['${name}'] | true

Quiet this warning with environment variable:
      
  TAMAGUI_DISABLE_WARN_DYNAMIC_LOAD=1

`);
          console.log(err);
          console.log(
            `At: ${loadModule}`,
            `
didBabel: ${didBabel}`,
            `
In:`,
            writtenContents,
            `
isDynamic: `,
            isDynamic
          );
        }
        return [];
      } finally {
        dispose();
      }
    });
    cacheComponents[key] = info;
    return info;
  } catch (err) {
    console.log(`Tamagui error bundling components`, err.message, err.stack);
    return null;
  } finally {
    unregister();
  }
}
const esbuildit = (src, target) => {
  return esbuild.transformSync(src, {
    ...esbuildOptions,
    ...target === "modern" && {
      target: "es2022",
      jsx: "transform",
      loader: "tsx",
      platform: "neutral",
      format: "esm"
    }
  }).code;
};
function getComponentStaticConfigByName(name, exported) {
  const components = {};
  try {
    if (!exported || typeof exported !== "object" || Array.isArray(exported)) {
      throw new Error(`Invalid export from package ${name}: ${typeof exported}`);
    }
    for (const key in exported) {
      const found = getTamaguiComponent(key, exported[key]);
      if (found) {
        const { Component, ...sc } = found.staticConfig;
        components[key] = { staticConfig: sc };
      }
    }
  } catch (err) {
    if (process.env.TAMAGUI_DISABLE_WARN_DYNAMIC_LOAD !== "1") {
      console.error(
        `Tamagui failed getting from ${name} (Disable error by setting environment variable TAMAGUI_DISABLE_WARN_DYNAMIC_LOAD=1)`
      );
      console.error(err);
    }
  }
  return components;
}
function getTamaguiComponent(name, Component) {
  if (name[0].toUpperCase() !== name[0]) {
    return;
  }
  const staticConfig = Component == null ? void 0 : Component.staticConfig;
  if (staticConfig) {
    return Component;
  }
}
function interopDefaultExport(mod) {
  return (mod == null ? void 0 : mod.default) ?? mod;
}
const cacheComponents = {};
function transformAddExports(ast) {
  const usedNames = /* @__PURE__ */ new Set();
  traverse(ast, {
    ExportNamedDeclaration(nodePath) {
      if (nodePath.node.specifiers) {
        for (const spec of nodePath.node.specifiers) {
          usedNames.add(
            t.isIdentifier(spec.exported) ? spec.exported.name : spec.exported.value
          );
        }
      }
    }
  });
  traverse(ast, {
    VariableDeclaration(nodePath) {
      if (!t.isProgram(nodePath.parent))
        return;
      const decs = nodePath.node.declarations;
      if (decs.length > 1)
        return;
      const [dec] = decs;
      if (!t.isIdentifier(dec.id))
        return;
      if (!dec.init)
        return;
      if (usedNames.has(dec.id.name))
        return;
      usedNames.add(dec.id.name);
      nodePath.replaceWith(
        t.exportNamedDeclaration(t.variableDeclaration("let", [dec]), [
          t.exportSpecifier(t.identifier(dec.id.name), t.identifier(dec.id.name))
        ])
      );
    }
  });
  return generate(ast, {
    concise: false,
    filename: "test.tsx",
    retainLines: false,
    sourceMaps: false
  }).code;
}
export {
  bundleConfig,
  esbuildOptions,
  getBundledConfig,
  hasBundledConfigChanged,
  loadComponents
};
//# sourceMappingURL=bundleConfig.js.map
