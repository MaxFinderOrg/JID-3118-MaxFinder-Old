import vm from "vm";
import generate from "@babel/generator";
import * as t from "@babel/types";
import { createCSSVariable } from "@tamagui/core-node";
import esbuild from "esbuild";
import { FAILED_EVAL } from "../constants";
import { evaluateAstNode } from "./evaluateAstNode";
import { isValidThemeHook } from "./extractHelpers";
function createEvaluator({
  props,
  staticNamespace,
  sourcePath,
  traversePath,
  shouldPrintDebug
}) {
  const evalFn = (n) => {
    if (t.isMemberExpression(n) && t.isIdentifier(n.property) && traversePath && isValidThemeHook(props, traversePath, n, sourcePath)) {
      const key = n.property.name;
      if (shouldPrintDebug) {
        console.log("    > found theme prop", key);
      }
      return createCSSVariable(key);
    }
    if (t.isIdentifier(n) && typeof staticNamespace[n.name] !== "undefined") {
      return staticNamespace[n.name];
    }
    const evalContext = vm.createContext(staticNamespace);
    const codeWithTypescriptAnnotations = `(${generate(n).code})`;
    const code = esbuild.transformSync(codeWithTypescriptAnnotations, { loader: "tsx" }).code.replace(/;\n$/, "");
    if (shouldPrintDebug) {
      console.log("evaluating", code);
    }
    return vm.runInContext(code, evalContext);
  };
  return (n) => {
    return evaluateAstNode(n, evalFn);
  };
}
function createSafeEvaluator(attemptEval) {
  return (n) => {
    try {
      return attemptEval(n);
    } catch (err) {
      return FAILED_EVAL;
    }
  };
}
export {
  createEvaluator,
  createSafeEvaluator
};
//# sourceMappingURL=createEvaluator.js.map
