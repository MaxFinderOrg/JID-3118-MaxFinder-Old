import { join } from "path";
import { getVariableValue } from "@tamagui/core-node";
import { generateThemes, writeGeneratedThemes } from "@tamagui/generate-themes";
import fs, { readFile } from "fs-extra";
import { getBundledConfig } from "./bundleConfig";
const tamaguiDir = join(process.cwd(), ".tamagui");
const confFile = join(tamaguiDir, "tamagui.config.json");
async function generateTamaguiStudioConfig(tamaguiOptions, configIn, rebuild = false) {
  var _a;
  try {
    const config = configIn ?? await getBundledConfig(tamaguiOptions, rebuild);
    if (!config)
      return;
    const out = transformConfig(config);
    fs.writeJSON(confFile, out, {
      spaces: 2
    });
  } catch (err) {
    if (((_a = process.env.DEBUG) == null ? void 0 : _a.includes("tamagui")) || process.env.IS_TAMAGUI_DEV) {
      console.warn("generateTamaguiStudioConfig error", err);
    }
  }
}
async function generateTamaguiThemes(tamaguiOptions) {
  if (!tamaguiOptions.themeBuilder) {
    return;
  }
  const { input, output } = tamaguiOptions.themeBuilder;
  const inPath = resolveRelativePath(input);
  const outPath = resolveRelativePath(output);
  const generatedOutput = await generateThemes(inPath);
  const hasChanged = await (async () => {
    try {
      const themeBuilderJsonExists = await fs.pathExists(
        join(tamaguiDir, "theme-builder.json")
      );
      if (!themeBuilderJsonExists)
        return true;
      if (!generatedOutput)
        return false;
      const next = generatedOutput.generated;
      const current = await readFile(outPath, "utf-8");
      return next !== current;
    } catch (err) {
    }
    return true;
  })();
  if (hasChanged) {
    await writeGeneratedThemes(tamaguiDir, outPath, generatedOutput);
  }
  return hasChanged;
}
const resolveRelativePath = (inputPath) => inputPath.startsWith(".") ? join(process.cwd(), inputPath) : require.resolve(inputPath);
function generateTamaguiStudioConfigSync(_tamaguiOptions, config) {
  var _a;
  try {
    fs.writeJSONSync(confFile, transformConfig(config), {
      spaces: 2
    });
  } catch (err) {
    if (((_a = process.env.DEBUG) == null ? void 0 : _a.includes("tamagui")) || process.env.IS_TAMAGUI_DEV) {
      console.warn("generateTamaguiStudioConfig error", err);
    }
  }
}
function cloneDeepSafe(x, excludeKeys = {}) {
  if (!x)
    return x;
  if (Array.isArray(x))
    return x.map((_) => cloneDeepSafe(_));
  if (typeof x === "function")
    return `Function`;
  if (typeof x !== "object")
    return x;
  if ("$$typeof" in x)
    return "Component";
  return Object.fromEntries(
    Object.entries(x).flatMap(([k, v]) => excludeKeys[k] ? [] : [[k, cloneDeepSafe(v)]])
  );
}
function transformConfig(config) {
  if (!config) {
    return null;
  }
  const next = cloneDeepSafe(config, {
    validStyles: true
  });
  const { components, nameToPaths, tamaguiConfig } = next;
  const { themes, tokens } = tamaguiConfig;
  for (const key in themes) {
    const theme = themes[key];
    theme.id = key;
    for (const tkey in theme) {
      theme[tkey] = getVariableValue(theme[tkey]);
    }
  }
  for (const key in tokens) {
    const token = { ...tokens[key] };
    for (const tkey in token) {
      token[tkey] = getVariableValue(token[tkey]);
    }
  }
  for (const component of components) {
    for (const _ in component.nameToInfo) {
      const compDefinition = { ...component.nameToInfo[_] };
      component.nameToInfo[_] = compDefinition;
      const { parentStaticConfig, ...rest } = compDefinition.staticConfig;
      compDefinition.staticConfig = rest;
    }
  }
  next.nameToPaths = {};
  for (const key in nameToPaths) {
    next.nameToPaths[key] = [...nameToPaths[key]];
  }
  const { fontsParsed, getCSS, tokensParsed, themeConfig, ...cleanedConfig } = next.tamaguiConfig;
  return {
    components,
    nameToPaths,
    tamaguiConfig: cleanedConfig
  };
}
export {
  generateTamaguiStudioConfig,
  generateTamaguiStudioConfigSync,
  generateTamaguiThemes
};
//# sourceMappingURL=generateTamaguiStudioConfig.js.map
