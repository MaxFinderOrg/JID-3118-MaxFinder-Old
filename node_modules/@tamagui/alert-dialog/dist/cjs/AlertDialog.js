"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var AlertDialog_exports = {};
__export(AlertDialog_exports, {
  AlertDialog: () => AlertDialog,
  AlertDialogAction: () => AlertDialogAction,
  AlertDialogCancel: () => AlertDialogCancel,
  AlertDialogContent: () => AlertDialogContent,
  AlertDialogDescription: () => AlertDialogDescription,
  AlertDialogOverlay: () => AlertDialogOverlay,
  AlertDialogPortal: () => AlertDialogPortal,
  AlertDialogTitle: () => AlertDialogTitle,
  AlertDialogTrigger: () => AlertDialogTrigger,
  createAlertDialogScope: () => createAlertDialogScope
});
module.exports = __toCommonJS(AlertDialog_exports);
var import_jsx_runtime = require("react/jsx-runtime");
var import_compose_refs = require("@tamagui/compose-refs");
var import_core = require("@tamagui/core");
var import_create_context = require("@tamagui/create-context");
var import_dialog = require("@tamagui/dialog");
var import_use_controllable_state = require("@tamagui/use-controllable-state");
var React = __toESM(require("react"));
var import_react_native = require("react-native");
const ROOT_NAME = "AlertDialog";
const [createAlertDialogContext, createAlertDialogScope] = (0, import_create_context.createContextScope)(ROOT_NAME, [
  import_dialog.createDialogScope
]);
const useDialogScope = (0, import_dialog.createDialogScope)();
const TRIGGER_NAME = "AlertDialogTrigger";
const NativeAlertDialogTriggerFrame = (0, import_core.styled)(import_core.View, {
  name: TRIGGER_NAME
});
const AlertDialogTrigger = React.forwardRef(
  (props, forwardedRef) => {
    if (props["__native"]) {
      const { __native, onPress, __onPress, ...rest } = props;
      return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
        NativeAlertDialogTriggerFrame,
        {
          ...rest,
          onPress: (0, import_core.composeEventHandlers)(onPress, __onPress)
        }
      );
    }
    const { __scopeAlertDialog, ...triggerProps } = props;
    const dialogScope = useDialogScope(__scopeAlertDialog);
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_dialog.DialogTrigger, { ...dialogScope, ...triggerProps, ref: forwardedRef });
  }
);
AlertDialogTrigger.displayName = TRIGGER_NAME;
const PORTAL_NAME = "AlertDialogPortal";
const AlertDialogPortal = (props) => {
  const { __scopeAlertDialog, ...portalProps } = props;
  const dialogScope = useDialogScope(__scopeAlertDialog);
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_dialog.DialogPortal, { ...dialogScope, ...portalProps });
};
AlertDialogPortal.displayName = PORTAL_NAME;
const OVERLAY_NAME = "AlertDialogOverlay";
const AlertDialogOverlayFrame = (0, import_core.styled)(import_dialog.DialogOverlayFrame, {
  name: OVERLAY_NAME
});
const AlertDialogOverlay = AlertDialogOverlayFrame.extractable(
  React.forwardRef(
    (props, forwardedRef) => {
      const { __scopeAlertDialog, ...overlayProps } = props;
      const dialogScope = useDialogScope(__scopeAlertDialog);
      return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_dialog.DialogOverlay, { ...dialogScope, ...overlayProps, ref: forwardedRef });
    }
  )
);
AlertDialogOverlay.displayName = OVERLAY_NAME;
const CONTENT_NAME = "AlertDialogContent";
const [AlertDialogContentProvider, useAlertDialogContentContext] = createAlertDialogContext(CONTENT_NAME);
const AlertDialogContent = React.forwardRef(
  (props, forwardedRef) => {
    const { __scopeAlertDialog, children, ...contentProps } = props;
    const dialogScope = useDialogScope(__scopeAlertDialog);
    const contentRef = React.useRef(null);
    const composedRefs = (0, import_compose_refs.useComposedRefs)(forwardedRef, contentRef);
    const cancelRef = React.useRef(null);
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      import_dialog.DialogWarningProvider,
      {
        contentName: CONTENT_NAME,
        titleName: TITLE_NAME,
        docsSlug: "alert-dialog",
        children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(AlertDialogContentProvider, { scope: __scopeAlertDialog, cancelRef, children: /* @__PURE__ */ (0, import_jsx_runtime.jsxs)(
          import_dialog.DialogContent,
          {
            role: "alertdialog",
            ...dialogScope,
            ...contentProps,
            ref: composedRefs,
            onOpenAutoFocus: (0, import_core.composeEventHandlers)(
              contentProps.onOpenAutoFocus,
              (event) => {
                var _a;
                event.preventDefault();
                if (import_core.isWeb) {
                  (_a = cancelRef.current) == null ? void 0 : _a.focus({ preventScroll: true });
                }
              }
            ),
            onPointerDownOutside: (event) => event.preventDefault(),
            onInteractOutside: (event) => event.preventDefault(),
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_core.Slottable, { children }),
              process.env.NODE_ENV === "development" && /* @__PURE__ */ (0, import_jsx_runtime.jsx)(DescriptionWarning, { contentRef })
            ]
          }
        ) })
      }
    );
  }
);
AlertDialogContent.displayName = CONTENT_NAME;
const TITLE_NAME = "AlertDialogTitle";
const AlertDialogTitle = React.forwardRef(
  (props, forwardedRef) => {
    const { __scopeAlertDialog, ...titleProps } = props;
    const dialogScope = useDialogScope(__scopeAlertDialog);
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_dialog.DialogTitle, { ...dialogScope, ...titleProps, ref: forwardedRef });
  }
);
AlertDialogTitle.displayName = TITLE_NAME;
const DESCRIPTION_NAME = "AlertDialogDescription";
const AlertDialogDescription = React.forwardRef((props, forwardedRef) => {
  const { __scopeAlertDialog, ...descriptionProps } = props;
  const dialogScope = useDialogScope(__scopeAlertDialog);
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_dialog.DialogDescription, { ...dialogScope, ...descriptionProps, ref: forwardedRef });
});
AlertDialogDescription.displayName = DESCRIPTION_NAME;
const ACTION_NAME = "AlertDialogAction";
const AlertDialogAction = React.forwardRef(
  (props, forwardedRef) => {
    const { __scopeAlertDialog, ...actionProps } = props;
    const dialogScope = useDialogScope(__scopeAlertDialog);
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_dialog.DialogClose, { ...dialogScope, ...actionProps, ref: forwardedRef });
  }
);
AlertDialogAction.displayName = ACTION_NAME;
const CANCEL_NAME = "AlertDialogCancel";
const AlertDialogCancel = React.forwardRef(
  (props, forwardedRef) => {
    const { __scopeAlertDialog, ...cancelProps } = props;
    const { cancelRef } = useAlertDialogContentContext(CANCEL_NAME, __scopeAlertDialog);
    const dialogScope = useDialogScope(__scopeAlertDialog);
    const ref = (0, import_compose_refs.useComposedRefs)(forwardedRef, cancelRef);
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_dialog.DialogClose, { ...dialogScope, ...cancelProps, ref });
  }
);
AlertDialogCancel.displayName = CANCEL_NAME;
const DescriptionWarning = ({ contentRef }) => {
  if (process.env.NODE_ENV === "development") {
    React.useEffect(() => {
      var _a;
      if (!import_core.isWeb)
        return;
      const hasDescription = document.getElementById(
        // @ts-ignore
        // eslint-disable-next-line @typescript-eslint/no-non-null-asserted-optional-chain
        (_a = contentRef.current) == null ? void 0 : _a.getAttribute("aria-describedby")
      );
      if (!hasDescription) {
        console.warn(`\`${CONTENT_NAME}\` requires a description for the component to be accessible for screen reader users.
  
        You can add a description to the \`${CONTENT_NAME}\` by passing a \`${DESCRIPTION_NAME}\` component as a child, which also benefits sighted users by adding visible context to the dialog.
        
        Alternatively, you can use your own component as a description by assigning it an \`id\` and passing the same value to the \`aria-describedby\` prop in \`${CONTENT_NAME}\`. If the description is confusing or duplicative for sighted users, you can use the \`@radix-ui/react-visually-hidden\` primitive as a wrapper around your description component.
        
        For more information, see https://tamagui.dev/docs/components/alert-dialog`);
      }
    }, [contentRef]);
  }
  return null;
};
const AlertDialogInner = (props) => {
  const { __scopeAlertDialog, native, ...alertDialogProps } = props;
  const dialogScope = useDialogScope(__scopeAlertDialog);
  if (process.env.TAMAGUI_TARGET === "native") {
    const [open, setOpen] = (0, import_use_controllable_state.useControllableState)({
      prop: props.open,
      defaultProp: props.defaultOpen || false,
      onChange: props.onOpenChange,
      transition: true
    });
    let triggerElement = null;
    let title = "";
    let description = "";
    const buttons = [];
    forEachChildDeep(React.Children.toArray(props.children), (child) => {
      if (!React.isValidElement(child))
        return false;
      const name = (0, import_core.isTamaguiElement)(child) ? child.type.staticConfig.componentName : child.type["displayName"];
      switch (name) {
        case TRIGGER_NAME: {
          triggerElement = React.cloneElement(child, {
            __native: true
          });
          return false;
        }
        case TITLE_NAME: {
          title = getStringChildren(child);
          return false;
        }
        case DESCRIPTION_NAME: {
          description = getStringChildren(child);
          return false;
        }
        case ACTION_NAME:
        case CANCEL_NAME: {
          const style = name === ACTION_NAME ? "default" : "cancel";
          const text = getStringChildren(child);
          const onPress = () => {
            var _a;
            const childProps = child.props;
            (_a = childProps == null ? void 0 : childProps.onPress) == null ? void 0 : _a.call(childProps, { native: true });
            setOpen(false);
          };
          buttons.push({
            style,
            text,
            // @ts-ignore
            onPress
          });
          return false;
        }
        default: {
          return true;
        }
      }
    });
    (0, import_core.useIsomorphicLayoutEffect)(() => {
      if (!open || !native)
        return;
      if (title || description) {
        import_react_native.Alert.alert(title, description, buttons);
      }
    }, [native, open]);
    if (native) {
      return React.cloneElement(triggerElement, {
        __onPress: () => {
          setOpen(true);
        }
      });
    }
  }
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_dialog.Dialog, { ...dialogScope, ...alertDialogProps, modal: true });
};
function forEachChildDeep(children, onChild) {
  for (const child of children) {
    if (!React.isValidElement(child))
      continue;
    if (!onChild(child))
      continue;
    if (child.props.children) {
      forEachChildDeep(React.Children.toArray(child.props.children), onChild);
    }
  }
}
function getStringChildren(child) {
  let string = "";
  forEachChildDeep(React.Children.toArray(child), (child2) => {
    if (typeof child2.props.children === "string") {
      string = child2.props.children;
      return false;
    }
    return true;
  });
  return string;
}
const AlertDialog = (0, import_core.withStaticProperties)(AlertDialogInner, {
  Trigger: AlertDialogTrigger,
  Portal: AlertDialogPortal,
  Overlay: AlertDialogOverlay,
  Content: AlertDialogContent,
  Action: AlertDialogAction,
  Cancel: AlertDialogCancel,
  Title: AlertDialogTitle,
  Description: AlertDialogDescription
});
AlertDialog.displayName = ROOT_NAME;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogOverlay,
  AlertDialogPortal,
  AlertDialogTitle,
  AlertDialogTrigger,
  createAlertDialogScope
});
//# sourceMappingURL=AlertDialog.js.map
