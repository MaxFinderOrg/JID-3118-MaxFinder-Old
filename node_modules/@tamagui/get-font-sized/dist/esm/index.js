import { getTokens } from "@tamagui/core";
const getFontSized = (sizeTokenIn = "$true", { font, fontFamily, props }) => {
  var _a, _b, _c, _d, _e, _f;
  if (!font) {
    if (process.env.NODE_ENV === "development") {
      console.warn(
        `Warning: No font found in props`,
        { ...props },
        `For a sized text component, you either need to set fontFamily directly, or through the "defaultFont" setting in your createTamagui config.`
      );
    }
    return;
  }
  const sizeToken = sizeTokenIn === "$true" ? getDefaultSizeToken(font) : sizeTokenIn;
  const fontSize = font.size[sizeToken];
  const lineHeight = (_a = font.lineHeight) == null ? void 0 : _a[sizeToken];
  const fontWeight = (_b = font.weight) == null ? void 0 : _b[sizeToken];
  const letterSpacing = (_c = font.letterSpacing) == null ? void 0 : _c[sizeToken];
  const fontStyle = (_d = font.style) == null ? void 0 : _d[sizeToken];
  const textTransform = (_e = font.transform) == null ? void 0 : _e[sizeToken];
  const color = (_f = font.color) == null ? void 0 : _f[sizeToken];
  const style = {
    color,
    fontStyle,
    textTransform,
    fontFamily,
    fontWeight,
    letterSpacing,
    fontSize,
    lineHeight
  };
  if (process.env.NODE_ENV === "development") {
    if (props["debug"] && props["debug"] === "verbose") {
      console.groupCollapsed("  \u{1F539} getFontSized", sizeTokenIn, sizeToken);
      console.log({ style, props, font });
      console.groupEnd();
    }
  }
  return style;
};
const cache = /* @__PURE__ */ new WeakMap();
function getDefaultSizeToken(font) {
  if (typeof font === "object" && cache.has(font)) {
    return cache.get(font);
  }
  const sizeTokens = "$true" in font.size ? font.size : getTokens().size;
  const sizeDefault = sizeTokens["$true"];
  const sizeDefaultSpecific = sizeDefault ? Object.keys(sizeTokens).find(
    (x) => x !== "$true" && sizeTokens[x]["val"] === sizeDefault["val"]
  ) : null;
  if (!sizeDefault || !sizeDefaultSpecific) {
    if (process.env.NODE_ENV === "development") {
      console.warn(`No default size is set in your tokens for the "true" key, fonts will be inconsistent.

      Fix this by having consistent tokens across fonts and sizes and setting a true key for your size tokens, or
      set true keys for all your font tokens: "size", "lineHeight", "fontStyle", etc.`);
    }
    return Object.keys(font.size)[3];
  }
  cache.set(font, sizeDefaultSpecific);
  return sizeDefaultSpecific;
}
export {
  getFontSized
};
//# sourceMappingURL=index.js.map
