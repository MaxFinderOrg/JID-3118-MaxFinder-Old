import { useComposedRefs } from "@tamagui/compose-refs";
import { usePrevious } from "@tamagui/use-previous";
import * as React from "react";
const BubbleSelect = React.forwardRef((props, forwardedRef) => {
  const { value, ...selectProps } = props;
  const ref = React.useRef(null);
  const composedRefs = useComposedRefs(forwardedRef, ref);
  const prevValue = usePrevious(value);
  React.useEffect(() => {
    const select = ref.current;
    const selectProto = window.HTMLSelectElement.prototype;
    const descriptor = Object.getOwnPropertyDescriptor(
      selectProto,
      "value"
    );
    const setValue = descriptor.set;
    if (prevValue !== value && setValue) {
      const event = new Event("change", { bubbles: true });
      setValue.call(select, value);
      select.dispatchEvent(event);
    }
  }, [prevValue, value]);
  return null;
});
//# sourceMappingURL=BubbleSelect.js.map
