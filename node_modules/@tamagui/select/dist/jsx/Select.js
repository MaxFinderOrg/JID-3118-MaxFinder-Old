import { Adapt, useAdaptParent } from "@tamagui/adapt";
import { useComposedRefs } from "@tamagui/compose-refs";
import {
  getVariableValue,
  isWeb,
  styled,
  useGet,
  useIsomorphicLayoutEffect,
  withStaticProperties
} from "@tamagui/core";
import { getSpace } from "@tamagui/get-token";
import { ListItem } from "@tamagui/list-item";
import { PortalHost } from "@tamagui/portal";
import { Separator } from "@tamagui/separator";
import { Sheet, SheetController } from "@tamagui/sheet";
import { ThemeableStack, XStack, YStack } from "@tamagui/stacks";
import { Paragraph, SizableText } from "@tamagui/text";
import { useControllableState } from "@tamagui/use-controllable-state";
import * as React from "react";
import { SELECT_NAME } from "./constants";
import {
  SelectItemParentProvider,
  SelectProvider,
  createSelectContext,
  useSelectContext,
  useSelectItemParentContext
} from "./context";
import { SelectContent } from "./SelectContent";
import { SelectInlineImpl } from "./SelectImpl";
import { SelectItem, useSelectItemContext } from "./SelectItem";
import { SelectScrollDownButton, SelectScrollUpButton } from "./SelectScrollButton";
import { SelectTrigger } from "./SelectTrigger";
import { SelectViewport } from "./SelectViewport";
import {
  useSelectBreakpointActive,
  useShowSelectSheet
} from "./useSelectBreakpointActive";
const VALUE_NAME = "SelectValue";
const SelectValueFrame = styled(SizableText, {
  name: VALUE_NAME,
  userSelect: "none"
});
const SelectValue = SelectValueFrame.styleable(function SelectValue2({
  __scopeSelect,
  children: childrenProp,
  placeholder,
  ...props
}, forwardedRef) {
  const context = useSelectContext(VALUE_NAME, __scopeSelect);
  const itemParentContext = useSelectItemParentContext(VALUE_NAME, __scopeSelect);
  const composedRefs = useComposedRefs(forwardedRef, context.onValueNodeChange);
  const children = childrenProp ?? context.selectedItem;
  const isEmptyValue = context.value == null || context.value === "";
  const selectValueChildren = isEmptyValue ? placeholder ?? children : children;
  return <SelectValueFrame
    {...!props.unstyled && {
      size: itemParentContext.size,
      ellipse: true
    }}
    ref={composedRefs}
    pointerEvents="none"
    {...props}
  >{unwrapSelectItem(selectValueChildren)}</SelectValueFrame>;
});
function unwrapSelectItem(selectValueChildren) {
  return React.Children.map(selectValueChildren, (child) => {
    if (child) {
      if (child.type?.staticConfig?.componentName === ITEM_TEXT_NAME) {
        return child.props.children;
      }
      if (child.props?.children) {
        return unwrapSelectItem(child.props.children);
      }
    }
    return child;
  });
}
const SelectIcon = styled(XStack, {
  name: "SelectIcon",
  // @ts-ignore
  "aria-hidden": true,
  children: <Paragraph>{"\u25BC"}</Paragraph>
});
const ITEM_TEXT_NAME = "SelectItemText";
const SelectItemTextFrame = styled(SizableText, {
  name: ITEM_TEXT_NAME,
  variants: {
    unstyled: {
      false: {
        userSelect: "none",
        color: "$color",
        ellipse: true
      }
    }
  },
  defaultVariants: {
    unstyled: false
  }
});
const SelectItemText = React.forwardRef(
  (props, forwardedRef) => {
    const { __scopeSelect, className, ...itemTextProps } = props;
    const context = useSelectContext(ITEM_TEXT_NAME, __scopeSelect);
    const itemParentContext = useSelectItemParentContext(ITEM_TEXT_NAME, __scopeSelect);
    const ref = React.useRef(null);
    const composedRefs = useComposedRefs(forwardedRef, ref);
    const itemContext = useSelectItemContext(ITEM_TEXT_NAME, __scopeSelect);
    const contents = React.useMemo(
      () => <SelectItemTextFrame
        className={className}
        size={itemParentContext.size}
        id={itemContext.textId}
        {...itemTextProps}
        ref={composedRefs}
      />,
      // eslint-disable-next-line react-hooks/exhaustive-deps
      [props, itemParentContext.size, className, itemContext.textId]
    );
    React.useEffect(() => {
      if (itemParentContext.initialValue === itemContext.value && !context.selectedIndex) {
        context.setSelectedItem(contents);
      }
    }, []);
    React.useEffect(() => {
      return itemParentContext.valueSubscribe((val) => {
        if (val === itemContext.value) {
          context.setSelectedItem(contents);
        }
      });
    }, [itemContext.value]);
    if (itemParentContext.shouldRenderWebNative) {
      return <>{props.children}</>;
    }
    return <>
      {contents}
      {
        /* Portal an option in the bubble select */
      }
      {
        /* {context.bubbleSelect
         ? ReactDOM.createPortal(
             // we use `.textContent` because `option` only support `string` or `number`
             <option value={itemContext.value}>{ref.current?.textContent}</option>,
             context.bubbleSelect
           )
         : null} */
      }
    </>;
  }
);
SelectItemText.displayName = ITEM_TEXT_NAME;
const ITEM_INDICATOR_NAME = "SelectItemIndicator";
const SelectItemIndicatorFrame = styled(XStack, {
  name: ITEM_TEXT_NAME
});
const SelectItemIndicator = React.forwardRef(
  (props, forwardedRef) => {
    const { __scopeSelect, ...itemIndicatorProps } = props;
    const context = useSelectItemParentContext(ITEM_INDICATOR_NAME, __scopeSelect);
    const itemContext = useSelectItemContext(ITEM_INDICATOR_NAME, __scopeSelect);
    if (context.shouldRenderWebNative) {
      return null;
    }
    return itemContext.isSelected ? <SelectItemIndicatorFrame aria-hidden {...itemIndicatorProps} ref={forwardedRef} /> : null;
  }
);
SelectItemIndicator.displayName = ITEM_INDICATOR_NAME;
const GROUP_NAME = "SelectGroup";
const [SelectGroupContextProvider, useSelectGroupContext] = createSelectContext(GROUP_NAME);
const SelectGroupFrame = styled(YStack, {
  name: GROUP_NAME,
  width: "100%"
});
const NativeSelectTextFrame = styled(SizableText, {
  tag: "select",
  backgroundColor: "$background",
  borderColor: "$borderColor",
  hoverStyle: {
    backgroundColor: "$backgroundHover"
  }
});
const NativeSelectFrame = styled(ThemeableStack, {
  name: "NativeSelect",
  bordered: true,
  userSelect: "none",
  outlineWidth: 0,
  paddingRight: 10,
  variants: {
    size: {
      "...size": (val, extras) => {
        const { tokens } = extras;
        const paddingHorizontal = getVariableValue(tokens.space[val]);
        return {
          borderRadius: tokens.radius[val] ?? val,
          minHeight: tokens.size[val],
          paddingRight: paddingHorizontal + 20,
          paddingLeft: paddingHorizontal,
          paddingVertical: getSpace(val, {
            shift: -3
          })
        };
      }
    }
  },
  defaultVariants: {
    size: "$2"
  }
});
const SelectGroup = React.forwardRef(
  (props, forwardedRef) => {
    const { __scopeSelect, ...groupProps } = props;
    const groupId = React.useId();
    const context = useSelectContext(GROUP_NAME, __scopeSelect);
    const itemParentContext = useSelectItemParentContext(GROUP_NAME, __scopeSelect);
    const size = itemParentContext.size ?? "$true";
    const nativeSelectRef = React.useRef(null);
    const content = function() {
      if (itemParentContext.shouldRenderWebNative) {
        return (
          // @ts-expect-error until we support typing based on tag
          <NativeSelectFrame asChild size={size} value={context.value}><NativeSelectTextFrame
            onChange={(event) => {
              itemParentContext.onChange(event.currentTarget.value);
            }}
            size={size}
            ref={nativeSelectRef}
            style={{
              color: "var(--color)",
              // @ts-ignore
              appearance: "none"
            }}
          >{props.children}</NativeSelectTextFrame></NativeSelectFrame>
        );
      }
      return <SelectGroupFrame
        role="group"
        aria-labelledby={groupId}
        {...groupProps}
        ref={forwardedRef}
      />;
    }();
    return <SelectGroupContextProvider scope={__scopeSelect} id={groupId || ""}>{content}</SelectGroupContextProvider>;
  }
);
SelectGroup.displayName = GROUP_NAME;
const LABEL_NAME = "SelectLabel";
const SelectLabel = React.forwardRef(
  (props, forwardedRef) => {
    const { __scopeSelect, ...labelProps } = props;
    const context = useSelectItemParentContext(LABEL_NAME, __scopeSelect);
    const groupContext = useSelectGroupContext(LABEL_NAME, __scopeSelect);
    if (context.shouldRenderWebNative) {
      return null;
    }
    return <ListItem
      tag="div"
      componentName={LABEL_NAME}
      fontWeight="800"
      id={groupContext.id}
      size={context.size}
      {...labelProps}
      ref={forwardedRef}
    />;
  }
);
SelectLabel.displayName = LABEL_NAME;
const SelectSeparator = styled(Separator, {
  name: "SelectSeparator"
});
const SelectSheetController = (props) => {
  const context = useSelectContext("SelectSheetController", props.__scopeSelect);
  const showSheet = useShowSelectSheet(context);
  const breakpointActive = useSelectBreakpointActive(context.sheetBreakpoint);
  const getShowSheet = useGet(showSheet);
  return <SheetController
    onOpenChange={(val) => {
      if (getShowSheet()) {
        props.onOpenChange(val);
      }
    }}
    open={context.open}
    hidden={breakpointActive === false}
  >{props.children}</SheetController>;
};
const SelectSheetImpl = (props) => {
  return <>{props.children}</>;
};
const Select = withStaticProperties(
  (props) => {
    const {
      __scopeSelect,
      native,
      children,
      open: openProp,
      defaultOpen,
      onOpenChange,
      value: valueProp,
      defaultValue,
      onValueChange,
      size: sizeProp = "$true",
      dir
    } = props;
    const id = React.useId();
    const scopeKey = __scopeSelect ? Object.keys(__scopeSelect)[0] ?? id : id;
    const { when, AdaptProvider } = useAdaptParent({
      Contents: React.useCallback(
        () => <PortalHost name={`${scopeKey}SheetContents`} />,
        [scopeKey]
      )
    });
    const sheetBreakpoint = when;
    const isSheet = useSelectBreakpointActive(sheetBreakpoint);
    const SelectImpl = isSheet || !isWeb ? SelectSheetImpl : SelectInlineImpl;
    const forceUpdate = React.useReducer(() => ({}), {})[1];
    const [selectedItem, setSelectedItem] = React.useState(null);
    const [open, setOpen] = useControllableState({
      prop: openProp,
      defaultProp: defaultOpen || false,
      onChange: onOpenChange
    });
    const [value, setValue] = useControllableState({
      prop: valueProp,
      defaultProp: defaultValue || "",
      onChange: onValueChange,
      transition: true
    });
    React.useEffect(() => {
      if (open) {
        emitValue(value);
      }
    }, [open]);
    const [activeIndex, setActiveIndex] = React.useState(0);
    const [emitValue, valueSubscribe] = useEmitter();
    const [emitActiveIndex, activeIndexSubscribe] = useEmitter();
    const selectedIndexRef = React.useRef(null);
    const activeIndexRef = React.useRef(null);
    const listContentRef = React.useRef([]);
    const [selectedIndex, setSelectedIndex] = React.useState(0);
    const [valueNode, setValueNode] = React.useState(null);
    useIsomorphicLayoutEffect(() => {
      selectedIndexRef.current = selectedIndex;
      activeIndexRef.current = activeIndex;
    });
    const shouldRenderWebNative = isWeb && (native === true || native === "web" || Array.isArray(native) && native.includes("web"));
    return <AdaptProvider><SelectItemParentProvider
      scope={__scopeSelect}
      initialValue={React.useMemo(() => value, [])}
      size={sizeProp}
      activeIndexSubscribe={activeIndexSubscribe}
      valueSubscribe={valueSubscribe}
      setOpen={setOpen}
      onChange={React.useCallback((val) => {
        setValue(val);
        emitValue(val);
      }, [])}
      setSelectedIndex={setSelectedIndex}
      setValueAtIndex={React.useCallback((index, value2) => {
        listContentRef.current[index] = value2;
      }, [])}
      shouldRenderWebNative={shouldRenderWebNative}
    ><SelectProvider
      scope={__scopeSelect}
      dir={dir}
      blockSelection={false}
      fallback={false}
      selectedItem={selectedItem}
      setSelectedItem={setSelectedItem}
      forceUpdate={forceUpdate}
      valueNode={valueNode}
      onValueNodeChange={setValueNode}
      scopeKey={scopeKey}
      sheetBreakpoint={sheetBreakpoint}
      activeIndex={activeIndex}
      selectedIndex={selectedIndex}
      setActiveIndex={React.useCallback((index) => {
        setActiveIndex(index);
        if (typeof index === "number") {
          emitActiveIndex(index);
        }
      }, [])}
      value={value}
      open={open}
      native={native}
    ><SelectSheetController onOpenChange={setOpen} __scopeSelect={__scopeSelect}>{shouldRenderWebNative ? children : <SelectImpl
      activeIndexRef={activeIndexRef}
      listContentRef={listContentRef}
      selectedIndexRef={selectedIndexRef}
      {...props}
      open={open}
      value={value}
    >{children}</SelectImpl>}</SelectSheetController></SelectProvider></SelectItemParentProvider></AdaptProvider>;
  },
  {
    Adapt,
    Content: SelectContent,
    Group: SelectGroup,
    Icon: SelectIcon,
    Item: SelectItem,
    ItemIndicator: SelectItemIndicator,
    ItemText: SelectItemText,
    Label: SelectLabel,
    ScrollDownButton: SelectScrollDownButton,
    ScrollUpButton: SelectScrollUpButton,
    Trigger: SelectTrigger,
    Value: SelectValue,
    Viewport: SelectViewport,
    Sheet: Sheet.Controlled
  }
);
function useEmitter() {
  const listeners = React.useRef();
  if (!listeners.current) {
    listeners.current = /* @__PURE__ */ new Set();
  }
  const emit = (value) => {
    listeners.current.forEach((l) => l(value));
  };
  const subscribe = React.useCallback((listener) => {
    listeners.current.add(listener);
    return () => {
      listeners.current.delete(listener);
    };
  }, []);
  return [emit, subscribe];
}
Select.displayName = SELECT_NAME;
export {
  Select,
  SelectGroupFrame,
  SelectIcon,
  SelectItemTextFrame,
  SelectSeparator
};
//# sourceMappingURL=Select.js.map
