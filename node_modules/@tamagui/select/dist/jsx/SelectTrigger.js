import { useComposedRefs } from "@tamagui/compose-refs";
import { ListItem } from "@tamagui/list-item";
import * as React from "react";
import { useSelectContext, useSelectItemParentContext } from "./context";
const TRIGGER_NAME = "SelectTrigger";
const SelectTrigger = React.forwardRef(
  function SelectTrigger2(props, forwardedRef) {
    const { __scopeSelect, disabled = false, unstyled = false, ...triggerProps } = props;
    const context = useSelectContext(TRIGGER_NAME, __scopeSelect);
    const itemParentContext = useSelectItemParentContext(TRIGGER_NAME, __scopeSelect);
    const composedRefs = useComposedRefs(
      forwardedRef,
      context.floatingContext?.refs.setReference
    );
    if (itemParentContext.shouldRenderWebNative) {
      return null;
    }
    return <ListItem
      componentName={TRIGGER_NAME}
      unstyled={unstyled}
      {...!unstyled && {
        backgrounded: true,
        radiused: true,
        hoverTheme: true,
        pressTheme: true,
        focusable: true,
        focusStyle: {
          outlineStyle: "solid",
          outlineWidth: 2,
          outlineColor: "$borderColorFocus"
        },
        borderWidth: 1
      }}
      size={itemParentContext.size}
      aria-expanded={context.open}
      aria-autocomplete="none"
      dir={context.dir}
      disabled={disabled}
      data-disabled={disabled ? "" : void 0}
      {...triggerProps}
      ref={composedRefs}
      {...process.env.TAMAGUI_TARGET === "web" && itemParentContext.interactions ? {
        ...itemParentContext.interactions.getReferenceProps(),
        onMouseDown() {
          context.floatingContext?.update();
          itemParentContext.setOpen(!context.open);
        }
      } : {
        onPress() {
          itemParentContext.setOpen(!context.open);
        }
      }}
    />;
  }
);
export {
  SelectTrigger
};
//# sourceMappingURL=SelectTrigger.js.map
