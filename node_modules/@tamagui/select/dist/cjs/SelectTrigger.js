"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var SelectTrigger_exports = {};
__export(SelectTrigger_exports, {
  SelectTrigger: () => SelectTrigger
});
module.exports = __toCommonJS(SelectTrigger_exports);
var import_jsx_runtime = require("react/jsx-runtime");
var import_compose_refs = require("@tamagui/compose-refs");
var import_list_item = require("@tamagui/list-item");
var React = __toESM(require("react"));
var import_context = require("./context");
const TRIGGER_NAME = "SelectTrigger";
const SelectTrigger = React.forwardRef(
  function SelectTrigger2(props, forwardedRef) {
    var _a;
    const { __scopeSelect, disabled = false, unstyled = false, ...triggerProps } = props;
    const context = (0, import_context.useSelectContext)(TRIGGER_NAME, __scopeSelect);
    const itemParentContext = (0, import_context.useSelectItemParentContext)(TRIGGER_NAME, __scopeSelect);
    const composedRefs = (0, import_compose_refs.useComposedRefs)(
      forwardedRef,
      (_a = context.floatingContext) == null ? void 0 : _a.refs.setReference
    );
    if (itemParentContext.shouldRenderWebNative) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      import_list_item.ListItem,
      {
        componentName: TRIGGER_NAME,
        unstyled,
        ...!unstyled && {
          backgrounded: true,
          radiused: true,
          hoverTheme: true,
          pressTheme: true,
          focusable: true,
          focusStyle: {
            outlineStyle: "solid",
            outlineWidth: 2,
            outlineColor: "$borderColorFocus"
          },
          borderWidth: 1
        },
        size: itemParentContext.size,
        "aria-expanded": context.open,
        "aria-autocomplete": "none",
        dir: context.dir,
        disabled,
        "data-disabled": disabled ? "" : void 0,
        ...triggerProps,
        ref: composedRefs,
        ...process.env.TAMAGUI_TARGET === "web" && itemParentContext.interactions ? {
          ...itemParentContext.interactions.getReferenceProps(),
          onMouseDown() {
            var _a2;
            (_a2 = context.floatingContext) == null ? void 0 : _a2.update();
            itemParentContext.setOpen(!context.open);
          }
        } : {
          onPress() {
            itemParentContext.setOpen(!context.open);
          }
        }
      }
    );
  }
);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  SelectTrigger
});
//# sourceMappingURL=SelectTrigger.js.map
