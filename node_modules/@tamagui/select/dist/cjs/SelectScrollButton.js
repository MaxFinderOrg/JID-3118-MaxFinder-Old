"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var SelectScrollButton_exports = {};
__export(SelectScrollButton_exports, {
  SelectScrollDownButton: () => SelectScrollDownButton,
  SelectScrollUpButton: () => SelectScrollUpButton
});
module.exports = __toCommonJS(SelectScrollButton_exports);
var import_jsx_runtime = require("react/jsx-runtime");
var import_react = require("@floating-ui/react");
var import_compose_refs = require("@tamagui/compose-refs");
var import_stacks = require("@tamagui/stacks");
var React = __toESM(require("react"));
var import_react_dom = require("react-dom");
var import_context = require("./context");
const SCROLL_UP_BUTTON_NAME = "SelectScrollUpButton";
const SelectScrollUpButton = React.forwardRef((props, forwardedRef) => {
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
    SelectScrollButtonImpl,
    {
      componentName: SCROLL_UP_BUTTON_NAME,
      ...props,
      dir: "up",
      ref: forwardedRef
    }
  );
});
SelectScrollUpButton.displayName = SCROLL_UP_BUTTON_NAME;
const SCROLL_DOWN_BUTTON_NAME = "SelectScrollDownButton";
const SelectScrollDownButton = React.forwardRef((props, forwardedRef) => {
  return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
    SelectScrollButtonImpl,
    {
      componentName: SCROLL_DOWN_BUTTON_NAME,
      ...props,
      dir: "down",
      ref: forwardedRef
    }
  );
});
SelectScrollDownButton.displayName = SCROLL_DOWN_BUTTON_NAME;
const SelectScrollButtonImpl = React.memo(
  React.forwardRef(
    (props, forwardedRef) => {
      var _a, _b;
      const { __scopeSelect, dir, componentName, ...scrollIndicatorProps } = props;
      const { forceUpdate, open, fallback, setScrollTop, setInnerOffset, ...context } = (0, import_context.useSelectContext)(componentName, __scopeSelect);
      const floatingRef = (_a = context.floatingContext) == null ? void 0 : _a.refs.floating;
      const statusRef = React.useRef("idle");
      const isVisible = context[dir === "down" ? "canScrollDown" : "canScrollUp"];
      const frameRef = React.useRef();
      const { x, y, refs, strategy } = (0, import_react.useFloating)({
        open: open && isVisible,
        strategy: "fixed",
        elements: {
          reference: floatingRef == null ? void 0 : floatingRef.current
        },
        placement: dir === "up" ? "top" : "bottom",
        middleware: [(0, import_react.offset)(({ rects }) => -rects.floating.height)],
        whileElementsMounted: (...args) => (0, import_react.autoUpdate)(...args, { animationFrame: true })
      });
      const composedRef = (0, import_compose_refs.useComposedRefs)(forwardedRef, refs.setFloating);
      if (!isVisible) {
        return null;
      }
      const onScroll = (amount) => {
        const floating = floatingRef;
        if (!floating)
          return;
        if (fallback) {
          if (floating.current) {
            floating.current.scrollTop -= amount;
            (0, import_react_dom.flushSync)(() => {
              var _a2;
              return setScrollTop(((_a2 = floating.current) == null ? void 0 : _a2.scrollTop) ?? 0);
            });
          }
        } else {
          (0, import_react_dom.flushSync)(() => setInnerOffset((value) => value - amount));
        }
      };
      return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
        import_stacks.YStack,
        {
          ref: composedRef,
          componentName,
          "aria-hidden": true,
          ...scrollIndicatorProps,
          zIndex: 1e3,
          position: strategy,
          left: x || 0,
          top: y || 0,
          width: `calc(${(((_b = floatingRef == null ? void 0 : floatingRef.current) == null ? void 0 : _b.offsetWidth) ?? 0) - 2}px)`,
          onPointerEnter: () => {
            statusRef.current = "active";
            let prevNow = Date.now();
            function frame() {
              const element = floatingRef == null ? void 0 : floatingRef.current;
              if (element) {
                const currentNow = Date.now();
                const msElapsed = currentNow - prevNow;
                prevNow = currentNow;
                const pixelsToScroll = msElapsed / 2;
                const remainingPixels = dir === "up" ? element.scrollTop : element.scrollHeight - element.clientHeight - element.scrollTop;
                const scrollRemaining = dir === "up" ? element.scrollTop - pixelsToScroll > 0 : element.scrollTop + pixelsToScroll < element.scrollHeight - element.clientHeight;
                onScroll(
                  dir === "up" ? Math.min(pixelsToScroll, remainingPixels) : Math.max(-pixelsToScroll, -remainingPixels)
                );
                if (scrollRemaining) {
                  frameRef.current = requestAnimationFrame(frame);
                }
              }
            }
            cancelAnimationFrame(frameRef.current);
            frameRef.current = requestAnimationFrame(frame);
          },
          onPointerLeave: () => {
            statusRef.current = "idle";
            cancelAnimationFrame(frameRef.current);
          }
        }
      );
    }
  )
);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  SelectScrollDownButton,
  SelectScrollUpButton
});
//# sourceMappingURL=SelectScrollButton.js.map
