"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var SelectItem_exports = {};
__export(SelectItem_exports, {
  SelectItem: () => SelectItem,
  SelectItemContextProvider: () => SelectItemContextProvider,
  useSelectItemContext: () => useSelectItemContext
});
module.exports = __toCommonJS(SelectItem_exports);
var import_jsx_runtime = require("react/jsx-runtime");
var import_compose_refs = require("@tamagui/compose-refs");
var import_core = require("@tamagui/core");
var import_list_item = require("@tamagui/list-item");
var React = __toESM(require("react"));
var import_context = require("./context");
const ITEM_NAME = "SelectItem";
const [SelectItemContextProvider, useSelectItemContext] = (0, import_context.createSelectContext)(ITEM_NAME);
const SelectItem = React.forwardRef(
  (props, forwardedRef) => {
    const {
      __scopeSelect,
      value,
      disabled = false,
      textValue: textValueProp,
      index,
      ...itemProps
    } = props;
    const context = (0, import_context.useSelectItemParentContext)(ITEM_NAME, __scopeSelect);
    const {
      setSelectedIndex,
      listRef,
      setOpen,
      onChange,
      activeIndexSubscribe,
      valueSubscribe,
      allowMouseUpRef,
      allowSelectRef,
      setValueAtIndex,
      selectTimeoutRef,
      dataRef,
      interactions,
      shouldRenderWebNative,
      size,
      initialValue
    } = context;
    const [isSelected, setSelected] = React.useState(initialValue === value);
    const [isActive, setActive] = React.useState(false);
    React.useEffect(() => {
      return activeIndexSubscribe((i) => {
        setActive(index === i);
      });
    }, [index]);
    React.useEffect(() => {
      return valueSubscribe((val) => {
        setSelected(val === value);
      });
    }, [value]);
    const textId = React.useId();
    const composedRefs = (0, import_compose_refs.useComposedRefs)(forwardedRef, (node) => {
      if (!import_core.isWeb)
        return;
      if (node instanceof HTMLElement) {
        if (listRef) {
          listRef.current[index] = node;
        }
      }
    });
    (0, import_core.useIsomorphicLayoutEffect)(() => {
      setValueAtIndex(index, value);
    }, [index, setValueAtIndex, value]);
    function handleSelect() {
      setSelectedIndex(index);
      onChange(value);
      setOpen(false);
    }
    const selectItemProps = interactions ? interactions.getItemProps({
      ...import_core.isWebTouchable ? {
        onTouchStart() {
          allowSelectRef.current = true;
          allowMouseUpRef.current = false;
        }
      } : {
        onTouchMove() {
          allowSelectRef.current = true;
          allowMouseUpRef.current = false;
        },
        onTouchEnd() {
          allowSelectRef.current = false;
          allowMouseUpRef.current = true;
        }
      },
      onKeyDown(event) {
        if (event.key === "Enter" || event.key === " " && !(dataRef == null ? void 0 : dataRef.current.typing)) {
          event.preventDefault();
          handleSelect();
        } else {
          allowSelectRef.current = true;
        }
      },
      onClick() {
        if (allowSelectRef.current) {
          handleSelect();
        }
      },
      onMouseUp() {
        if (!allowMouseUpRef.current) {
          return;
        }
        if (allowSelectRef.current) {
          handleSelect();
        }
        clearTimeout(selectTimeoutRef.current);
        selectTimeoutRef.current = setTimeout(() => {
          allowSelectRef.current = true;
        });
      }
    }) : {
      onPress: handleSelect
    };
    (0, import_core.useIsomorphicLayoutEffect)(() => {
      var _a;
      if (isActive) {
        (_a = listRef == null ? void 0 : listRef.current[index]) == null ? void 0 : _a.focus();
      }
    }, [isActive]);
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      SelectItemContextProvider,
      {
        scope: __scopeSelect,
        value,
        textId: textId || "",
        isSelected,
        children: shouldRenderWebNative ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)("option", { value, children: props.children }) : /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
          import_list_item.ListItem,
          {
            tag: "div",
            componentName: ITEM_NAME,
            ref: composedRefs,
            "aria-labelledby": textId,
            "aria-selected": isSelected,
            "data-state": isSelected ? "active" : "inactive",
            "aria-disabled": disabled || void 0,
            "data-disabled": disabled ? "" : void 0,
            tabIndex: disabled ? void 0 : -1,
            ...!props.unstyled && {
              backgrounded: true,
              pressTheme: true,
              hoverTheme: true,
              focusTheme: true,
              cursor: "default",
              outlineWidth: 0,
              size,
              ellipse: true
            },
            ...itemProps,
            ...selectItemProps
          }
        )
      }
    );
  }
);
SelectItem.displayName = ITEM_NAME;
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  SelectItem,
  SelectItemContextProvider,
  useSelectItemContext
});
//# sourceMappingURL=SelectItem.js.map
