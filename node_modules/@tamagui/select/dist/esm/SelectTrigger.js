import { jsx } from "react/jsx-runtime";
import { useComposedRefs } from "@tamagui/compose-refs";
import { ListItem } from "@tamagui/list-item";
import * as React from "react";
import { useSelectContext, useSelectItemParentContext } from "./context";
const TRIGGER_NAME = "SelectTrigger";
const SelectTrigger = React.forwardRef(
  function SelectTrigger2(props, forwardedRef) {
    var _a;
    const { __scopeSelect, disabled = false, unstyled = false, ...triggerProps } = props;
    const context = useSelectContext(TRIGGER_NAME, __scopeSelect);
    const itemParentContext = useSelectItemParentContext(TRIGGER_NAME, __scopeSelect);
    const composedRefs = useComposedRefs(
      forwardedRef,
      (_a = context.floatingContext) == null ? void 0 : _a.refs.setReference
    );
    if (itemParentContext.shouldRenderWebNative) {
      return null;
    }
    return /* @__PURE__ */ jsx(
      ListItem,
      {
        componentName: TRIGGER_NAME,
        unstyled,
        ...!unstyled && {
          backgrounded: true,
          radiused: true,
          hoverTheme: true,
          pressTheme: true,
          focusable: true,
          focusStyle: {
            outlineStyle: "solid",
            outlineWidth: 2,
            outlineColor: "$borderColorFocus"
          },
          borderWidth: 1
        },
        size: itemParentContext.size,
        "aria-expanded": context.open,
        "aria-autocomplete": "none",
        dir: context.dir,
        disabled,
        "data-disabled": disabled ? "" : void 0,
        ...triggerProps,
        ref: composedRefs,
        ...process.env.TAMAGUI_TARGET === "web" && itemParentContext.interactions ? {
          ...itemParentContext.interactions.getReferenceProps(),
          onMouseDown() {
            var _a2;
            (_a2 = context.floatingContext) == null ? void 0 : _a2.update();
            itemParentContext.setOpen(!context.open);
          }
        } : {
          onPress() {
            itemParentContext.setOpen(!context.open);
          }
        }
      }
    );
  }
);
export {
  SelectTrigger
};
//# sourceMappingURL=SelectTrigger.js.map
