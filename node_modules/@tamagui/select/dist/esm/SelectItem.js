import { jsx } from "react/jsx-runtime";
import { useComposedRefs } from "@tamagui/compose-refs";
import {
  isWeb,
  isWebTouchable,
  useIsomorphicLayoutEffect
} from "@tamagui/core";
import { ListItem } from "@tamagui/list-item";
import * as React from "react";
import { createSelectContext, useSelectItemParentContext } from "./context";
const ITEM_NAME = "SelectItem";
const [SelectItemContextProvider, useSelectItemContext] = createSelectContext(ITEM_NAME);
const SelectItem = React.forwardRef(
  (props, forwardedRef) => {
    const {
      __scopeSelect,
      value,
      disabled = false,
      textValue: textValueProp,
      index,
      ...itemProps
    } = props;
    const context = useSelectItemParentContext(ITEM_NAME, __scopeSelect);
    const {
      setSelectedIndex,
      listRef,
      setOpen,
      onChange,
      activeIndexSubscribe,
      valueSubscribe,
      allowMouseUpRef,
      allowSelectRef,
      setValueAtIndex,
      selectTimeoutRef,
      dataRef,
      interactions,
      shouldRenderWebNative,
      size,
      initialValue
    } = context;
    const [isSelected, setSelected] = React.useState(initialValue === value);
    const [isActive, setActive] = React.useState(false);
    React.useEffect(() => {
      return activeIndexSubscribe((i) => {
        setActive(index === i);
      });
    }, [index]);
    React.useEffect(() => {
      return valueSubscribe((val) => {
        setSelected(val === value);
      });
    }, [value]);
    const textId = React.useId();
    const composedRefs = useComposedRefs(forwardedRef, (node) => {
      if (!isWeb)
        return;
      if (node instanceof HTMLElement) {
        if (listRef) {
          listRef.current[index] = node;
        }
      }
    });
    useIsomorphicLayoutEffect(() => {
      setValueAtIndex(index, value);
    }, [index, setValueAtIndex, value]);
    function handleSelect() {
      setSelectedIndex(index);
      onChange(value);
      setOpen(false);
    }
    const selectItemProps = interactions ? interactions.getItemProps({
      ...isWebTouchable ? {
        onTouchStart() {
          allowSelectRef.current = true;
          allowMouseUpRef.current = false;
        }
      } : {
        onTouchMove() {
          allowSelectRef.current = true;
          allowMouseUpRef.current = false;
        },
        onTouchEnd() {
          allowSelectRef.current = false;
          allowMouseUpRef.current = true;
        }
      },
      onKeyDown(event) {
        if (event.key === "Enter" || event.key === " " && !(dataRef == null ? void 0 : dataRef.current.typing)) {
          event.preventDefault();
          handleSelect();
        } else {
          allowSelectRef.current = true;
        }
      },
      onClick() {
        if (allowSelectRef.current) {
          handleSelect();
        }
      },
      onMouseUp() {
        if (!allowMouseUpRef.current) {
          return;
        }
        if (allowSelectRef.current) {
          handleSelect();
        }
        clearTimeout(selectTimeoutRef.current);
        selectTimeoutRef.current = setTimeout(() => {
          allowSelectRef.current = true;
        });
      }
    }) : {
      onPress: handleSelect
    };
    useIsomorphicLayoutEffect(() => {
      var _a;
      if (isActive) {
        (_a = listRef == null ? void 0 : listRef.current[index]) == null ? void 0 : _a.focus();
      }
    }, [isActive]);
    return /* @__PURE__ */ jsx(
      SelectItemContextProvider,
      {
        scope: __scopeSelect,
        value,
        textId: textId || "",
        isSelected,
        children: shouldRenderWebNative ? /* @__PURE__ */ jsx("option", { value, children: props.children }) : /* @__PURE__ */ jsx(
          ListItem,
          {
            tag: "div",
            componentName: ITEM_NAME,
            ref: composedRefs,
            "aria-labelledby": textId,
            "aria-selected": isSelected,
            "data-state": isSelected ? "active" : "inactive",
            "aria-disabled": disabled || void 0,
            "data-disabled": disabled ? "" : void 0,
            tabIndex: disabled ? void 0 : -1,
            ...!props.unstyled && {
              backgrounded: true,
              pressTheme: true,
              hoverTheme: true,
              focusTheme: true,
              cursor: "default",
              outlineWidth: 0,
              size,
              ellipse: true
            },
            ...itemProps,
            ...selectItemProps
          }
        )
      }
    );
  }
);
SelectItem.displayName = ITEM_NAME;
export {
  SelectItem,
  SelectItemContextProvider,
  useSelectItemContext
};
//# sourceMappingURL=SelectItem.js.map
