import { Fragment, jsx, jsxs } from "react/jsx-runtime";
import { FloatingFocusManager } from "@floating-ui/react";
import { AnimatePresence } from "@tamagui/animate-presence";
import {
  composeRefs,
  isWeb,
  useIsomorphicLayoutEffect
} from "@tamagui/core";
import { styled } from "@tamagui/core";
import { PortalItem } from "@tamagui/portal";
import { ThemeableStack } from "@tamagui/stacks";
import { VIEWPORT_NAME } from "./constants";
import {
  ForwardSelectContext,
  useSelectContext,
  useSelectItemParentContext
} from "./context";
import { useSelectBreakpointActive } from "./useSelectBreakpointActive";
const SelectViewportFrame = styled(ThemeableStack, {
  name: VIEWPORT_NAME,
  variants: {
    unstyled: {
      false: {
        size: "$2",
        backgroundColor: "$background",
        elevate: true,
        bordered: true,
        userSelect: "none",
        outlineWidth: 0
      }
    },
    size: {
      "...size": (val, { tokens }) => {
        return {
          borderRadius: tokens.radius[val] ?? val
        };
      }
    }
  },
  defaultVariants: {
    unstyled: false
  }
});
const SelectViewport = SelectViewportFrame.styleable(
  function SelectViewport2(props, forwardedRef) {
    var _a;
    const { __scopeSelect, children, disableScroll, ...viewportProps } = props;
    const context = useSelectContext(VIEWPORT_NAME, __scopeSelect);
    const itemContext = useSelectItemParentContext(VIEWPORT_NAME, __scopeSelect);
    const breakpointActive = useSelectBreakpointActive(context.sheetBreakpoint);
    useIsomorphicLayoutEffect(() => {
      if (context.update) {
        context.update();
      }
    }, [breakpointActive]);
    const composedRefs = composeRefs(
      forwardedRef,
      (_a = context.floatingContext) == null ? void 0 : _a.refs.setFloating
    );
    if (itemContext.shouldRenderWebNative) {
      return /* @__PURE__ */ jsx(Fragment, { children });
    }
    if (breakpointActive || !isWeb) {
      return /* @__PURE__ */ jsx(PortalItem, { hostName: `${context.scopeKey}SheetContents`, children: /* @__PURE__ */ jsx(
        ForwardSelectContext,
        {
          __scopeSelect,
          itemContext,
          context,
          children
        }
      ) });
    }
    if (!itemContext.interactions) {
      if (process.env.NODE_ENV === "development") {
        console.warn(`No interactions provided to Select, potentially missing Adapt`);
      }
      return null;
    }
    const { style, ...floatingProps } = itemContext.interactions.getFloatingProps();
    const { scrollbarWidth, listStyleType, overflow, ...restStyle } = style;
    return /* @__PURE__ */ jsxs(Fragment, { children: [
      !disableScroll && !props.unstyled && /* @__PURE__ */ jsx(
        "style",
        {
          dangerouslySetInnerHTML: {
            __html: selectViewportCSS
          }
        }
      ),
      /* @__PURE__ */ jsx(FloatingFocusManager, { context: context.floatingContext, children: /* @__PURE__ */ jsx(AnimatePresence, { children: context.open ? /* @__PURE__ */ jsx(
        SelectViewportFrame,
        {
          disableClassName: true,
          size: itemContext.size,
          role: "presentation",
          ...viewportProps,
          ref: composedRefs,
          ...floatingProps,
          ...restStyle,
          ...!props.unstyled && {
            overflow: disableScroll ? void 0 : overflow ?? "scroll"
          },
          children
        },
        "select-viewport"
      ) : null }) }),
      !context.open && /* @__PURE__ */ jsx("div", { style: { display: "none" }, children: props.children })
    ] });
  }
);
const selectViewportCSS = `
.is_SelectViewport {
  scrollbar-width: none;
  -webkit-overflow-scrolling: touch;
  overscroll-behavior: contain;
}

.is_SelectViewport::-webkit-scrollbar{
  display:none
}
`;
export {
  SelectViewport,
  SelectViewportFrame
};
//# sourceMappingURL=SelectViewport.js.map
