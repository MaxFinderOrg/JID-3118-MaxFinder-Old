import { jsx } from "react/jsx-runtime";
import {
  isWeb,
  setupReactNative,
  styled,
  useTheme
} from "@tamagui/core";
import { useFocusable } from "@tamagui/focusable";
import { TextInput } from "react-native";
import { inputSizeVariant } from "../helpers/inputHelpers";
setupReactNative({
  TextInput
});
const defaultStyles = {
  size: "$true",
  fontFamily: "$body",
  borderWidth: 1,
  outlineWidth: 0,
  color: "$color",
  ...isWeb ? {
    tabIndex: 0
  } : {
    focusable: true
  },
  borderColor: "$borderColor",
  backgroundColor: "$background",
  // this fixes a flex bug where it overflows container
  minWidth: 0,
  hoverStyle: {
    borderColor: "$borderColorHover"
  },
  focusStyle: {
    outlineColor: "$borderColorFocus",
    outlineWidth: 2,
    outlineStyle: "solid",
    borderColor: "$borderColorFocus"
  }
};
const InputFrame = styled(
  TextInput,
  {
    name: "Input",
    variants: {
      unstyled: {
        false: defaultStyles
      },
      size: {
        "...size": inputSizeVariant
      }
    },
    defaultVariants: {
      unstyled: false
    }
  },
  {
    isInput: true
  }
);
const Input = InputFrame.styleable((propsIn, ref) => {
  const props = useInputProps(propsIn, ref);
  return /* @__PURE__ */ jsx(InputFrame, { ...props });
});
function useInputProps(props, ref) {
  var _a, _b;
  const theme = useTheme();
  const { onChangeText, ref: combinedRef } = useFocusable({
    props,
    ref,
    isInput: true
  });
  const placeholderColorProp = props.placeholderTextColor;
  const placeholderTextColor = ((_a = theme[placeholderColorProp]) == null ? void 0 : _a.get()) ?? placeholderColorProp ?? ((_b = theme.placeholderColor) == null ? void 0 : _b.get());
  return {
    ref: combinedRef,
    editable: !props.disabled,
    ...props,
    placeholderTextColor,
    onChangeText
  };
}
export {
  Input,
  InputFrame,
  defaultStyles,
  useInputProps
};
//# sourceMappingURL=Input.js.map
