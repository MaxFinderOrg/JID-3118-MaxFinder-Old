import { LinkingOptions, NavigationState, ParamListBase, PartialState } from "@react-navigation/native";
import React from "react";
import { RouteNode } from "../Route";
import getPathFromState from "../fork/getPathFromState";
import { ResultState } from "../fork/getStateFromPath";
import { RequireContext } from "../types";
export declare const navigationRef: import("@react-navigation/native").NavigationContainerRefWithCurrent<Record<string, unknown>>;
type SearchParams = Record<string, string | string[]>;
type UrlObject = {
    pathname: string;
    readonly params: SearchParams;
    segments: string[];
};
export declare class NavigationStore {
    subscriptionMap: Map<string, Set<() => void>>;
    ssrLocation: URL | undefined;
    navigationRef: import("@react-navigation/native").NavigationContainerRefWithCurrent<Record<string, unknown>>;
    routeNode: RouteNode;
    linking: LinkingOptions<object>;
    rootState: NavigationState | PartialState<NavigationState> | undefined;
    initialRootState: ResultState | undefined;
    url: URL;
    routeInfo: UrlObject;
    shouldShowTutorial: boolean;
    _onReady?: () => void;
    constructor(ssrLocation?: URL);
    initialise: (context: RequireContext, onReady: () => void) => void;
    handleRouteInfoChange: (data?: NavigationState | PartialState<NavigationState>) => void;
    onReady: () => void;
    notifiySubscribers: (topic: string) => void;
    subscribeFactory: (key: string) => (callback: () => void) => () => void;
    subscribeRouteInfo: (callback: () => void) => () => void;
    subscribeRootState: (callback: () => void) => () => void;
}
export declare const NavigationStoreContext: React.Context<NavigationStore>;
export declare function useNavigationStore(context: RequireContext): NavigationStore & {
    shouldShowSplash: boolean;
};
export declare function useRootNavigation(): import("@react-navigation/native").NavigationContainerRefWithCurrent<Record<string, unknown>>;
export declare function useLinkingContext(): Required<Omit<LinkingOptions<ParamListBase>, "filter" | "enabled">> & {
    getPathFromState: typeof getPathFromState;
};
export declare function useRootNavigationState(): Readonly<{
    key: string;
    index: number;
    routeNames: string[];
    history?: unknown[] | undefined;
    routes: (Readonly<{
        key: string;
        name: string;
        path?: string | undefined;
    }> & Readonly<{
        params?: Readonly<object | undefined>;
    }> & {
        state?: Readonly<any> | PartialState<Readonly<any>> | undefined;
    })[];
    type: string;
    stale: false;
}> | PartialState<Readonly<{
    key: string;
    index: number;
    routeNames: string[];
    history?: unknown[] | undefined;
    routes: (Readonly<{
        key: string;
        name: string;
        path?: string | undefined;
    }> & Readonly<{
        params?: Readonly<object | undefined>;
    }> & {
        state?: Readonly<any> | PartialState<Readonly<any>> | undefined;
    })[];
    type: string;
    stale: false;
}>> | undefined;
export declare function useRouteInfo(): UrlObject;
export declare function useSegments(): string[];
export declare function usePathname(): string;
export declare function useSearchParams(): SearchParams;
export declare function useLocalSearchParams<TParams extends SearchParams = SearchParams>(): Partial<TParams>;
export {};
//# sourceMappingURL=index.d.ts.map