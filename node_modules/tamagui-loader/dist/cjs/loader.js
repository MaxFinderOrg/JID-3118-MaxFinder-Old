"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var loader_exports = {};
__export(loader_exports, {
  loader: () => loader
});
module.exports = __toCommonJS(loader_exports);
var import_static = require("@tamagui/static");
Error.stackTraceLimit = Infinity;
const CSS_LOADER_PATH = require.resolve("./css");
Error.stackTraceLimit = Infinity;
const extractor = (0, import_static.createExtractor)();
let index = 0;
process.env.TAMAGUI_TARGET = "web";
const loader = async function loader2(sourceIn) {
  this.cacheable(true);
  const callback = this.async();
  const source = sourceIn.toString();
  try {
    const options = { ...this.getOptions() };
    const sourcePath = `${this.resourcePath}`;
    const { shouldDisable, shouldPrintDebug } = (0, import_static.getPragmaOptions)({
      source,
      path: sourcePath
    });
    if (shouldPrintDebug === "verbose") {
      console.warn(`

 --- Incoming source --- 

`);
      console.warn(source);
    }
    if (shouldDisable) {
      if (shouldPrintDebug) {
        console.log("Disabling on file via pragma");
      }
      return callback(null, source);
    }
    const cssPath = `${sourcePath}.${index++}.tamagui.css`;
    const extracted = await (0, import_static.extractToClassNames)({
      extractor,
      source,
      sourcePath,
      options,
      shouldPrintDebug
    });
    if (!extracted) {
      return callback(null, source);
    }
    if (extracted.styles) {
      const cssQuery = `cssData=${Buffer.from(extracted.styles).toString("base64")}`;
      const remReq = this.remainingRequest;
      const importPath = `${cssPath}!=!${CSS_LOADER_PATH}?${cssQuery}!${remReq}`;
      extracted.js = `${extracted.js}

require(${JSON.stringify(importPath)})`;
    }
    callback(null, extracted.js, extracted.map);
  } catch (err) {
    const message = err instanceof Error ? `${err.message}
${err.stack}` : String(err);
    console.error("Tamagui Webpack Loader Error:\n", `  ${message}
`);
    if (message.includes("Cannot create proxy")) {
      console.log(
        "This is usually due to components not loading at build-time. Check for logs just below the line above:"
      );
    }
    callback(null, source);
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  loader
});
//# sourceMappingURL=loader.js.map
