"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var TamaguiPlugin_exports = {};
__export(TamaguiPlugin_exports, {
  TamaguiPlugin: () => TamaguiPlugin
});
module.exports = __toCommonJS(TamaguiPlugin_exports);
var import_static = require("@tamagui/static");
class TamaguiPlugin {
  constructor(options = {
    components: ["@tamagui/core"]
  }) {
    this.options = options;
    this.pluginName = "TamaguiPlugin";
  }
  apply(compiler) {
    var _a;
    if (!this.options.disableWatchConfig) {
      void (0, import_static.watchTamaguiConfig)(this.options).then((watcher) => {
        process.once("exit", () => {
          watcher.dispose();
        });
      });
    }
    compiler.hooks.normalModuleFactory.tap(this.pluginName, (nmf) => {
      nmf.hooks.createModule.tap(
        this.pluginName,
        // @ts-expect-error CreateData is typed as 'object'...
        (createData) => {
          var _a2;
          if ((_a2 = createData.matchResource) == null ? void 0 : _a2.endsWith(".tamagui.css")) {
            createData.settings.sideEffects = true;
          }
        }
      );
    });
    compiler.options.resolve.extensions = [
      .../* @__PURE__ */ new Set([
        ".web.tsx",
        ".web.ts",
        ".web.js",
        ".ts",
        ".tsx",
        ".js",
        ...compiler.options.resolve.extensions || []
      ])
    ];
    const mainFields = compiler.options.resolve.mainFields;
    if (mainFields) {
      compiler.options.resolve.mainFields = Array.isArray(mainFields) ? mainFields : [mainFields];
      if (!this.options.disableModuleJSXEntry)
        mainFields.unshift("module:jsx");
    }
    if (!compiler.options.module) {
      return;
    }
    const { jsLoader } = this.options;
    const existing = compiler.options.module.rules;
    const rules = ((_a = existing.find((x) => typeof x === "object" && "oneOf" in x ? x : null)) == null ? void 0 : _a.oneOf) ?? existing;
    const nextJsRules = rules.findIndex(
      (x) => (x == null ? void 0 : x.use) && x.use.loader === "next-swc-loader" && x.issuerLayer !== "api"
    );
    const esbuildLoader = {
      loader: require.resolve("esbuild-loader"),
      options: {
        target: "es2021",
        keepNames: true,
        loader: "tsx",
        tsconfigRaw: {
          module: this.options.isServer ? "commonjs" : "esnext",
          isolatedModules: true,
          resolveJsonModule: true
        }
      }
    };
    if (!this.options.disable) {
      const tamaguiLoader = {
        loader: require.resolve("tamagui-loader"),
        options: {
          ...this.options
        }
      };
      if (nextJsRules === -1) {
        existing.push({
          test: /\/jsx\/.*\.m?[jt]sx?$/,
          exclude: this.options.exclude,
          resolve: {
            fullySpecified: false
          },
          use: [esbuildLoader]
        });
        existing.push({
          test: this.options.test ?? /\.m?[jt]sx?$/,
          exclude: this.options.exclude,
          resolve: {
            fullySpecified: false
          },
          use: [tamaguiLoader]
        });
      } else if (!this.options.disableEsbuildLoader) {
        const startIndex = nextJsRules ? nextJsRules + 1 : 0;
        const existingLoader = nextJsRules ? rules[startIndex] : void 0;
        rules.splice(startIndex, 0, {
          test: this.options.test ?? /\.m?[jt]sx?$/,
          exclude: this.options.exclude,
          resolve: {
            fullySpecified: false
          },
          use: [
            ...jsLoader ? [jsLoader] : [],
            ...existingLoader && nextJsRules ? [].concat(existingLoader.use) : [],
            ...!(jsLoader || existingLoader) ? [esbuildLoader] : [],
            tamaguiLoader
          ]
        });
      }
    }
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  TamaguiPlugin
});
//# sourceMappingURL=TamaguiPlugin.js.map
