import {
  createExtractor,
  extractToClassNames,
  getPragmaOptions
} from "@tamagui/static";
Error.stackTraceLimit = Infinity;
const CSS_LOADER_PATH = require.resolve("./css");
Error.stackTraceLimit = Infinity;
const extractor = createExtractor();
let index = 0;
process.env.TAMAGUI_TARGET = "web";
const loader = async function loader2(sourceIn) {
  this.cacheable(true);
  const callback = this.async();
  const source = sourceIn.toString();
  try {
    const options = { ...this.getOptions() };
    const sourcePath = `${this.resourcePath}`;
    const { shouldDisable, shouldPrintDebug } = getPragmaOptions({
      source,
      path: sourcePath
    });
    if (shouldPrintDebug === "verbose") {
      console.warn(`

 --- Incoming source --- 

`);
      console.warn(source);
    }
    if (shouldDisable) {
      if (shouldPrintDebug) {
        console.log("Disabling on file via pragma");
      }
      return callback(null, source);
    }
    const cssPath = `${sourcePath}.${index++}.tamagui.css`;
    const extracted = await extractToClassNames({
      extractor,
      source,
      sourcePath,
      options,
      shouldPrintDebug
    });
    if (!extracted) {
      return callback(null, source);
    }
    if (extracted.styles) {
      const cssQuery = `cssData=${Buffer.from(extracted.styles).toString("base64")}`;
      const remReq = this.remainingRequest;
      const importPath = `${cssPath}!=!${CSS_LOADER_PATH}?${cssQuery}!${remReq}`;
      extracted.js = `${extracted.js}

require(${JSON.stringify(importPath)})`;
    }
    callback(null, extracted.js, extracted.map);
  } catch (err) {
    const message = err instanceof Error ? `${err.message}
${err.stack}` : String(err);
    console.error("Tamagui Webpack Loader Error:\n", `  ${message}
`);
    if (message.includes("Cannot create proxy")) {
      console.log(
        "This is usually due to components not loading at build-time. Check for logs just below the line above:"
      );
    }
    callback(null, source);
  }
};
export {
  loader
};
//# sourceMappingURL=loader.js.map
